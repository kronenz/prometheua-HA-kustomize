# Copyright Broadcom, Inc. All Rights Reserved.
# SPDX-License-Identifier: APACHE-2.0

## ============================================================
## @section Global parameters (글로벌 파라미터)
## ============================================================
## 전역 Docker 이미지 파라미터
## 주의: 이 설정은 의존성을 포함한 모든 이미지 파라미터를 재정의합니다
## 사용 가능한 전역 파라미터: imageRegistry, imagePullSecrets, storageClass
##
## 💡 사용 시나리오:
##    - 모든 컴포넌트가 동일한 프라이빗 레지스트리를 사용하는 경우
##    - 일관된 이미지 Pull Secret을 적용해야 하는 경우
##    - 클러스터 전체에서 동일한 StorageClass를 사용하는 경우

## @param global.imageRegistry 전역 Docker 이미지 레지스트리 (예: registry.example.com)
## @param global.imagePullSecrets 전역 Docker 레지스트리 시크릿 이름 배열
## @param global.defaultStorageClass 영구 볼륨(PV)을 위한 전역 기본 StorageClass
##
global:
  imageRegistry: ""
  ## 예시:
  ## imagePullSecrets:
  ##   - myRegistryKeySecretName
  ##
  imagePullSecrets: []
  defaultStorageClass: ""

  ## ============================================================
  ## 보안 파라미터
  ## ============================================================
  security:
    ## @param global.security.allowInsecureImages 이미지 검증 건너뛰기 허용
    ## ⚠️ 프로덕션 환경에서는 false 권장
    allowInsecureImages: false

  ## ============================================================
  ## Kubernetes 플랫폼 호환성 설정
  ## ============================================================
  compatibility:
    ## OpenShift 호환성 설정
    ##
    openshift:
      ## @param global.compatibility.openshift.adaptSecurityContext OpenShift restricted-v2 SCC 호환을 위한 securityContext 조정
      ## runAsUser, runAsGroup, fsGroup을 제거하고 플랫폼의 기본 ID 사용
      ## 가능한 값:
      ##   - auto: OpenShift 클러스터 감지 시 자동 적용
      ##   - force: 항상 조정 수행
      ##   - disabled: 조정하지 않음
      ##
      adaptSecurityContext: auto
## ============================================================
## @section Common parameters (공통 파라미터)
## ============================================================

## @param kubeVersion 대상 Kubernetes 버전 강제 지정 (미설정 시 Helm capabilities 사용)
## 💡 특정 K8s 버전 기능에 의존하는 경우에만 설정
##
kubeVersion: ""

## @param nameOverride common.names.fullname 템플릿을 부분적으로 재정의 (릴리스 이름 유지)
## 예: nameOverride: "custom-thanos" → my-release-custom-thanos
##
nameOverride: ""

## @param fullnameOverride common.names.fullname 템플릿을 완전히 재정의
## 예: fullnameOverride: "thanos-prod" → thanos-prod (릴리스 이름 무시)
##
fullnameOverride: ""

## @param commonLabels 모든 배포된 리소스에 추가할 레이블
## 예: commonLabels: { "environment": "production", "team": "platform" }
##
commonLabels: {}

## @param commonAnnotations 모든 배포된 리소스에 추가할 어노테이션
## 예: commonAnnotations: { "managed-by": "argocd" }
##
commonAnnotations: {}

## @param clusterDomain Kubernetes 클러스터 도메인
## 💡 멀티클러스터 환경에서 클러스터마다 다른 도메인을 사용하는 경우 수정
##
clusterDomain: cluster.local

## @param extraDeploy 릴리스와 함께 배포할 추가 객체 배열
## 예: ConfigMap, Secret, ServiceMonitor 등의 커스텀 리소스
##
extraDeploy: []
## ============================================================
## @section Thanos common parameters (Thanos 공통 파라미터)
## ============================================================

## Bitnami Thanos 이미지
## ref: https://hub.docker.com/r/bitnami/thanos/tags/
##
## @param image.registry [default: REGISTRY_NAME] Thanos 이미지 레지스트리
## @param image.repository [default: REPOSITORY_NAME/thanos] Thanos 이미지 리포지토리
## @skip image.tag Thanos 이미지 태그 (불변 태그 권장)
## @param image.digest Thanos 이미지 다이제스트 (sha256:aa.... 형식, 설정 시 tag 재정의)
## @param image.pullPolicy Thanos 이미지 Pull 정책
## @param image.pullSecrets Docker 레지스트리 시크릿 이름 배열
##
## 💡 이미지 설정 가이드:
##    - 프로덕션: digest 사용 권장 (불변성 보장)
##    - 개발/테스트: tag 사용 가능
##    - pullPolicy: IfNotPresent (일반), Always (최신 이미지 필요 시)
##
image:
  registry: docker.io
  repository: bitnami/thanos
  tag: 0.39.2-debian-12-r2
  digest: ""
  ## ref: https://kubernetes.io/docs/concepts/containers/images/#pre-pulled-images
  ##
  pullPolicy: IfNotPresent
  ## 프라이빗 레지스트리 사용 시 imagePullSecrets 지정
  ## 시크릿은 네임스페이스에 미리 생성되어 있어야 함
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
  ## 예시:
  ## pullSecrets:
  ##   - myRegistryKeySecretName
  ##
  pullSecrets: []
## ============================================================
## 오브젝트 스토리지 설정 (S3, GCS, Azure 등)
## ============================================================
## @param objstoreConfig [오브젝트 스토리지 설정](https://thanos.io/tip/thanos/storage.md/)
## objstore.yml 파일의 내용을 YAML 형식으로 지정
##
## 💡 S3 예시 (MinIO):
##   objstoreConfig: |
##     type: S3
##     config:
##       bucket: "thanos"
##       endpoint: "s3.minio.miribit.lab"
##       access_key: "minio"
##       secret_key: "minio123"
##       insecure: false
##
objstoreConfig: ""

## @param indexCacheConfig [인덱스 캐시 설정](https://thanos.io/tip/components/store.md/)
## Store Gateway의 인덱스 캐시 설정 (성능 최적화)
## index-cache.yml 파일의 내용을 지정
##
## 💡 Memcached 예시:
##   indexCacheConfig: |
##     type: MEMCACHED
##     config:
##       addresses: ["memcached:11211"]
##       max_item_size: 5MiB
##
indexCacheConfig: ""

## @param bucketCacheConfig [버킷 캐시 설정](https://thanos.io/tip/components/store.md/)
## Store Gateway의 버킷 캐시 설정 (S3 읽기 성능 향상)
## bucket-cache.yml 파일의 내용을 지정
##
bucketCacheConfig: ""

## @param existingObjstoreSecret 오브젝트 스토리지 설정이 포함된 기존 Secret 이름
## ⚠️ 주의: 설정 시 objstoreConfig 값을 재정의합니다
## 💡 보안을 위해 프로덕션에서는 이 방법 권장
##
existingObjstoreSecret: ""

## @param existingObjstoreSecretItems 커스텀 Secret 키를 지정하기 위한 선택적 아이템 목록
## 지정 시 경로는 objstore.yml이어야 함
##
existingObjstoreSecretItems: []

## ============================================================
## HTTPS 및 인증 설정 (실험적 기능)
## ============================================================
## @param httpConfig [HTTPS 및 Basic Auth 설정](https://thanos.io/tip/operating/https.md/)
## 제공 시 https.* 및 auth.* 하위 설정을 재정의
##
httpConfig: ""

## @param existingHttpConfigSecret HTTPS 및 Basic Auth 설정이 포함된 Secret
##
existingHttpConfigSecret: ""
## HTTPS 설정 (실험적 기능)
## Ref: https://thanos.io/tip/operating/https.md/
##
https:
  ## @param https.enabled HTTPS 활성화 (인증서와 키가 포함된 Secret 필요)
  ## 💡 프로덕션 환경에서는 활성화 권장
  ##
  enabled: false

  ## @param https.autoGenerated 자체 서명 TLS 인증서 자동 생성
  ## ⚠️ 개발/테스트 전용, 프로덕션에서는 공인 인증서 사용
  ##
  autoGenerated: false

  ## @param https.existingSecret 서버 키와 인증서가 포함된 기존 Secret 이름
  ## 💡 프로덕션 권장 방식
  ##
  existingSecret: ""

  ## @param https.certFilename TLS 인증서 파일명 (Secret 내 키 이름)
  ##
  certFilename: "tls.crt"

  ## @param https.keyFilename TLS 키 파일명 (Secret 내 키 이름)
  ##
  keyFilename: "tls.key"

  ## @param https.caFilename CA 인증서 파일명 (Secret 내 키 이름)
  ##
  caFilename: "ca.crt"

  ## @param https.key Thanos HTTPS용 TLS 키 (existingSecret 제공 시 무시됨)
  ## @param https.cert Thanos HTTPS용 TLS 인증서 (existingSecret 제공 시 무시됨)
  ## @param https.ca (선택) 클라이언트용 CA 인증서 (existingSecret 제공 시 무시됨)
  ##
  key: ""
  cert: ""
  ca: ""

  ## @param https.clientAuthType 인증서를 사용한 클라이언트 인증을 위한 서버 정책
  ## ClientAuth 정책에 매핑됨
  ## 상세: https://golang.org/pkg/crypto/tls/#ClientAuthType
  ## 가능한 값: NoClientCert, RequestClientCert, RequireAnyClientCert, VerifyClientCertIfGiven, RequireAndVerifyClientCert
  ##
  clientAuthType: ""

  ## @param https.extraTlsServerConfig 추가 tls_server_config 옵션
  ## 상세: https://thanos.io/tip/operating/https.md
  ##
  extraTlsServerConfig: {}

## ============================================================
## Thanos Basic 인증 (실험적 기능)
## ============================================================
auth:
  ## @param auth.basicAuthUsers Basic 인증을 통해 접근할 사용자의 <user>:<password> 키-값 쌍
  ## 💡 예시: basicAuthUsers: { "admin": "password123", "viewer": "viewpass" }
  ## ⚠️ 주의: 패스워드는 나중에 bcrypt로 암호화됩니다
  ##
  basicAuthUsers: {}
## ============================================================
## @section Thanos Query parameters (Thanos Query 파라미터)
## ============================================================
## Thanos Query는 모든 Prometheus 인스턴스와 Store Gateway를 통합 쿼리하는
## 중앙 쿼리 계층입니다. Grafana의 데이터소스로 사용됩니다.
##
query:
  ## @param query.enabled Thanos Query 컴포넌트 활성화
  ## 💡 멀티클러스터 통합 쿼리를 위해 중앙 클러스터에서 활성화
  ##
  enabled: true

  ## @param query.logLevel Thanos Query 로그 레벨
  ## 가능한 값: debug, info, warn, error
  ##
  logLevel: info

  ## @param query.logFormat Thanos Query 로그 형식
  ## 가능한 값: logfmt, json
  ##
  logFormat: logfmt

  ## @param query.replicaLabel 데이터 중복 제거를 위한 레플리카 인디케이터
  ## 💡 Prometheus HA 구성 시 동일한 데이터를 가진 레플리카를 식별하는 레이블
  ## 예: [replica, prometheus_replica]
  ##
  replicaLabel: [replica]

  ## ============================================================
  ## DNS Discovery를 통한 Store API 동적 설정
  ## ============================================================
  ## @param query.dnsDiscovery.enabled DNS를 통한 Store API 자동 검색 활성화
  ## @param query.dnsDiscovery.sidecarsService DNS 검색으로 찾을 Sidecar 서비스 이름
  ## @param query.dnsDiscovery.sidecarsNamespace DNS 검색으로 찾을 Sidecar 네임스페이스
  ##
  ## 💡 Prometheus Sidecar를 자동으로 검색하여 쿼리 대상에 추가
  ##
  dnsDiscovery:
    enabled: true
    sidecarsService: ""
    sidecarsNamespace: ""

  ## @param query.stores Thanos Query에 연결할 Store API를 정적으로 설정
  ## 💡 예시:
  ##   stores:
  ##     - "dnssrv+_grpc._tcp.thanos-storegateway.monitoring.svc.cluster.local"
  ##     - "thanos-receive.monitoring.svc.cluster.local:10901"
  ##
  stores: []

  ## @param query.sdConfig Query 서비스 디스커버리 설정
  ## servicediscovery.yml 파일의 내용을 지정
  ## 💡 파일 기반 서비스 디스커버리를 사용하여 동적으로 Store를 추가/제거
  ##
  sdConfig: ""

  ## @param query.existingSDConfigmap Ruler 설정이 포함된 기존 ConfigMap 이름
  ## ⚠️ 주의: 설정 시 query.sdConfig 값을 재정의합니다
  ##
  existingSDConfigmap: ""
  ## @param query.extraEnvVars Thanos Query 컨테이너에 추가할 환경 변수
  ## 예시:
  ## extraEnvVars:
  ##   - name: FOO
  ##     value: "bar"
  ##
  extraEnvVars: []

  ## @param query.extraEnvVarsCM Thanos Query 노드에 추가할 환경 변수가 포함된 기존 ConfigMap 이름
  ##
  extraEnvVarsCM: ""

  ## @param query.extraEnvVarsSecret Thanos Query 노드에 추가할 환경 변수가 포함된 기존 Secret 이름
  ##
  extraEnvVarsSecret: ""

  ## @param query.extraFlags Thanos Query에 전달할 추가 플래그
  ## 💡 예시: ["--query.timeout=5m", "--query.max-concurrent=40"]
  ##
  extraFlags: []

  ## @param query.command 기본 컨테이너 명령 재정의 (커스텀 이미지 사용 시 유용)
  ##
  command: []

  ## @param query.args 기본 컨테이너 인수 재정의 (커스텀 이미지 사용 시 유용)
  ##
  args: []

  ## @param query.replicaCount 배포할 Thanos Query 레플리카 수
  ## 💡 HA 구성을 위해 2개 이상 권장 (프로덕션)
  ##
  replicaCount: 1

  ## @param query.revisionHistoryLimit 롤백을 위해 보관할 이전 히스토리 수
  ##
  revisionHistoryLimit: 10

  ## @param query.updateStrategy.type Thanos Query 레플리카의 업데이트 전략 타입
  ## 가능한 값: RollingUpdate, Recreate
  ##
  updateStrategy:
    type: RollingUpdate

  ## @param query.containerPorts.http HTTP 컨테이너 포트 (웹 UI 및 HTTP API)
  ## @param query.containerPorts.grpc GRPC 컨테이너 포트 (Store API 간 통신)
  ##
  containerPorts:
    http: 10902
    grpc: 10901
  ## ============================================================
  ## K8s Pod Security Context (Thanos Query Pod 보안 컨텍스트)
  ## ============================================================
  ## https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
  ##
  ## @param query.podSecurityContext.enabled Thanos Query Pod의 보안 컨텍스트 활성화
  ## @param query.podSecurityContext.fsGroupChangePolicy 파일시스템 그룹 변경 정책 설정
  ## @param query.podSecurityContext.sysctls sysctl 인터페이스를 사용한 커널 설정
  ## @param query.podSecurityContext.supplementalGroups 파일시스템 추가 그룹 설정
  ## @param query.podSecurityContext.fsGroup Thanos Query Pod가 사용하는 파일시스템의 그룹 ID
  ##
  podSecurityContext:
    enabled: true
    fsGroupChangePolicy: Always
    sysctls: []
    supplementalGroups: []
    fsGroup: 1001

  ## ============================================================
  ## K8s Container Security Context (컨테이너 보안 컨텍스트)
  ## ============================================================
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
  ##
  ## @param query.containerSecurityContext.enabled 컨테이너 보안 컨텍스트 활성화
  ## @param query.containerSecurityContext.seLinuxOptions [object,nullable] 컨테이너의 SELinux 옵션 설정
  ## @param query.containerSecurityContext.runAsUser 컨테이너를 실행할 사용자 ID
  ## @param query.containerSecurityContext.runAsGroup 컨테이너를 실행할 그룹 ID
  ## @param query.containerSecurityContext.runAsNonRoot 컨테이너를 non-root로 실행
  ## @param query.containerSecurityContext.privileged 컨테이너 특권 모드 설정
  ## @param query.containerSecurityContext.readOnlyRootFilesystem 읽기 전용 루트 파일시스템 설정
  ## @param query.containerSecurityContext.allowPrivilegeEscalation 권한 상승 허용 여부
  ## @param query.containerSecurityContext.capabilities.drop 삭제할 Capabilities 목록
  ## @param query.containerSecurityContext.seccompProfile.type Seccomp 프로필 타입
  ##
  ## 💡 보안 강화를 위한 권장 설정 적용됨
  ##
  containerSecurityContext:
    enabled: true
    seLinuxOptions: {}
    runAsUser: 1001
    runAsGroup: 1001
    runAsNonRoot: true
    privileged: false
    readOnlyRootFilesystem: true
    allowPrivilegeEscalation: false
    capabilities:
      drop: ["ALL"]
    seccompProfile:
      type: "RuntimeDefault"

  ## ============================================================
  ## 리소스 요청 및 제한
  ## ============================================================
  ## ref: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
  ##
  ## @param query.resourcesPreset 사전 정의된 리소스 프리셋 설정
  ## 가능한 값: none, nano, micro, small, medium, large, xlarge, 2xlarge
  ## ⚠️ query.resources가 설정되면 무시됨 (프로덕션에서는 query.resources 권장)
  ## 상세: https://github.com/bitnami/charts/blob/main/bitnami/common/templates/_resources.tpl#L15
  ##
  resourcesPreset: "nano"

  ## @param query.resources CPU 또는 메모리와 같은 리소스 요청 및 제한 설정
  ## 💡 프로덕션 워크로드에 필수적
  ## 예시:
  ## resources:
  ##   requests:
  ##     cpu: 2          # 최소 보장 CPU
  ##     memory: 512Mi   # 최소 보장 메모리
  ##   limits:
  ##     cpu: 3          # 최대 사용 가능 CPU
  ##     memory: 1024Mi  # 최대 사용 가능 메모리
  ##
  resources: {}
  ## ============================================================
  ## Health Probes (헬스 체크 설정)
  ## ============================================================
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
  ##
  ## @param query.livenessProbe.enabled Thanos Query 컨테이너의 Liveness Probe 활성화
  ## @param query.livenessProbe.initialDelaySeconds Liveness Probe 초기 지연 시간(초)
  ## @param query.livenessProbe.periodSeconds Liveness Probe 수행 주기(초)
  ## @param query.livenessProbe.timeoutSeconds Liveness Probe 타임아웃(초)
  ## @param query.livenessProbe.failureThreshold Liveness Probe 실패 임계값 (재시작 전 실패 횟수)
  ## @param query.livenessProbe.successThreshold Liveness Probe 성공 임계값
  ##
  ## 💡 Liveness Probe: 컨테이너가 살아있는지 확인, 실패 시 재시작
  ##
  livenessProbe:
    enabled: true
    initialDelaySeconds: 30
    timeoutSeconds: 30
    periodSeconds: 10
    successThreshold: 1
    failureThreshold: 6

  ## @param query.readinessProbe.enabled Thanos Query 컨테이너의 Readiness Probe 활성화
  ## @param query.readinessProbe.initialDelaySeconds Readiness Probe 초기 지연 시간(초)
  ## @param query.readinessProbe.periodSeconds Readiness Probe 수행 주기(초)
  ## @param query.readinessProbe.timeoutSeconds Readiness Probe 타임아웃(초)
  ## @param query.readinessProbe.failureThreshold Readiness Probe 실패 임계값
  ## @param query.readinessProbe.successThreshold Readiness Probe 성공 임계값
  ##
  ## 💡 Readiness Probe: 트래픽을 받을 준비가 되었는지 확인, 실패 시 Service에서 제외
  ##
  readinessProbe:
    enabled: true
    initialDelaySeconds: 30
    timeoutSeconds: 30
    periodSeconds: 10
    successThreshold: 1
    failureThreshold: 6

  ## @param query.startupProbe.enabled Thanos Query 컨테이너의 Startup Probe 활성화
  ## @param query.startupProbe.initialDelaySeconds Startup Probe 초기 지연 시간(초)
  ## @param query.startupProbe.periodSeconds Startup Probe 수행 주기(초)
  ## @param query.startupProbe.timeoutSeconds Startup Probe 타임아웃(초)
  ## @param query.startupProbe.failureThreshold Startup Probe 실패 임계값
  ## @param query.startupProbe.successThreshold Startup Probe 성공 임계값
  ##
  ## 💡 Startup Probe: 애플리케이션 시작 완료 확인, 성공 후 Liveness/Readiness 활성화
  ##
  startupProbe:
    enabled: false
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 1
    failureThreshold: 15
    successThreshold: 1

  ## @param query.customLivenessProbe 기본 Liveness Probe를 재정의하는 커스텀 설정
  ##
  customLivenessProbe: {}

  ## @param query.customReadinessProbe 기본 Readiness Probe를 재정의하는 커스텀 설정
  ##
  customReadinessProbe: {}

  ## @param query.customStartupProbe 기본 Startup Probe를 재정의하는 커스텀 설정
  ##
  customStartupProbe: {}
  ## ============================================================
  ## Init Containers, Sidecars, Volumes
  ## ============================================================

  ## @param query.initContainers Thanos Query Pod에 추가할 Init Container
  ## ref: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
  ## 예시:
  ## initContainers:
  ##  - name: wait-for-store
  ##    image: busybox
  ##    imagePullPolicy: Always
  ##    command: ['sh', '-c', 'until nc -z thanos-storegateway 10901; do sleep 2; done']
  ##
  initContainers: []

  ## @param query.sidecars Thanos Query Pod와 함께 실행할 Sidecar 컨테이너
  ## 예시:
  ## sidecars:
  ##   - name: log-exporter
  ##     image: fluent/fluent-bit
  ##     imagePullPolicy: Always
  ##     ports:
  ##       - name: http
  ##         containerPort: 2020
  ##
  sidecars: []

  ## @param query.extraVolumes Thanos Query에 추가할 볼륨
  ## 예: ConfigMap, Secret, EmptyDir 등
  ##
  extraVolumes: []

  ## @param query.extraVolumeMounts Query 컨테이너에 추가할 볼륨 마운트
  ##
  extraVolumeMounts: []

  ## ============================================================
  ## Pod Scheduling (Pod 스케줄링 설정)
  ## ============================================================

  ## @param query.podAffinityPreset Thanos Query Pod Affinity 프리셋
  ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
  ## 💡 동일한 애플리케이션 Pod끼리 같은 노드에 배치
  ##
  podAffinityPreset: ""

  ## @param query.podAntiAffinityPreset Thanos Query Pod Anti-Affinity 프리셋
  ## 💡 HA를 위해 Query Pod를 서로 다른 노드에 분산 배치
  ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
  ## 가능한 값: `soft` (권장사항), `hard` (강제)
  ## ⚠️ query.affinity가 설정되면 무시됨
  ##
  podAntiAffinityPreset: soft

  ## @param query.podAntiAffinityPresetTopologyKey Thanos Query Pod Anti-Affinity topology key
  ## ⚠️ query.affinity가 설정되면 무시됨
  ## 예: "kubernetes.io/hostname" (노드별 분산), "topology.kubernetes.io/zone" (가용영역별 분산)
  ##
  podAntiAffinityPresetTopologyKey: ""

  ## Thanos Query Node Affinity 프리셋
  ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#node-affinity
  ##
  nodeAffinityPreset:
    ## @param query.nodeAffinityPreset.type Thanos Query Node Affinity 프리셋 타입
    ## ⚠️ query.affinity가 설정되면 무시됨
    ## 가능한 값: `soft` (선호), `hard` (필수)
    ##
    type: ""

    ## @param query.nodeAffinityPreset.key 매칭할 Thanos Query 노드 레이블 키
    ## ⚠️ query.affinity가 설정되면 무시됨
    ## 예: "kubernetes.io/e2e-az-name", "node.kubernetes.io/instance-type"
    ##
    key: ""

    ## @param query.nodeAffinityPreset.values 매칭할 노드 레이블 값
    ## ⚠️ query.affinity가 설정되면 무시됨
    ## 예시:
    ## values:
    ##   - e2e-az1
    ##   - e2e-az2
    ##
    values: []

  ## @param query.affinity Thanos Query Pod 할당을 위한 Affinity 설정
  ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
  ## ⚠️ 주의: 설정 시 podAffinityPreset, podAntiAffinityPreset, nodeAffinityPreset은 무시됨
  ## 💡 세밀한 제어가 필요한 경우 사용
  ##
  affinity: {}

  ## @param query.nodeSelector Thanos Query Pod 할당을 위한 노드 레이블
  ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/
  ## 예: nodeSelector: { "disktype": "ssd" }
  ##
  nodeSelector: {}

  ## @param query.tolerations Thanos Query Pod 할당을 위한 Toleration
  ## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
  ## 💡 특정 Taint가 있는 노드에서도 실행 가능하게 설정
  ##
  tolerations: []
  ## ============================================================
  ## Pod Metadata 및 고급 설정
  ## ============================================================

  ## @param query.podLabels Thanos Query Pod 레이블
  ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
  ## 예: podLabels: { "app": "thanos", "component": "query" }
  ##
  podLabels: {}

  ## @param query.podAnnotations Thanos Query Pod 어노테이션
  ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
  ## 예: podAnnotations: { "prometheus.io/scrape": "true" }
  ##
  podAnnotations: {}

  ## @param query.dnsConfig Deployment Pod DNS 설정
  ## ref: https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/
  ## 예시:
  ## dnsConfig:
  ##   options:
  ##   - name: ndots
  ##     value: "4"
  ##   - name: single-request-reopen
  ##
  dnsConfig: {}

  ## @param query.dnsPolicy Deployment Pod DNS 정책
  ## ref: https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/
  ## 가능한 값: ClusterFirst, ClusterFirstWithHostNet, Default, None
  ## 예: dnsPolicy: ClusterFirstWithHostNet
  ##
  dnsPolicy: ""

  ## @param query.hostAliases Deployment Pod 호스트 별칭
  ## https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/
  ## 💡 Pod의 /etc/hosts에 커스텀 호스트 추가
  ##
  hostAliases: []

  ## @param query.lifecycleHooks Thanos Query 컨테이너의 라이프사이클 훅
  ## 💡 시작 전후 자동화 설정 (예: 설정 검증, 정리 작업)
  ##
  lifecycleHooks: {}

  ## @param query.priorityClassName Thanos Query PriorityClass 이름
  ## ref: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/
  ## 💡 리소스 부족 시 Pod 우선순위 결정
  ##
  priorityClassName: ""

  ## @param query.schedulerName Thanos Query Pod를 위한 K8s 스케줄러 이름
  ## ref: https://kubernetes.io/docs/tasks/administer-cluster/configure-multiple-schedulers/
  ## 💡 기본값 외 커스텀 스케줄러 사용 시
  ##
  schedulerName: ""

  ## @param query.topologySpreadConstraints Thanos Query Pod의 토폴로지 분산 제약조건
  ## Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/#spread-constraints-for-pods
  ## 💡 장애 도메인 간 Pod 분산 배치 (가용영역, 노드 등)
  ##
  topologySpreadConstraints: []
  ## ============================================================
  ## Thanos Query GRPC 파라미터
  ## ============================================================
  ## ref: https://github.com/thanos-io/thanos/blob/master/docs/components/query.md#flags
  ## 💡 GRPC는 Thanos 컴포넌트 간 통신에 사용됩니다 (Store API)
  ##
  grpc:
    ## ============================================================
    ## GRPC 서버 측 설정 (Query가 다른 컴포넌트의 요청을 받을 때)
    ## ============================================================
    server:
      ## TLS 설정
      ## @param query.grpc.server.tls.enabled GRPC 서버에서 TLS 암호화 활성화
      ## @param query.grpc.server.tls.autoGenerated 자체 서명 TLS 인증서 생성 (PEM 형식만 지원)
      ## @param query.grpc.server.tls.cert GRPC 서버용 TLS 인증서 (existingSecret 제공 시 무시됨)
      ## @param query.grpc.server.tls.key GRPC 서버용 TLS 키 (existingSecret 제공 시 무시됨)
      ## @param query.grpc.server.tls.ca 클라이언트 검증을 위한 TLS CA (existingSecret 제공 시 무시됨)
      ## @param query.grpc.server.tls.clientAuthEnabled 제공된 CA에 대한 TLS 클라이언트 검증 활성화
      ## @param query.grpc.server.tls.existingSecret TLS 인증서가 포함된 기존 Secret
      ##
      ## 💡 프로덕션 환경에서는 TLS 활성화 권장
      ##
      ## 예시:
      ## existingSecret:
      ##   name: thanos-grpc-server-tls
      ##   keyMapping:
      ##     ca-cert: ca.pem
      ##     tls-cert: cert.pem
      ##     tls-key: key.pem
      ##
      tls:
        enabled: false
        autoGenerated: false
        cert: ""
        key: ""
        ca: ""
        clientAuthEnabled: true
        existingSecret: {}

    ## ============================================================
    ## GRPC 클라이언트 측 설정 (Query가 다른 Store API에 연결할 때)
    ## ============================================================
    client:
      ## @param query.grpc.client.serverName 반환된 GRPC 인증서의 호스트명 검증을 위한 서버 이름
      ## 💡 TLS 사용 시 인증서의 CN/SAN과 일치해야 함
      ##
      serverName: ""

      ## TLS 설정
      ## @param query.grpc.client.tls.enabled GRPC 클라이언트에서 TLS 암호화 활성화
      ## @param query.grpc.client.tls.autoGenerated 자체 서명 TLS 인증서 생성 (PEM 형식만 지원)
      ## @param query.grpc.client.tls.cert GRPC 클라이언트용 TLS 인증서 (existingSecret 제공 시 무시됨)
      ## @param query.grpc.client.tls.key GRPC 클라이언트용 TLS 키 (existingSecret 제공 시 무시됨)
      ## @param query.grpc.client.tls.ca 서버 검증을 위한 TLS CA (existingSecret 제공 시 무시됨)
      ## @param query.grpc.client.tls.existingSecret TLS 인증서가 포함된 기존 Secret
      ##
      ## 예시:
      ## existingSecret:
      ##   name: thanos-grpc-client-tls
      ##   keyMapping:
      ##     ca-cert: ca.pem
      ##     tls-cert: cert.pem
      ##     tls-key: key.pem
      ##
      tls:
        enabled: false
        autoGenerated: false
        cert: ""
        key: ""
        ca: ""
        existingSecret: {}
  ## ============================================================
  ## Network Policies (네트워크 정책)
  ## ============================================================
  ## Ref: https://kubernetes.io/docs/concepts/services-networking/network-policies/
  ## 💡 Pod 간 네트워크 트래픽을 제어하여 보안 강화
  ##
  networkPolicy:
    ## @param query.networkPolicy.enabled NetworkPolicy 생성 여부
    ## 💡 프로덕션 환경에서는 활성화 권장
    ##
    enabled: true

    ## @param query.networkPolicy.allowExternal 외부 연결 허용 (클라이언트 레이블 불필요)
    ## 💡 정책 모델:
    ##   - false: 올바른 클라이언트 레이블을 가진 Pod만 접근 가능 (보안 강화)
    ##   - true: 올바른 목적지 포트를 가진 모든 소스에서 연결 허용 (편의성)
    ##
    allowExternal: true

    ## @param query.networkPolicy.allowExternalEgress Pod가 모든 포트 범위 및 목적지에 접근 허용
    ## 💡 false로 설정하면 Egress 트래픽을 제한하여 보안 강화
    ##
    allowExternalEgress: true

    ## @param query.networkPolicy.extraIngress [array] NetworkPolicy에 추가할 Ingress 규칙
    ## 예시:
    ## extraIngress:
    ##   - ports:
    ##       - port: 1234
    ##     from:
    ##       - podSelector:
    ##           matchLabels:
    ##             role: frontend
    ##       - podSelector:
    ##           matchExpressions:
    ##             - key: role
    ##               operator: In
    ##               values:
    ##                 - frontend
    ##
    extraIngress: []

    ## @param query.networkPolicy.extraEgress [array] NetworkPolicy에 추가할 Egress 규칙
    ## 예시:
    ## extraEgress:
    ##   - ports:
    ##       - port: 1234
    ##     to:
    ##       - podSelector:
    ##           matchLabels:
    ##             role: backend
    ##       - podSelector:
    ##           matchExpressions:
    ##             - key: role
    ##               operator: In
    ##               values:
    ##                 - backend
    ##
    extraEgress: []

    ## @param query.networkPolicy.ingressNSMatchLabels [object] 다른 네임스페이스의 트래픽을 허용하기 위한 레이블 매칭
    ## @param query.networkPolicy.ingressNSPodMatchLabels [object] 다른 네임스페이스의 트래픽을 허용하기 위한 Pod 레이블 매칭
    ##
    ingressNSMatchLabels: {}
    ingressNSPodMatchLabels: {}

  ## ============================================================
  ## Service 파라미터 (HTTP Service)
  ## ============================================================
  ## 💡 Grafana 등 클라이언트가 Query UI 및 API에 접근하기 위한 서비스
  ##
  service:
    ## @param query.service.type Kubernetes 서비스 타입
    ## 가능한 값: ClusterIP, NodePort, LoadBalancer
    ##
    type: ClusterIP

    ## @param query.service.ports.http Thanos Query 서비스 HTTP 포트
    ## 💡 Grafana 데이터소스 설정 시 이 포트 사용
    ##
    ports:
      http: 9090

    ## @param query.service.nodePorts.http LoadBalancer 및 NodePort 서비스 타입을 위한 Thanos Query HTTP nodePort 값
    ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
    ##
    nodePorts:
      http: ""

    ## @param query.service.clusterIP Thanos Query 서비스 clusterIP
    ## 예: clusterIP: None (Headless Service)
    ##
    clusterIP: ""

    ## @param query.service.loadBalancerIP 서비스 타입이 `LoadBalancer`인 경우 로드밸런서 IP
    ## 내부 전용 LoadBalancer 서비스 타입 설정
    ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#internal-load-balancer
    ##
    loadBalancerIP: ""

    ## @param query.service.loadBalancerSourceRanges 서비스가 LoadBalancer일 때 허용되는 주소 범위
    ## https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/#restrict-access-for-loadbalancer-service
    ## 예시:
    ## loadBalancerSourceRanges:
    ## - 10.10.10.0/24
    ##
    loadBalancerSourceRanges: []

    ## @param query.service.externalTrafficPolicy Thanos Query 서비스 externalTrafficPolicy
    ## 외부 트래픽을 노드-로컬 또는 클러스터-와이드 엔드포인트로 라우팅할지 결정
    ## 가능한 값: Cluster, Local
    ##
    externalTrafficPolicy: Cluster

    ## @param query.service.labels Thanos Query 서비스 레이블
    ##
    labels: {}

    ## @param query.service.annotations Thanos Query 서비스 어노테이션
    ## 예: AWS ELB 설정, MetalLB 설정 등
    ##
    annotations: {}

    ## @param query.service.extraPorts Thanos Query 서비스에서 노출할 추가 포트
    ##
    extraPorts: []

    ## @param query.service.labelSelectorsOverride Thanos Query 서비스를 위한 셀렉터
    ##
    labelSelectorsOverride: {}

    ## @param query.service.additionalHeadless 추가 Headless 서비스 생성
    ##
    additionalHeadless: false

    ## Headless 서비스 속성
    ##
    headless:
      ## @param query.service.headless.annotations Headless 서비스 어노테이션
      ##
      annotations: {}

    ## @param query.service.ipFamilyPolicy 듀얼 스택 구성을 위한 서비스 IP 패밀리 정책 설정
    ## ref: https://kubernetes.io/docs/concepts/services-networking/dual-stack/#services
    ## 가능한 값: SingleStack, PreferDualStack, RequireDualStack
    ##
    ipFamilyPolicy: ""

    ## @param query.service.ipFamilies 서비스가 지원해야 하는 IP 패밀리 목록 (적용 순서대로)
    ## 예: ["IPv4", "IPv6"]
    ##
    ipFamilies: []
  ## ============================================================
  ## Service GRPC 파라미터 (GRPC Service)
  ## ============================================================
  ## 💡 다른 Thanos 컴포넌트가 Query와 Store API 프로토콜로 통신하기 위한 서비스
  ##
  serviceGrpc:
    ## @param query.serviceGrpc.type Kubernetes 서비스 타입
    ##
    type: ClusterIP

    ## @param query.serviceGrpc.ports.grpc Thanos Query 서비스 GRPC 포트
    ## 💡 다른 Thanos Query가 이 Query에 연결할 때 사용
    ##
    ports:
      grpc: 10901

    ## @param query.serviceGrpc.nodePorts.grpc LoadBalancer 및 NodePort 서비스 타입을 위한 Thanos Query GRPC nodePort 값
    ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
    ##
    nodePorts:
      grpc: ""

    ## @param query.serviceGrpc.clusterIP Thanos Query 서비스 clusterIP
    ## 예: clusterIP: None (Headless Service)
    ##
    clusterIP: ""

    ## @param query.serviceGrpc.loadBalancerIP 서비스 타입이 `LoadBalancer`인 경우 로드밸런서 IP
    ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#internal-load-balancer
    ##
    loadBalancerIP: ""

    ## @param query.serviceGrpc.loadBalancerSourceRanges 서비스가 LoadBalancer일 때 허용되는 주소 범위
    ## 예시:
    ## loadBalancerSourceRanges:
    ## - 10.10.10.0/24
    ##
    loadBalancerSourceRanges: []

    ## @param query.serviceGrpc.externalTrafficPolicy Thanos Query 서비스 externalTrafficPolicy
    ## 가능한 값: Cluster, Local
    ##
    externalTrafficPolicy: Cluster

    ## @param query.serviceGrpc.labels Thanos Query GRPC 서비스 레이블
    ##
    labels: {}

    ## @param query.serviceGrpc.annotations Thanos Query GRPC 서비스 어노테이션
    ##
    annotations: {}

    ## @param query.serviceGrpc.extraPorts Thanos Query GRPC 서비스에서 노출할 추가 포트
    ##
    extraPorts: []

    ## @param query.serviceGrpc.labelSelectorsOverride Thanos Query GRPC 서비스를 위한 셀렉터
    ##
    labelSelectorsOverride: {}

    ## @param query.serviceGrpc.additionalHeadless 추가 Headless 서비스 생성
    ##
    additionalHeadless: false

    ## Headless 서비스 속성
    ##
    headless:
      ## @param query.serviceGrpc.headless.annotations Headless 서비스 어노테이션
      ##
      annotations: {}

    ## @param query.serviceGrpc.ipFamilyPolicy 듀얼 스택 구성을 위한 서비스 IP 패밀리 정책 설정
    ##
    ipFamilyPolicy: ""

    ## @param query.serviceGrpc.ipFamilies 서비스가 지원해야 하는 IP 패밀리 목록
    ##
    ipFamilies: []
  ## ============================================================
  ## ServiceAccount 및 RBAC 설정
  ## ============================================================

  ## @param query.automountServiceAccountToken Deployment에서만 서비스 계정 토큰 자동 마운트 활성화/비활성화
  ##
  automountServiceAccountToken: true

  ## ServiceAccount 구성
  ## @param query.serviceAccount.create ServiceAccount 생성 여부
  ## @param query.serviceAccount.name 사용할 서비스 계정 이름 (미설정 시 fullname 템플릿으로 생성)
  ## @param query.serviceAccount.annotations Thanos Query ServiceAccount 어노테이션
  ## @param query.serviceAccount.automountServiceAccountToken 서비스 계정 토큰 자동 마운트 활성화/비활성화
  ##
  ## 💡 IRSA (IAM Roles for Service Accounts) 사용 시 annotations에 역할 ARN 추가
  ##
  serviceAccount:
    create: true
    name: ""
    annotations: {}
    automountServiceAccountToken: false

  ## RBAC 구성
  ##
  rbac:
    ## @param query.rbac.create Thanos Query ServiceAccount를 위한 ClusterRole 및 ClusterRoleBinding 생성
    ## 💡 Kubernetes API 접근이 필요한 경우 활성화
    ##
    create: false

    ## @param query.rbac.rules 설정할 커스텀 RBAC 규칙
    ## 예시:
    ## rules:
    ##   - apiGroups:
    ##       - ""
    ##     resources:
    ##       - pods
    ##     verbs:
    ##       - get
    ##       - list
    ##
    rules: []

  ## @param query.pspEnabled Thanos Query를 위한 PodSecurityPolicy 생성 여부
  ## ⚠️ 경고: PodSecurityPolicy는 Kubernetes v1.21 이상에서 deprecated, v1.25 이상에서 사용 불가
  ##
  pspEnabled: false

  ## ============================================================
  ## Thanos Query Autoscaling 설정 (HPA)
  ## ============================================================
  ## ref: https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/
  ##
  ## @param query.autoscaling.enabled Thanos Query 오토스케일링 활성화
  ## @param query.autoscaling.minReplicas Thanos Query 최소 레플리카 수
  ## @param query.autoscaling.maxReplicas Thanos Query 최대 레플리카 수
  ## @param query.autoscaling.targetCPU 목표 CPU 사용률 (%)
  ## @param query.autoscaling.targetMemory 목표 메모리 사용률 (%)
  ## @param query.autoscaling.targetPodMetrics [array] 스케일링 평가를 위한 커스텀 Pod 메트릭 목록
  ## @param query.autoscaling.behavior HPA 동작 설정
  ## @param query.externalAutoscaler Thanos Query Deployment가 외부 오토스케일러에 의해 스케일링되는지 여부
  ##
  ## 💡 쿼리 부하에 따라 자동으로 Query Pod 수 조정
  ##
  ## 예시:
  ## targetPodMetrics:
  ## - name: thanos_query_range_query_duration
  ##   averageValue: 2
  ## - name: thanos_query_promql_duration_metric
  ##   averageValue: 0.5
  ##
  autoscaling:
    enabled: false
    minReplicas: ""
    maxReplicas: ""
    targetCPU: ""
    targetMemory: ""
    targetPodMetrics: []
    behavior: {}
  externalAutoscaler: false
  ## Thanos Query Pod Disruption Budget configuration
  ## ref: https://kubernetes.io/docs/tasks/run-application/configure-pdb
  ## @param query.pdb.create Enable/disable a Pod Disruption Budget creation for Thanos Query
  ## @param query.pdb.minAvailable Minimum number/percentage of pods that should remain scheduled
  ## @param query.pdb.maxUnavailable Maximum number/percentage of pods that may be made unavailable
  ##
  pdb:
    create: true
    minAvailable: ""
    maxUnavailable: ""
  ## Configure the ingress resource that allows you to access Thanos Query
  ## ref: https://kubernetes.io/docs/concepts/services-networking/ingress/
  ##
  ingress:
    ## @param query.ingress.enabled Enable ingress controller resource
    ##
    enabled: false
    ## @param query.ingress.hostname Default host for the ingress resource
    ##
    hostname: thanos.local
    ## @param query.ingress.secretName Custom secretName for the ingress resource
    ## If query.ingress.secretName is not set, the secret will be named as follows: query.ingress.hostname-tls
    secretName: ""
    ## @param query.ingress.ingressClassName IngressClass that will be be used to implement the Ingress (Kubernetes 1.18+)
    ## This is supported in Kubernetes 1.18+ and required if you have more than one IngressClass marked as the default for your cluster .
    ## ref: https://kubernetes.io/blog/2020/04/02/improvements-to-the-ingress-api-in-kubernetes-1.18/
    ##
    ingressClassName: ""
    ## @param query.ingress.labels Additional label for the Ingress resource.
    ## Use this parameter to set the required labels for your needs
    ## e.g:
    ## labels:
    ##   dns-managed-by-external-dns: 'true'
    ##
    labels: {}
    ## @param query.ingress.annotations Additional annotations for the Ingress resource. To enable certificate autogeneration, place here your cert-manager annotations.
    ## For a full list of possible ingress annotations, please see
    ## ref: https://github.com/kubernetes/ingress-nginx/blob/main/docs/user-guide/nginx-configuration/annotations.md
    ## Use this parameter to set the required annotations for cert-manager, see
    ## ref: https://cert-manager.io/docs/usage/ingress/#supported-annotations
    ##
    ## e.g:
    ## annotations:
    ##   kubernetes.io/ingress.class: nginx
    ##   cert-manager.io/cluster-issuer: cluster-issuer-name
    ##
    annotations: {}
    ## @param query.ingress.extraHosts The list of additional hostnames to be covered with this ingress record.
    ## Most likely the hostname above will be enough, but in the event more hosts are needed, this is an array
    ## extraHosts:
    ## - name: thanos.local
    ##   path: /
    ##   pathType: ImplementationSpecific
    ##
    extraHosts: []
    ## @param query.ingress.extraTls The tls configuration for additional hostnames to be covered with this ingress record.
    ## see: https://kubernetes.io/docs/concepts/services-networking/ingress/#tls
    ## extraTls:
    ## - hosts:
    ##     - thanos.local
    ##   secretName: thanos.local-tls
    ##
    extraTls: []
    ## @param query.ingress.secrets If you're providing your own certificates, please use this to add the certificates as secrets
    ## key and certificate should start with -----BEGIN CERTIFICATE----- or
    ## -----BEGIN RSA PRIVATE KEY-----
    ##
    ## name should line up with a tlsSecret set further up
    ## If you're using cert-manager, this is unneeded, as it will create the secret for you if it is not set
    ##
    ## It is also possible to create and manage the certificates outside of this helm chart
    ## Please see README.md for more information
    ## e.g:
    ## - name: thanos.local-tls
    ##   key:
    ##   certificate:
    ##
    secrets: []
    ## @param query.ingress.extraRules Additional rules to be covered with this ingress record
    ## ref: https://kubernetes.io/docs/concepts/services-networking/ingress/#ingress-rules
    ## e.g:
    ## extraRules:
    ## - host: example.local
    ##     http:
    ##       path: /
    ##       backend:
    ##         service:
    ##           name: example-svc
    ##           port:
    ##             name: http
    ##
    extraRules: []
    ## @param query.ingress.tls Enable TLS configuration for the hostname defined at `query.ingress.hostname` parameter
    ## TLS certificates will be retrieved from a TLS secret with name: `{{- printf "%s-tls" .Values.query.ingress.hostname }}`
    ## You can:
    ##   - Use the `query.ingress.secrets` parameter to create this TLS secret
    ##   - Rely on cert-manager to create it by setting the corresponding annotations
    ##   - Rely on Helm to create self-signed certificates by setting `query.ingress.selfSigned=true`
    ##
    tls: false
    ## @param query.ingress.selfSigned Create a TLS secret for this ingress record using self-signed certificates generated by Helm
    ##
    selfSigned: false
    ## @param query.ingress.apiVersion Force Ingress API version (automatically detected if not set)
    ##
    apiVersion: ""
    ## @param query.ingress.path Ingress path
    ##
    path: /
    ## @param query.ingress.pathType Ingress path type
    ##
    pathType: ImplementationSpecific
    ## Create an ingress object for the GRPC service. This requires an HTTP/2
    ## capable Ingress controller (eg. traefik using AWS NLB). Example annotations
    ## - ingress.kubernetes.io/protocol: h2c
    ## - service.beta.kubernetes.io/aws-load-balancer-type: nlb
    ## - service.beta.kubernetes.io/aws-load-balancer-backend-protocol: tcp
    ## For more information see https://kubernetes.io/docs/concepts/cluster-administration/cloud-providers/
    ## and also the documentation for your ingress controller.
    ##
    ## The options that are accepted are identical to the HTTP one listed above
    ##
    grpc:
      ## @param query.ingress.grpc.enabled Enable ingress controller resource (GRPC)
      ##
      enabled: false
      ## @param query.ingress.grpc.hostname Default host for the ingress resource (GRPC)
      ##
      hostname: thanos-grpc.local
      ## @param query.ingress.grpc.secretName Custom secretName for the ingress resource (GRPC)
      ## If query.ingress.grpc.secretName is not set, the secret will be named as follows: query.ingress.grpc.hostname-tls
      secretName: ""
      ## @param query.ingress.grpc.ingressClassName IngressClass that will be be used to implement the Ingress (Kubernetes 1.18+)
      ## This is supported in Kubernetes 1.18+ and required if you have more than one IngressClass marked as the default for your cluster .
      ## ref: https://kubernetes.io/blog/2020/04/02/improvements-to-the-ingress-api-in-kubernetes-1.18/
      ##
      ingressClassName: ""
      ## @param query.ingress.grpc.annotations Additional annotations for the Ingress resource (GRPC). To enable certificate autogeneration, place here your cert-manager annotations.
      ## For a full list of possible ingress annotations, please see
      ## ref: https://github.com/kubernetes/ingress-nginx/blob/main/docs/user-guide/nginx-configuration/annotations.md
      ## Use this parameter to set the required annotations for cert-manager, see
      ## ref: https://cert-manager.io/docs/usage/ingress/#supported-annotations
      ##
      ## Examples:
      ## kubernetes.io/ingress.class: nginx
      ## cert-manager.io/cluster-issuer: cluster-issuer-name
      ##
      annotations: {}
      ## @param query.ingress.grpc.extraHosts The list of additional hostnames to be covered with this ingress record.
      ## Most likely the hostname above will be enough, but in the event more hosts are needed, this is an array
      ## extraHosts:
      ## - name: thanos-grpc.local
      ##   path: /
      ##
      extraHosts: []
      ## @param query.ingress.grpc.extraTls The tls configuration for additional hostnames to be covered with this ingress record.
      ## see: https://kubernetes.io/docs/concepts/services-networking/ingress/#tls
      ## extraTls:
      ## - hosts:
      ##     - thanos-grpc.local
      ##   secretName: thanos-grpc.local-tls
      ##
      extraTls: []
      ## @param query.ingress.grpc.secrets If you're providing your own certificates, please use this to add the certificates as secrets
      ## key and certificate should start with -----BEGIN CERTIFICATE----- or
      ## -----BEGIN RSA PRIVATE KEY-----
      ##
      ## name should line up with a tlsSecret set further up
      ## If you're using cert-manager, this is unneeded, as it will create the secret for you if it is not set
      ##
      ## It is also possible to create and manage the certificates outside of this helm chart
      ## Please see README.md for more information
      ## e.g:
      ## - name: thanos-grpc.local-tls
      ##   key:
      ##   certificate:
      ##
      secrets: []
      ## @param query.ingress.grpc.extraRules Additional rules to be covered with this ingress record
      ## ref: https://kubernetes.io/docs/concepts/services-networking/ingress/#ingress-rules
      ## e.g:
      ## extraRules:
      ## - host: example.local
      ##     http:
      ##       path: /
      ##       backend:
      ##         service:
      ##           name: example-svc
      ##           port:
      ##             name: http
      ##
      extraRules: []
      ## @param query.ingress.grpc.tls Enable TLS configuration for the hostname defined at `query.ingress.grpc.hostname` parameter
      ## TLS certificates will be retrieved from a TLS secret with name: `{{- printf "%s-tls" .Values.query.ingress.grpc.hostname }}`
      ## You can:
      ##   - Use the `query.ingress.grpc.secrets` parameter to create this TLS secret
      ##   - Rely on cert-manager to create it by setting the corresponding annotations
      ##   - Rely on Helm to create self-signed certificates by setting `query.ingress.grpc.selfSigned=true`
      ##
      tls: false
      ## @param query.ingress.grpc.selfSigned Create a TLS secret for this ingress record using self-signed certificates generated by Helm
      ##
      selfSigned: false
      ## @param query.ingress.grpc.apiVersion Override API Version (automatically detected if not set)
      ##
      apiVersion: ""
      ## @param query.ingress.grpc.path Ingress Path
      ##
      path: /
      ## @param query.ingress.grpc.pathType Ingress Path type
      ##
      pathType: ImplementationSpecific
## ============================================================
## @section Thanos Query Frontend parameters (Thanos Query Frontend 파라미터)
## ============================================================
## 💡 Thanos Query Frontend는 Query 앞단에서 쿼리 캐싱 및 분할을 수행하는 컴포넌트입니다.
##
## 주요 기능:
##   1. 쿼리 결과 캐싱 (Response Cache)
##   2. 쿼리 분할 (Query Splitting) - 긴 범위 쿼리를 작은 단위로 분할
##   3. 쿼리 재시도 및 타임아웃 관리
##   4. 여러 Query 인스턴스에 부하 분산
##
## 아키텍처:
##   Grafana --> Query Frontend --> Query --> Store/Sidecar
##
## 💡 대규모 시계열 조회 성능 향상 및 Query 부하 감소
##
queryFrontend:
  ## @param queryFrontend.enabled Thanos Query Frontend 컴포넌트 활성화/비활성화
  ## 💡 대규모 환경에서 쿼리 성능 향상을 위해 활성화
  ##
  enabled: true

  ## @param queryFrontend.logLevel Thanos Query Frontend 로그 레벨
  ##
  logLevel: info

  ## @param queryFrontend.logFormat Thanos Query Frontend 로그 형식
  ##
  logFormat: logfmt

  ## @param queryFrontend.config Thanos Query Frontend 설정
  ## config.yml 파일의 내용 지정
  ##
  ## 예시 (Response Cache with Memcached):
  ## config: |
  ##   type: MEMCACHED
  ##   config:
  ##     addresses:
  ##       - memcached:11211
  ##     max_idle_connections: 100
  ##     timeout: 2s
  ##
  config: ""

  ## @param queryFrontend.existingConfigmap Thanos Query Frontend 설정이 포함된 기존 ConfigMap 이름
  ## ⚠️ 주의: 설정 시 queryFrontend.config 값을 재정의합니다
  ##
  existingConfigmap: ""
  ## @param queryFrontend.extraEnvVars Extra environment variables for Thanos Query Frontend container
  ## e.g:
  ## extraEnvVars:
  ##   - name: FOO
  ##     value: "bar"
  ##
  extraEnvVars: []
  ## @param queryFrontend.extraEnvVarsCM Name of existing ConfigMap containing extra env vars for Thanos Query Frontend nodes
  ##
  extraEnvVarsCM: ""
  ## @param queryFrontend.extraEnvVarsSecret Name of existing Secret containing extra env vars for Thanos Query Frontend nodes
  ##
  extraEnvVarsSecret: ""
  ## @param queryFrontend.extraFlags Extra Flags to passed to Thanos Query Frontend
  ##
  extraFlags: []
  ## @param queryFrontend.command Override default container command (useful when using custom images)
  ##
  command: []
  ## @param queryFrontend.args Override default container args (useful when using custom images)
  ##
  args: []
  ## @param queryFrontend.replicaCount Number of Thanos Query Frontend replicas to deploy
  ##
  replicaCount: 1
  ## @param queryFrontend.revisionHistoryLimit The number of old history to retain to allow rollback
  ##
  revisionHistoryLimit: 10
  ## @param queryFrontend.updateStrategy.type Update strategy type for Thanos Query Frontend replicas
  ##
  updateStrategy:
    type: RollingUpdate
  ## @param queryFrontend.containerPorts.http HTTP container port
  ##
  containerPorts:
    http: 9090
  ## K8s Pod Security Context for Thanos Query Frontend pods
  ## https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
  ## @param queryFrontend.podSecurityContext.enabled Enable security context for the Thanos Query Frontend pods
  ## @param queryFrontend.podSecurityContext.fsGroupChangePolicy Set filesystem group change policy
  ## @param queryFrontend.podSecurityContext.sysctls Set kernel settings using the sysctl interface
  ## @param queryFrontend.podSecurityContext.supplementalGroups Set filesystem extra groups
  ## @param queryFrontend.podSecurityContext.fsGroup Group ID for the filesystem used by Thanos Query Frontend pods
  ##
  podSecurityContext:
    enabled: true
    fsGroupChangePolicy: Always
    sysctls: []
    supplementalGroups: []
    fsGroup: 1001
  ## K8s containers' Security Context for Thanos Query Frontend containers
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
  ## @param queryFrontend.containerSecurityContext.enabled Enabled containers' Security Context
  ## @param queryFrontend.containerSecurityContext.seLinuxOptions [object,nullable] Set SELinux options in container
  ## @param queryFrontend.containerSecurityContext.runAsUser Set containers' Security Context runAsUser
  ## @param queryFrontend.containerSecurityContext.runAsGroup Set containers' Security Context runAsGroup
  ## @param queryFrontend.containerSecurityContext.runAsNonRoot Set container's Security Context runAsNonRoot
  ## @param queryFrontend.containerSecurityContext.privileged Set container's Security Context privileged
  ## @param queryFrontend.containerSecurityContext.readOnlyRootFilesystem Set container's Security Context readOnlyRootFilesystem
  ## @param queryFrontend.containerSecurityContext.allowPrivilegeEscalation Set container's Security Context allowPrivilegeEscalation
  ## @param queryFrontend.containerSecurityContext.capabilities.drop List of capabilities to be dropped
  ## @param queryFrontend.containerSecurityContext.seccompProfile.type Set container's Security Context seccomp profile
  ##
  containerSecurityContext:
    enabled: true
    seLinuxOptions: {}
    runAsUser: 1001
    runAsGroup: 1001
    runAsNonRoot: true
    privileged: false
    readOnlyRootFilesystem: true
    allowPrivilegeEscalation: false
    capabilities:
      drop: ["ALL"]
    seccompProfile:
      type: "RuntimeDefault"
  ## Thanos Query Frontend containers' resource requests and limits
  ## ref: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
  ## @param queryFrontend.resourcesPreset Set container resources according to one common preset (allowed values: none, nano, micro, small, medium, large, xlarge, 2xlarge). This is ignored if queryFrontend.resources is set (queryFrontend.resources is recommended for production).
  ## More information: https://github.com/bitnami/charts/blob/main/bitnami/common/templates/_resources.tpl#L15
  ##
  resourcesPreset: "nano"
  ## @param queryFrontend.resources Set container requests and limits for different resources like CPU or memory (essential for production workloads)
  ## Example:
  ## resources:
  ##   requests:
  ##     cpu: 2
  ##     memory: 512Mi
  ##   limits:
  ##     cpu: 3
  ##     memory: 1024Mi
  ##
  resources: {}
  ## Configure extra options for Thanos Query Frontend containers' liveness and readiness probes
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
  ## @param queryFrontend.livenessProbe.enabled Enable livenessProbe on Thanos Query Frontend containers
  ## @param queryFrontend.livenessProbe.initialDelaySeconds Initial delay seconds for livenessProbe
  ## @param queryFrontend.livenessProbe.periodSeconds Period seconds for livenessProbe
  ## @param queryFrontend.livenessProbe.timeoutSeconds Timeout seconds for livenessProbe
  ## @param queryFrontend.livenessProbe.failureThreshold Failure threshold for livenessProbe
  ## @param queryFrontend.livenessProbe.successThreshold Success threshold for livenessProbe
  ##
  livenessProbe:
    enabled: true
    initialDelaySeconds: 30
    timeoutSeconds: 30
    periodSeconds: 10
    successThreshold: 1
    failureThreshold: 6
  ## @param queryFrontend.readinessProbe.enabled Enable readinessProbe on Thanos Query Frontend containers
  ## @param queryFrontend.readinessProbe.initialDelaySeconds Initial delay seconds for readinessProbe
  ## @param queryFrontend.readinessProbe.periodSeconds Period seconds for readinessProbe
  ## @param queryFrontend.readinessProbe.timeoutSeconds Timeout seconds for readinessProbe
  ## @param queryFrontend.readinessProbe.failureThreshold Failure threshold for readinessProbe
  ## @param queryFrontend.readinessProbe.successThreshold Success threshold for readinessProbe
  ##
  readinessProbe:
    enabled: true
    initialDelaySeconds: 30
    timeoutSeconds: 30
    periodSeconds: 10
    successThreshold: 1
    failureThreshold: 6
  ## @param queryFrontend.startupProbe.enabled Enable startupProbe on Thanos Query Frontend containers
  ## @param queryFrontend.startupProbe.initialDelaySeconds Initial delay seconds for startupProbe
  ## @param queryFrontend.startupProbe.periodSeconds Period seconds for startupProbe
  ## @param queryFrontend.startupProbe.timeoutSeconds Timeout seconds for startupProbe
  ## @param queryFrontend.startupProbe.failureThreshold Failure threshold for startupProbe
  ## @param queryFrontend.startupProbe.successThreshold Success threshold for startupProbe
  ##
  startupProbe:
    enabled: false
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 1
    failureThreshold: 15
    successThreshold: 1
  ## @param queryFrontend.customLivenessProbe Custom livenessProbe that overrides the default one
  ##
  customLivenessProbe: {}
  ## @param queryFrontend.customReadinessProbe Custom readinessProbe that overrides the default one
  ##
  customReadinessProbe: {}
  ## @param queryFrontend.customStartupProbe Custom startupProbe that overrides the default one
  ##
  customStartupProbe: {}
  ## @param queryFrontend.initContainers Add additional init containers to the Thanos Query Frontend pods
  ## ref: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
  ## e.g:
  ## initContainers:
  ##  - name: your-image-name
  ##    image: your-image
  ##    imagePullPolicy: Always
  ##    command: ['sh', '-c', 'echo "hello world"']
  ##
  initContainers: []
  ## @param queryFrontend.sidecars Extra containers running as sidecars to Thanos Query Frontend pods
  ## e.g:
  ## sidecars:
  ##   - name: your-image-name
  ##     image: your-image
  ##     imagePullPolicy: Always
  ##     ports:
  ##       - name: portname
  ##         containerPort: 1234
  ##
  sidecars: []
  ## @param queryFrontend.extraVolumes Extra volumes to add to Thanos Query Frontend
  ##
  extraVolumes: []
  ## @param queryFrontend.extraVolumeMounts Extra volume mounts to add to the query-frontend container
  ##
  extraVolumeMounts: []
  ## @param queryFrontend.podAffinityPreset Thanos Query Frontend pod affinity preset
  ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
  ##
  podAffinityPreset: ""
  ## @param queryFrontend.podAntiAffinityPreset Thanos Query Frontend pod anti-affinity preset. Ignored if `queryFrontend.affinity` is set. Allowed values: `soft` or `hard`
  ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
  ##
  podAntiAffinityPreset: soft
  ## Thanos Query Frontend node affinity preset
  ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#node-affinity
  ##
  nodeAffinityPreset:
    ## @param queryFrontend.nodeAffinityPreset.type Thanos Query Frontend node affinity preset type. Ignored if `queryFrontend.affinity` is set. Allowed values: `soft` or `hard`
    ##
    type: ""
    ## @param queryFrontend.nodeAffinityPreset.key Thanos Query Frontend node label key to match. Ignored if `queryFrontend.affinity` is set.
    ## e.g:
    ## key: "kubernetes.io/e2e-az-name"
    ##
    key: ""
    ## @param queryFrontend.nodeAffinityPreset.values Thanos Query Frontend node label values to match. Ignored if `queryFrontend.affinity` is set.
    ## e.g:
    ## values:
    ##   - e2e-az1
    ##   - e2e-az2
    ##
    values: []
  ## @param queryFrontend.affinity Thanos Query Frontend affinity for pod assignment
  ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
  ## Note: queryFrontend.podAffinityPreset, queryFrontend.podAntiAffinityPreset, and queryFrontend.nodeAffinityPreset will be ignored when it's set
  ##
  affinity: {}
  ## @param queryFrontend.nodeSelector Thanos Query Frontend node labels for pod assignment
  ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/
  ##
  nodeSelector: {}
  ## @param queryFrontend.tolerations Thanos Query Frontend tolerations for pod assignment
  ## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
  ##
  tolerations: []
  ## @param queryFrontend.podLabels Thanos Query Frontend pod labels
  ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
  ##
  podLabels: {}
  ## @param queryFrontend.podAnnotations Annotations for Thanos Query Frontend pods
  ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
  ##
  podAnnotations: {}
  ## @param queryFrontend.dnsConfig Deployment pod DNS config
  ## ref: https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/
  ## E.g.
  ## dnsConfig:
  ##   options:
  ##   - name: ndots
  ##     value: "4"
  ##   - name: single-request-reopen
  ##
  dnsConfig: {}
  ## @param queryFrontend.dnsPolicy Deployment pod DNS policy
  ## ref: https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/
  ## E.g.
  ## dnsPolicy: ClusterFirstWithHostNet
  ##
  dnsPolicy: ""
  ## @param queryFrontend.hostAliases Deployment pod host aliases
  ## https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/
  ##
  hostAliases: []
  ## @param queryFrontend.lifecycleHooks for the Thanos Query Frontend container(s) to automate configuration before or after startup
  ##
  lifecycleHooks: {}
  ## @param queryFrontend.priorityClassName Thanos Query Frontend priorityClassName
  ## ref: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/
  ##
  priorityClassName: ""
  ## @param queryFrontend.schedulerName Name of the k8s scheduler (other than default) for Thanos Query Frontend pods
  ## ref: https://kubernetes.io/docs/tasks/administer-cluster/configure-multiple-schedulers/
  ##
  schedulerName: ""
  ## @param queryFrontend.topologySpreadConstraints Topology Spread Constraints for Thanos Query Frontend pods assignment spread across your cluster among failure-domains
  ## Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/#spread-constraints-for-pods
  ##
  topologySpreadConstraints: []
  ## Network Policies
  ## Ref: https://kubernetes.io/docs/concepts/services-networking/network-policies/
  ##
  networkPolicy:
    ## @param queryFrontend.networkPolicy.enabled Specifies whether a NetworkPolicy should be created
    ##
    enabled: true
    ## @param queryFrontend.networkPolicy.allowExternal Don't require client label for connections
    ## The Policy model to apply. When set to false, only pods with the correct
    ## client label will have network access to the ports the application is listening
    ## on. When true, the app will accept connections from any source
    ## (with the correct destination port).
    ##
    allowExternal: true
    ## @param queryFrontend.networkPolicy.allowExternalEgress Allow the pod to access any range of port and all destinations.
    ##
    allowExternalEgress: true
    ## @param queryFrontend.networkPolicy.extraIngress [array] Add extra ingress rules to the NetworkPolicy
    ## e.g:
    ## extraIngress:
    ##   - ports:
    ##       - port: 1234
    ##     from:
    ##       - podSelector:
    ##           - matchLabels:
    ##               - role: frontend
    ##       - podSelector:
    ##           - matchExpressions:
    ##               - key: role
    ##                 operator: In
    ##                 values:
    ##                   - frontend
    extraIngress: []
    ## @param queryFrontend.networkPolicy.extraEgress [array] Add extra ingress rules to the NetworkPolicy
    ## e.g:
    ## extraEgress:
    ##   - ports:
    ##       - port: 1234
    ##     to:
    ##       - podSelector:
    ##           - matchLabels:
    ##               - role: frontend
    ##       - podSelector:
    ##           - matchExpressions:
    ##               - key: role
    ##                 operator: In
    ##                 values:
    ##                   - frontend
    ##
    extraEgress: []
    ## @param queryFrontend.networkPolicy.ingressNSMatchLabels [object] Labels to match to allow traffic from other namespaces
    ## @param queryFrontend.networkPolicy.ingressNSPodMatchLabels [object] Pod labels to match to allow traffic from other namespaces
    ##
    ingressNSMatchLabels: {}
    ingressNSPodMatchLabels: {}
  ## Service parameters
  ##
  service:
    ## @param queryFrontend.service.type Kubernetes service type
    ##
    type: ClusterIP
    ## @param queryFrontend.service.ports.http Thanos Query Frontend service HTTP port
    ##
    ports:
      http: 9090
    ## @param queryFrontend.service.nodePorts.http Specify the Thanos Query Frontend HTTP nodePort value for the LoadBalancer and NodePort service types
    ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
    ##
    nodePorts:
      http: ""
    ## @param queryFrontend.service.clusterIP Thanos Query Frontend service clusterIP IP
    ## e.g:
    ## clusterIP: None
    ##
    clusterIP: ""
    ## @param queryFrontend.service.loadBalancerIP Load balancer IP if service type is `LoadBalancer`
    ## Set the LoadBalancer service type to internal only
    ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#internal-load-balancer
    ##
    loadBalancerIP: ""
    ## @param queryFrontend.service.loadBalancerSourceRanges Address that are allowed when service is LoadBalancer
    ## https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/#restrict-access-for-loadbalancer-service
    ## e.g:
    ## loadBalancerSourceRanges:
    ## - 10.10.10.0/24
    ##
    loadBalancerSourceRanges: []
    ## @param queryFrontend.service.externalTrafficPolicy Thanos Query Frontend service externalTrafficPolicy
    ## Denotes if this Service desires to route external traffic to node-local or cluster-wide endpoints
    ##
    externalTrafficPolicy: Cluster
    ## @param queryFrontend.service.annotations Annotations for Thanos Query Frontend service
    ##
    annotations: {}
    ## @param queryFrontend.service.labels Labels for Thanos Query Frontend service
    ##
    labels: {}
    ## @param queryFrontend.service.extraPorts Extra ports to expose in the Thanos Query Frontend service
    ##
    extraPorts: []
    ## @param queryFrontend.service.labelSelectorsOverride Selector for Thanos Query service
    ##
    labelSelectorsOverride: {}
    ## @param queryFrontend.service.ipFamilyPolicy Sets the IP family policy for the Service to be able to configure dual-stack; see [Configure dual-stack](https://kubernetes.io/docs/concepts/services-networking/dual-stack/#services).
    ##
    ipFamilyPolicy: ""
    ## @param queryFrontend.service.ipFamilies A list of IP families for the Service that should be supported, in the order in which they should be applied. Can be "IPv4" and/or "IPv6".
    ##
    ipFamilies: []
  ## @param queryFrontend.automountServiceAccountToken Enable/disable auto mounting of the service account token only for the deployment
  ##
  automountServiceAccountToken: true
  ## ServiceAccount configuration
  ## @param queryFrontend.serviceAccount.create Specifies whether a ServiceAccount should be created
  ## @param queryFrontend.serviceAccount.name Name of the service account to use. If not set and create is true, a name is generated using the fullname template.
  ## @param queryFrontend.serviceAccount.annotations Annotations for Thanos Query Frontend Service Account
  ## @param queryFrontend.serviceAccount.automountServiceAccountToken Enable/disable auto mounting of the service account token
  ##
  serviceAccount:
    create: true
    name: ""
    annotations: {}
    automountServiceAccountToken: false
  ## RBAC configuration
  ##
  rbac:
    ## @param queryFrontend.rbac.create Create a ClusterRole and ClusterRoleBinding for the Thanos Query Frontend Service Account
    ##
    create: false
    ## @param queryFrontend.rbac.rules Custom RBAC rules to set
    ## e.g:
    ## rules:
    ##   - apiGroups:
    ##       - ""
    ##     resources:
    ##       - pods
    ##     verbs:
    ##       - get
    ##       - list
    ##
    rules: []
  ## @param queryFrontend.pspEnabled Whether to create a PodSecurityPolicy for Thanos Query Frontend
  ## WARNING: PodSecurityPolicy is deprecated in Kubernetes v1.21 or later, unavailable in v1.25 or later
  ##
  pspEnabled: false
  ## Thanos Query Frontend Autoscaling configuration
  ## ref: https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/
  ## @param queryFrontend.autoscaling.enabled Enable autoscaling for Thanos Query Frontend
  ## @param queryFrontend.autoscaling.minReplicas Minimum number of Thanos Query Frontend replicas
  ## @param queryFrontend.autoscaling.maxReplicas Maximum number of Thanos Query Frontend replicas
  ## @param queryFrontend.autoscaling.targetCPU Target CPU utilization percentage
  ## @param queryFrontend.autoscaling.targetMemory Target Memory utilization percentage
  ## @param queryFrontend.autoscaling.behavior HPA Behavior
  ## @param queryFrontend.externalAutoscaler Specifies whether the Thanos Query Frontend deployment is scaled by an external autoscaler
  ##
  autoscaling:
    enabled: false
    minReplicas: ""
    maxReplicas: ""
    targetCPU: ""
    targetMemory: ""
    behavior: {}
  externalAutoscaler: false
  ## Thanos Query Frontend Pod Disruption Budget configuration
  ## ref: https://kubernetes.io/docs/tasks/run-application/configure-pdb
  ## @param queryFrontend.pdb.create Enable/disable a Pod Disruption Budget creation for Thanos Query Frontend
  ## @param queryFrontend.pdb.minAvailable Minimum number/percentage of pods that should remain scheduled
  ## @param queryFrontend.pdb.maxUnavailable Maximum number/percentage of pods that may be made unavailable
  ##
  pdb:
    create: true
    minAvailable: ""
    maxUnavailable: ""
  ## Configure the ingress resource that allows you to access Thanos Query Frontend
  ## ref: https://kubernetes.io/docs/concepts/services-networking/ingress/
  ##
  ingress:
    ## @param queryFrontend.ingress.enabled Enable ingress controller resource
    ##
    enabled: false
    ## @param queryFrontend.ingress.hostname Default host for the ingress resource
    ##
    hostname: thanos.local
    ## @param queryFrontend.ingress.overrideAlertQueryURL Automatically use query-frontend's ingress hostname as --alert.queryURL for both Query and Ruler.
    ## This is used in order for the expression url on alerts/rules to be correctly rendered on UI as Frontend's hostname, instead of http://localhost:10902
    ##
    overrideAlertQueryURL: true
    ## @param queryFrontend.ingress.ingressClassName IngressClass that will be be used to implement the Ingress (Kubernetes 1.18+)
    ## This is supported in Kubernetes 1.18+ and required if you have more than one IngressClass marked as the default for your cluster .
    ## ref: https://kubernetes.io/blog/2020/04/02/improvements-to-the-ingress-api-in-kubernetes-1.18/
    ##
    ingressClassName: ""
    ## @param queryFrontend.ingress.labels Additional label for the Ingress resource.
    ## Use this parameter to set the required labels for your needs
    ## e.g:
    ## labels:
    ##   dns-managed-by-external-dns: 'true'
    ##
    labels: {}
    ## @param queryFrontend.ingress.annotations Additional annotations for the Ingress resource. To enable certificate autogeneration, place here your cert-manager annotations.
    ## For a full list of possible ingress annotations, please see
    ## ref: https://github.com/kubernetes/ingress-nginx/blob/main/docs/user-guide/nginx-configuration/annotations.md
    ## Use this parameter to set the required annotations for cert-manager, see
    ## ref: https://cert-manager.io/docs/usage/ingress/#supported-annotations
    ##
    ## e.g:
    ## annotations:
    ##   kubernetes.io/ingress.class: nginx
    ##   cert-manager.io/cluster-issuer: cluster-issuer-name
    ##
    annotations: {}
    ## @param queryFrontend.ingress.extraHosts The list of additional hostnames to be covered with this ingress record.
    ## Most likely the hostname above will be enough, but in the event more hosts are needed, this is an array
    ## extraHosts:
    ## - name: thanos.local
    ##   path: /
    ##   pathType: ImplementationSpecific
    ##
    extraHosts: []
    ## @param queryFrontend.ingress.extraTls The tls configuration for additional hostnames to be covered with this ingress record.
    ## see: https://kubernetes.io/docs/concepts/services-networking/ingress/#tls
    ## extraTls:
    ## - hosts:
    ##     - thanos.local
    ##   secretName: thanos.local-tls
    ##
    extraTls: []
    ## @param queryFrontend.ingress.secrets If you're providing your own certificates, please use this to add the certificates as secrets
    ## key and certificate should start with -----BEGIN CERTIFICATE----- or
    ## -----BEGIN RSA PRIVATE KEY-----
    ##
    ## name should line up with a tlsSecret set further up
    ## If you're using cert-manager, this is unneeded, as it will create the secret for you if it is not set
    ##
    ## It is also possible to create and manage the certificates outside of this helm chart
    ## Please see README.md for more information
    ## e.g:
    ## - name: thanos.local-tls
    ##   key:
    ##   certificate:
    ##
    secrets: []
    ## @param queryFrontend.ingress.extraRules Additional rules to be covered with this ingress record
    ## ref: https://kubernetes.io/docs/concepts/services-networking/ingress/#ingress-rules
    ## e.g:
    ## extraRules:
    ## - host: example.local
    ##     http:
    ##       path: /
    ##       backend:
    ##         service:
    ##           name: example-svc
    ##           port:
    ##             name: http
    ##
    extraRules: []
    ## @param queryFrontend.ingress.tls Enable TLS configuration for the hostname defined at `queryFrontend.ingress.hostname` parameter
    ## TLS certificates will be retrieved from a TLS secret with name: `{{- printf "%s-tls" .Values.queryFrontend.ingress.hostname }}`
    ## You can:
    ##   - Use the `queryFrontend.ingress.secrets` parameter to create this TLS secret
    ##   - Rely on cert-manager to create it by setting the corresponding annotations
    ##   - Rely on Helm to create self-signed certificates by setting `queryFrontend.ingress.selfSigned=true`
    ##
    tls: false
    ## @param queryFrontend.ingress.selfSigned Create a TLS secret for this ingress record using self-signed certificates generated by Helm
    ##
    selfSigned: false
    ## @param queryFrontend.ingress.apiVersion Force Ingress API version (automatically detected if not set)
    ##
    apiVersion: ""
    ## @param queryFrontend.ingress.path Ingress path
    ##
    path: /
    ## @param queryFrontend.ingress.pathType Ingress path type
    ##
    pathType: ImplementationSpecific
## ============================================================
## @section Thanos Bucket Web parameters (Thanos Bucket Web 파라미터)
## ============================================================
## 💡 Thanos Bucket Web은 S3 버킷의 메트릭 블록을 웹 UI로 조회하는 컴포넌트입니다.
##
## 주요 기능:
##   1. S3 버킷의 블록 메타데이터 시각화
##   2. 블록 상태 및 크기 확인
##   3. Compaction 레벨 확인
##   4. 블록 다운샘플링 상태 확인
##
## 💡 디버깅 및 S3 스토리지 상태 모니터링에 유용 (선택적 컴포넌트)
##
bucketweb:
  ## @param bucketweb.enabled Thanos Bucket Web 컴포넌트 활성화/비활성화
  ## 💡 S3 블록 상태를 시각적으로 확인하고 싶을 때 활성화
  ##
  enabled: false

  ## @param bucketweb.logLevel Thanos Bucket Web 로그 레벨
  ##
  logLevel: info

  ## @param bucketweb.logFormat Thanos Bucket Web 로그 형식
  ##
  logFormat: logfmt

  ## @param bucketweb.refresh 원격 스토리지에서 메타데이터를 다운로드하는 갱신 주기
  ## 💡 S3 블록 정보 업데이트 빈도
  ##
  refresh: 30m

  ## @param bucketweb.timeout 원격 스토리지에서 메타데이터를 다운로드하는 타임아웃
  ##
  timeout: 5m
  ## @param bucketweb.extraEnvVars Thanos Bucket Web 컨테이너에 추가할 환경 변수
  ## 💡 사용 예:
  ## extraEnvVars:
  ##   - name: FOO
  ##     value: "bar"
  ##
  extraEnvVars: []
  ## @param bucketweb.extraEnvVarsCM Thanos Bucket Web 노드에 추가할 환경 변수를 포함하는 기존 ConfigMap 이름
  ##
  extraEnvVarsCM: ""
  ## @param bucketweb.extraEnvVarsSecret Thanos Bucket Web 노드에 추가할 환경 변수를 포함하는 기존 Secret 이름
  ##
  extraEnvVarsSecret: ""
  ## @param bucketweb.extraFlags Thanos Bucket Web에 전달할 추가 플래그
  ## 💡 예: --log.level=debug
  ##
  extraFlags: []
  ## @param bucketweb.command 기본 컨테이너 명령 재정의 (커스텀 이미지 사용 시 유용)
  ##
  command: []
  ## @param bucketweb.args 기본 컨테이너 인자 재정의 (커스텀 이미지 사용 시 유용)
  ##
  args: []
  ## @param bucketweb.replicaCount Thanos Bucket Web 레플리카 수
  ## 💡 일반적으로 1개로 충분 (읽기 전용 컴포넌트)
  ##
  replicaCount: 1
  ## @param bucketweb.revisionHistoryLimit 롤백을 위해 유지할 이전 버전 수
  ##
  revisionHistoryLimit: 10
  ## @param bucketweb.updateStrategy.type Thanos Bucket Web 레플리카 업데이트 전략 타입
  ## 💡 RollingUpdate: 무중단 업데이트
  ##
  updateStrategy:
    type: RollingUpdate
  ## @param bucketweb.containerPorts.http HTTP 컨테이너 포트
  ##
  containerPorts:
    http: 8080
  ## Kubernetes Pod Security Context for Thanos Bucket Web pods
  ## https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
  ## @param bucketweb.podSecurityContext.enabled Thanos Bucket Web 파드의 보안 컨텍스트 활성화
  ## @param bucketweb.podSecurityContext.fsGroupChangePolicy 파일시스템 그룹 변경 정책 설정
  ## @param bucketweb.podSecurityContext.sysctls sysctl 인터페이스를 사용한 커널 설정
  ## @param bucketweb.podSecurityContext.supplementalGroups 파일시스템 추가 그룹 설정
  ## @param bucketweb.podSecurityContext.fsGroup Thanos Bucket Web 파드가 사용하는 파일시스템의 그룹 ID
  ##
  podSecurityContext:
    enabled: true
    fsGroupChangePolicy: Always
    sysctls: []
    supplementalGroups: []
    fsGroup: 1001
  ## Kubernetes containers' Security Context for Thanos Bucket Web containers
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
  ## @param bucketweb.containerSecurityContext.enabled 컨테이너 보안 컨텍스트 활성화
  ## @param bucketweb.containerSecurityContext.seLinuxOptions [object,nullable] 컨테이너의 SELinux 옵션 설정
  ## @param bucketweb.containerSecurityContext.runAsUser 컨테이너를 실행할 사용자 ID 설정
  ## @param bucketweb.containerSecurityContext.runAsGroup 컨테이너를 실행할 그룹 ID 설정
  ## @param bucketweb.containerSecurityContext.runAsNonRoot 컨테이너를 비-root 사용자로 실행
  ## @param bucketweb.containerSecurityContext.privileged 컨테이너의 특권 모드 설정
  ## @param bucketweb.containerSecurityContext.readOnlyRootFilesystem 컨테이너의 루트 파일시스템을 읽기 전용으로 설정
  ## @param bucketweb.containerSecurityContext.allowPrivilegeEscalation 컨테이너의 권한 상승 허용 설정
  ## @param bucketweb.containerSecurityContext.capabilities.drop 제거할 Capability 목록
  ## @param bucketweb.containerSecurityContext.seccompProfile.type 컨테이너의 Seccomp 프로필 타입 설정
  ##
  containerSecurityContext:
    enabled: true
    seLinuxOptions: {}
    runAsUser: 1001
    runAsGroup: 1001
    runAsNonRoot: true
    privileged: false
    readOnlyRootFilesystem: true
    allowPrivilegeEscalation: false
    capabilities:
      drop: ["ALL"]
    seccompProfile:
      type: "RuntimeDefault"
  ## Thanos Bucket Web 컨테이너의 리소스 요청 및 제한
  ## ref: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
  ## @param bucketweb.resourcesPreset 미리 정의된 프리셋에 따라 컨테이너 리소스 설정 (허용 값: none, nano, micro, small, medium, large, xlarge, 2xlarge). bucketweb.resources가 설정되면 무시됨 (프로덕션 환경에서는 bucketweb.resources 권장)
  ## 💡 자세한 정보: https://github.com/bitnami/charts/blob/main/bitnami/common/templates/_resources.tpl#L15
  ##
  resourcesPreset: "nano"
  ## @param bucketweb.resources CPU 또는 메모리와 같은 다양한 리소스에 대한 컨테이너 요청 및 제한 설정 (프로덕션 워크로드에 필수)
  ## 💡 Bucket Web은 경량 컴포넌트이므로 리소스 요구사항이 낮음
  ## 예제:
  ## resources:
  ##   requests:
  ##     cpu: 100m
  ##     memory: 128Mi
  ##   limits:
  ##     cpu: 200m
  ##     memory: 256Mi
  ##
  resources: {}
  ## Thanos Bucket Web 컨테이너의 Liveness 및 Readiness Probe 추가 옵션 구성
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
  ## @param bucketweb.livenessProbe.enabled Thanos Bucket Web 컨테이너의 livenessProbe 활성화
  ## @param bucketweb.livenessProbe.initialDelaySeconds livenessProbe 초기 지연 시간(초)
  ## @param bucketweb.livenessProbe.periodSeconds livenessProbe 주기(초)
  ## @param bucketweb.livenessProbe.timeoutSeconds livenessProbe 타임아웃(초)
  ## @param bucketweb.livenessProbe.failureThreshold livenessProbe 실패 임계값
  ## @param bucketweb.livenessProbe.successThreshold livenessProbe 성공 임계값
  ##
  livenessProbe:
    enabled: true
    initialDelaySeconds: 30
    timeoutSeconds: 30
    periodSeconds: 10
    successThreshold: 1
    failureThreshold: 6
  ## @param bucketweb.readinessProbe.enabled Thanos Bucket Web 컨테이너의 readinessProbe 활성화
  ## @param bucketweb.readinessProbe.initialDelaySeconds readinessProbe 초기 지연 시간(초)
  ## @param bucketweb.readinessProbe.periodSeconds readinessProbe 주기(초)
  ## @param bucketweb.readinessProbe.timeoutSeconds readinessProbe 타임아웃(초)
  ## @param bucketweb.readinessProbe.failureThreshold readinessProbe 실패 임계값
  ## @param bucketweb.readinessProbe.successThreshold readinessProbe 성공 임계값
  ##
  readinessProbe:
    enabled: true
    initialDelaySeconds: 30
    timeoutSeconds: 30
    periodSeconds: 10
    successThreshold: 1
    failureThreshold: 6
  ## @param bucketweb.startupProbe.enabled Thanos Bucket Web 컨테이너의 startupProbe 활성화
  ## @param bucketweb.startupProbe.initialDelaySeconds startupProbe 초기 지연 시간(초)
  ## @param bucketweb.startupProbe.periodSeconds startupProbe 주기(초)
  ## @param bucketweb.startupProbe.timeoutSeconds startupProbe 타임아웃(초)
  ## @param bucketweb.startupProbe.failureThreshold startupProbe 실패 임계값
  ## @param bucketweb.startupProbe.successThreshold startupProbe 성공 임계값
  ##
  startupProbe:
    enabled: false
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 1
    failureThreshold: 15
    successThreshold: 1
  ## @param bucketweb.customLivenessProbe 기본 livenessProbe를 재정의하는 사용자 정의 livenessProbe
  ##
  customLivenessProbe: {}
  ## @param bucketweb.customReadinessProbe 기본 readinessProbe를 재정의하는 사용자 정의 readinessProbe
  ##
  customReadinessProbe: {}
  ## @param bucketweb.customStartupProbe 기본 startupProbe를 재정의하는 사용자 정의 startupProbe
  ##
  customStartupProbe: {}
  ## @param bucketweb.initContainers Thanos Bucket Web 파드에 추가할 초기화 컨테이너
  ## ref: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
  ## 예제:
  ## initContainers:
  ##  - name: your-image-name
  ##    image: your-image
  ##    imagePullPolicy: Always
  ##    command: ['sh', '-c', 'echo "hello world"']
  ##
  initContainers: []
  ## @param bucketweb.sidecars Thanos Bucket Web 파드에 사이드카로 실행할 추가 컨테이너
  ## 예제:
  ## sidecars:
  ##   - name: your-image-name
  ##     image: your-image
  ##     imagePullPolicy: Always
  ##     ports:
  ##       - name: portname
  ##         containerPort: 1234
  ##
  sidecars: []
  ## @param bucketweb.extraVolumes Bucket Web에 추가할 추가 볼륨
  ##
  extraVolumes: []
  ## @param bucketweb.extraVolumeMounts bucketweb 컨테이너에 추가할 볼륨 마운트
  ##
  extraVolumeMounts: []
  ## @param bucketweb.podAffinityPreset Thanos Bucket Web 파드 어피니티 프리셋
  ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
  ##
  podAffinityPreset: ""
  ## @param bucketweb.podAntiAffinityPreset Thanos Bucket Web 파드 안티-어피니티 프리셋. `bucketweb.affinity`가 설정되면 무시됨. 허용 값: `soft` 또는 `hard`
  ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
  ##
  podAntiAffinityPreset: soft
  ## Thanos Bucket Web 노드 어피니티 프리셋
  ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#node-affinity
  ##
  nodeAffinityPreset:
    ## @param bucketweb.nodeAffinityPreset.type Thanos Bucket Web 노드 어피니티 프리셋 타입. `bucketweb.affinity`가 설정되면 무시됨. 허용 값: `soft` 또는 `hard`
    ##
    type: ""
    ## @param bucketweb.nodeAffinityPreset.key 매칭할 Thanos Bucket Web 노드 레이블 키. `bucketweb.affinity`가 설정되면 무시됨
    ## 예제:
    ## key: "kubernetes.io/e2e-az-name"
    ##
    key: ""
    ## @param bucketweb.nodeAffinityPreset.values 매칭할 Thanos Bucket Web 노드 레이블 값. `bucketweb.affinity`가 설정되면 무시됨
    ## 예제:
    ## values:
    ##   - e2e-az1
    ##   - e2e-az2
    ##
    values: []
  ## @param bucketweb.affinity Thanos Bucket Web 파드 할당을 위한 어피니티 설정
  ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
  ## 참고: 이 값이 설정되면 bucketweb.podAffinityPreset, bucketweb.podAntiAffinityPreset, bucketweb.nodeAffinityPreset은 무시됨
  ##
  affinity: {}
  ## @param bucketweb.nodeSelector Thanos Bucket Web 파드 할당을 위한 노드 레이블
  ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/
  ##
  nodeSelector: {}
  ## @param bucketweb.tolerations Thanos Bucket Web 파드 할당을 위한 톨러레이션
  ## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
  ##
  tolerations: []
  ## @param bucketweb.podLabels Thanos Bucket Web 파드 레이블
  ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
  ##
  podLabels: {}
  ## @param bucketweb.podAnnotations Thanos Bucket Web 파드 어노테이션
  ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
  ##
  podAnnotations: {}
  ## @param bucketweb.dnsConfig Deployment 파드의 DNS 설정
  ## ref: https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/
  ## 예제:
  ## dnsConfig:
  ##   options:
  ##   - name: ndots
  ##     value: "4"
  ##   - name: single-request-reopen
  ##
  dnsConfig: {}
  ## @param bucketweb.dnsPolicy Deployment 파드의 DNS 정책
  ## ref: https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/
  ## 예제:
  ## dnsPolicy: ClusterFirstWithHostNet
  ##
  dnsPolicy: ""
  ## @param bucketweb.hostAliases Deployment 파드의 호스트 별칭
  ## https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/
  ##
  hostAliases: []
  ## @param bucketweb.lifecycleHooks 시작 전후 구성 자동화를 위한 Thanos Bucket Web 컨테이너의 라이프사이클 훅
  ##
  lifecycleHooks: {}
  ## @param bucketweb.priorityClassName Thanos Bucket Web의 우선순위 클래스 이름
  ## ref: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/
  ##
  priorityClassName: ""
  ## @param bucketweb.schedulerName Thanos Bucket Web 파드에 사용할 쿠버네티스 스케줄러 이름 (기본값이 아닌 경우)
  ## ref: https://kubernetes.io/docs/tasks/administer-cluster/configure-multiple-schedulers/
  ##
  schedulerName: ""
  ## @param bucketweb.topologySpreadConstraints 장애 도메인 간 클러스터 전체에 Thanos Bucket Web 파드 할당을 분산하기 위한 토폴로지 분산 제약 조건
  ## Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/#spread-constraints-for-pods
  ##
  topologySpreadConstraints: []
  ## 네트워크 정책
  ## Ref: https://kubernetes.io/docs/concepts/services-networking/network-policies/
  ##
  networkPolicy:
    ## @param bucketweb.networkPolicy.enabled NetworkPolicy 생성 여부
    ##
    enabled: true
    ## @param bucketweb.networkPolicy.allowExternal 연결 시 클라이언트 레이블 불필요
    ## 적용할 정책 모델. false로 설정 시 올바른 클라이언트 레이블이 있는 파드만
    ## 애플리케이션이 수신 대기 중인 포트에 네트워크 액세스 가능.
    ## true인 경우 앱은 모든 소스로부터의 연결 허용
    ## (올바른 대상 포트로).
    ##
    allowExternal: true
    ## @param bucketweb.networkPolicy.allowExternalEgress 파드가 모든 포트 범위 및 모든 대상에 액세스 허용
    ##
    allowExternalEgress: true
    ## @param bucketweb.networkPolicy.extraIngress [array] NetworkPolicy에 추가할 추가 인그레스 규칙
    ## 예제:
    ## extraIngress:
    ##   - ports:
    ##       - port: 1234
    ##     from:
    ##       - podSelector:
    ##           - matchLabels:
    ##               - role: frontend
    ##       - podSelector:
    ##           - matchExpressions:
    ##               - key: role
    ##                 operator: In
    ##                 values:
    ##                   - frontend
    extraIngress: []
    ## @param bucketweb.networkPolicy.extraEgress [array] NetworkPolicy에 추가할 추가 이그레스 규칙
    ## 예제:
    ## extraEgress:
    ##   - ports:
    ##       - port: 1234
    ##     to:
    ##       - podSelector:
    ##           - matchLabels:
    ##               - role: frontend
    ##       - podSelector:
    ##           - matchExpressions:
    ##               - key: role
    ##                 operator: In
    ##                 values:
    ##                   - frontend
    ##
    extraEgress: []
    ## @param bucketweb.networkPolicy.ingressNSMatchLabels [object] 다른 네임스페이스로부터의 트래픽을 허용하기 위해 매칭할 레이블
    ## @param bucketweb.networkPolicy.ingressNSPodMatchLabels [object] 다른 네임스페이스로부터의 트래픽을 허용하기 위해 매칭할 파드 레이블
    ##
    ingressNSMatchLabels: {}
    ingressNSPodMatchLabels: {}
  ## 서비스 파라미터
  ##
  service:
    ## @param bucketweb.service.type Kubernetes 서비스 타입
    ##
    type: ClusterIP
    ## @param bucketweb.service.ports.http Thanos Bucket Web 서비스 HTTP 포트
    ##
    ports:
      http: 8080
    ## @param bucketweb.service.nodePorts.http LoadBalancer 및 NodePort 서비스 타입에 대한 Thanos Bucket Web HTTP nodePort 값 지정
    ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
    ##
    nodePorts:
      http: ""
    ## @param bucketweb.service.clusterIP Thanos Bucket Web 서비스 clusterIP
    ## 예제:
    ## clusterIP: None
    ##
    clusterIP: ""
    ## @param bucketweb.service.loadBalancerIP 서비스 타입이 `LoadBalancer`인 경우 로드 밸런서 IP
    ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#internal-load-balancer
    ##
    loadBalancerIP: ""
    ## @param bucketweb.service.loadBalancerSourceRanges 서비스가 LoadBalancer일 때 허용되는 주소
    ## https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/#restrict-access-for-loadbalancer-service
    ##
    ## loadBalancerSourceRanges:
    ## - 10.10.10.0/24
    ##
    loadBalancerSourceRanges: []
    ## @param bucketweb.service.externalTrafficPolicy Thanos Bucket Web 서비스의 외부 트래픽 정책
    ##
    externalTrafficPolicy: Cluster
    ## @param bucketweb.service.labels Thanos Bucket Web 서비스에 추가할 레이블
    ##
    labels: {}
    ## @param bucketweb.service.annotations Thanos Bucket Web 서비스 어노테이션
    ##
    annotations: {}
    ## @param bucketweb.service.extraPorts Thanos Bucket Web 서비스에서 노출할 추가 포트
    ##
    extraPorts: []
    ## @param bucketweb.service.labelSelectorsOverride Thanos Query 서비스의 셀렉터
    ##
    labelSelectorsOverride: {}
    ## @param bucketweb.service.ipFamilyPolicy 듀얼 스택 구성을 위한 서비스의 IP 패밀리 정책 설정; [듀얼 스택 구성](https://kubernetes.io/docs/concepts/services-networking/dual-stack/#services) 참조
    ##
    ipFamilyPolicy: ""
    ## @param bucketweb.service.ipFamilies 서비스가 지원해야 하는 IP 패밀리 목록 (적용 순서대로). "IPv4" 및/또는 "IPv6" 가능
    ##
    ipFamilies: []
  ## @param bucketweb.automountServiceAccountToken Deployment에만 서비스 어카운트 토큰 자동 마운트 활성화/비활성화
  ##
  automountServiceAccountToken: true
  ## ServiceAccount 설정
  ## @param bucketweb.serviceAccount.create ServiceAccount 생성 여부
  ## @param bucketweb.serviceAccount.name 사용할 서비스 어카운트 이름. 설정되지 않고 create가 true인 경우 fullname 템플릿을 사용하여 이름 생성
  ## @param bucketweb.serviceAccount.annotations Thanos Bucket Web Service Account 어노테이션
  ## @param bucketweb.serviceAccount.automountServiceAccountToken 서비스 어카운트 토큰 자동 마운트 활성화/비활성화
  ##
  serviceAccount:
    create: true
    name: ""
    annotations: {}
    automountServiceAccountToken: false
  ## Thanos Bucket Web Autoscaling 설정
  ## ref: https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/
  ## @param bucketweb.autoscaling.enabled Thanos Bucket Web 오토스케일링 활성화
  ## @param bucketweb.autoscaling.minReplicas Thanos Bucket Web 최소 레플리카 수
  ## @param bucketweb.autoscaling.maxReplicas Thanos Bucket Web 최대 레플리카 수
  ## @param bucketweb.autoscaling.targetCPU 목표 CPU 사용률 백분율
  ## @param bucketweb.autoscaling.targetMemory 목표 메모리 사용률 백분율
  ## @param bucketweb.autoscaling.behavior HPA 동작 방식
  ## @param bucketweb.externalAutoscaler Thanos Bucket Web 디플로이먼트가 외부 오토스케일러에 의해 확장되는지 여부
  ##
  autoscaling:
    enabled: false
    minReplicas: ""
    maxReplicas: ""
    targetCPU: ""
    targetMemory: ""
    behavior: {}
  externalAutoscaler: false
  ## Thanos Bucket Web Pod Disruption Budget 설정
  ## ref: https://kubernetes.io/docs/tasks/run-application/configure-pdb
  ## @param bucketweb.pdb.create Thanos Bucket Web의 Pod Disruption Budget 생성 활성화/비활성화
  ## @param bucketweb.pdb.minAvailable 스케줄링된 상태로 유지되어야 하는 최소 파드 수/백분율
  ## @param bucketweb.pdb.maxUnavailable 사용 불가능하게 만들 수 있는 최대 파드 수/백분율
  ##
  pdb:
    create: true
    minAvailable: ""
    maxUnavailable: ""
  ## Thanos Bucketweb 접속을 위한 Ingress 리소스 구성
  ## ref: https://kubernetes.io/docs/concepts/services-networking/ingress/
  ##
  ingress:
    ## @param bucketweb.ingress.enabled Ingress 컨트롤러 리소스 활성화
    ##
    enabled: false
    ## @param bucketweb.ingress.hostname Ingress 리소스의 기본 호스트
    ##
    hostname: thanos-bucketweb.local
    ## @param bucketweb.ingress.ingressClassName Ingress 구현에 사용될 IngressClass (Kubernetes 1.18+)
    ## Kubernetes 1.18+에서 지원되며, 클러스터에 기본값으로 표시된 IngressClass가 둘 이상인 경우 필수
    ## ref: https://kubernetes.io/blog/2020/04/02/improvements-to-the-ingress-api-in-kubernetes-1.18/
    ##
    ingressClassName: ""
    ## @param bucketweb.ingress.labels Ingress 리소스에 추가할 레이블
    ## 필요에 따라 필수 레이블을 설정하기 위해 이 파라미터 사용
    ## 예제:
    ## labels:
    ##   dns-managed-by-external-dns: 'true'
    ##
    labels: {}
    ## @param bucketweb.ingress.annotations Ingress 리소스에 추가할 어노테이션. 인증서 자동 생성을 활성화하려면 여기에 cert-manager 어노테이션 추가
    ## 가능한 Ingress 어노테이션의 전체 목록은 다음 참조
    ## ref: https://github.com/kubernetes/ingress-nginx/blob/main/docs/user-guide/nginx-configuration/annotations.md
    ## cert-manager에 필요한 어노테이션을 설정하려면 이 파라미터 사용, 다음 참조
    ## ref: https://cert-manager.io/docs/usage/ingress/#supported-annotations
    ##
    ## 예제:
    ## annotations:
    ##   kubernetes.io/ingress.class: nginx
    ##   cert-manager.io/cluster-issuer: cluster-issuer-name
    ##
    annotations: {}
    ## @param bucketweb.ingress.extraHosts 이 Ingress 레코드로 커버할 추가 호스트 이름 목록
    ## 대부분의 경우 위의 호스트 이름으로 충분하지만, 추가 호스트가 필요한 경우 배열로 지정
    ## extraHosts:
    ## - name: thanos-bucketweb.local
    ##   path: /
    ##   pathType: ImplementationSpecific
    ##
    extraHosts: []
    ## @param bucketweb.ingress.extraTls 이 Ingress 레코드로 커버할 추가 호스트 이름에 대한 TLS 구성
    ## 참조: https://kubernetes.io/docs/concepts/services-networking/ingress/#tls
    ## extraTls:
    ## - hosts:
    ##     - thanos-bucketweb.local
    ##   secretName: thanos-bucketweb.local-tls
    ##
    extraTls: []
    ## @param bucketweb.ingress.secrets 자체 인증서를 제공하는 경우 인증서를 시크릿으로 추가하기 위해 사용
    ## key와 certificate는 -----BEGIN CERTIFICATE----- 또는
    ## -----BEGIN RSA PRIVATE KEY-----로 시작해야 함
    ##
    ## name은 위에서 설정한 tlsSecret과 일치해야 함
    ## cert-manager를 사용하는 경우 설정되지 않으면 자동으로 시크릿 생성하므로 불필요
    ##
    ## 이 Helm 차트 외부에서 인증서를 생성하고 관리하는 것도 가능
    ## 자세한 내용은 README.md 참조
    ## 예제:
    ## - name: thanos-bucketweb.local-tls
    ##   key:
    ##   certificate:
    ##
    secrets: []
    ## @param bucketweb.ingress.extraRules 이 Ingress 레코드로 커버할 추가 규칙
    ## ref: https://kubernetes.io/docs/concepts/services-networking/ingress/#ingress-rules
    ## 예제:
    ## extraRules:
    ## - host: example.local
    ##     http:
    ##       path: /
    ##       backend:
    ##         service:
    ##           name: example-svc
    ##           port:
    ##             name: http
    ##
    extraRules: []
    ## @param bucketweb.ingress.tls `bucketweb.ingress.hostname` 파라미터에 정의된 호스트 이름에 대한 TLS 구성 활성화
    ## TLS 인증서는 다음 이름의 TLS 시크릿에서 가져옴: `{{- printf "%s-tls" .Values.bucketweb.ingress.hostname }}`
    ## 다음 중 하나를 선택:
    ##   - `bucketweb.ingress.secrets` 파라미터를 사용하여 이 TLS 시크릿 생성
    ##   - 해당 어노테이션을 설정하여 cert-manager가 생성하도록 설정
    ##   - `bucketweb.ingress.selfSigned=true`로 설정하여 Helm이 자체 서명 인증서를 생성하도록 설정
    ##
    tls: false
    ## @param bucketweb.ingress.selfSigned Helm에서 생성한 자체 서명 인증서를 사용하여 이 Ingress 레코드에 대한 TLS 시크릿 생성
    ##
    selfSigned: false
    ## @param bucketweb.ingress.apiVersion Ingress API 버전 강제 지정 (설정하지 않으면 자동 감지)
    ##
    apiVersion: ""
    ## @param bucketweb.ingress.path Ingress 경로
    ##
    path: /
    ## @param bucketweb.ingress.pathType Ingress 경로 타입
    ##
    pathType: ImplementationSpecific
## ============================================================
## @section Thanos Compactor parameters (Thanos Compactor 파라미터)
## ============================================================
## 💡 Thanos Compactor는 S3에 저장된 메트릭 블록을 압축하고 다운샘플링하는 컴포넌트입니다.
##
## 주요 기능:
##   1. 작은 블록들을 큰 블록으로 병합 (압축)
##   2. 다운샘플링 (5분, 1시간 해상도 생성)
##   3. 보존 정책에 따라 오래된 데이터 삭제
##   4. 블록 메타데이터 정리
##
## 💡 S3 스토리지 비용 절감 및 쿼리 성능 향상
##
compactor:
  ## @param compactor.enabled Thanos Compactor 컴포넌트 활성화/비활성화
  ## 💡 중앙 클러스터에서 활성화 (클러스터당 하나만 실행)
  ##
  enabled: false

  ## @param compactor.logLevel Thanos Compactor 로그 레벨
  ##
  logLevel: info

  ## @param compactor.logFormat Thanos Compactor 로그 형식
  ##
  logFormat: logfmt

  ## @param compactor.dataDir Thanos Compactor 데이터 디렉토리
  ## 💡 임시 작업 공간 (압축 작업 중 사용)
  ##
  dataDir: /data

  ## ============================================================
  ## Resolution 및 Retention 설정
  ## ============================================================
  ## 💡 Retention: 각 해상도별 데이터 보존 기간
  ##
  ## @param compactor.retentionResolutionRaw Raw 데이터 보존 기간 (원본 해상도)
  ## @param compactor.retentionResolution5m 5분 다운샘플링 데이터 보존 기간
  ## @param compactor.retentionResolution1h 1시간 다운샘플링 데이터 보존 기간
  ##
  ## 💡 권장 설정:
  ##   - Raw: 30d (최근 30일은 원본 데이터)
  ##   - 5m: 180d (6개월은 5분 단위)
  ##   - 1h: 10y (10년간 1시간 단위 보관)
  ##
  retentionResolutionRaw: 30d
  retentionResolution5m: 30d
  retentionResolution1h: 10y

  ## @param compactor.concurrency 그룹 압축 시 사용할 고루틴 수
  ## 💡 CPU 코어 수에 따라 조정 (기본: 1, 대규모: 4~8)
  ##
  concurrency: 1

  ## @param compactor.consistencyDelay 새 블록(비압축)이 처리되기 전 최소 대기 시간
  ## 💡 Receiver가 S3에 블록 업로드를 완료할 시간 확보
  ## 권장: 30m ~ 1h
  ##
  consistencyDelay: 30m
  ## @param compactor.extraEnvVars Extra environment variables for Thanos Compactor container
  ## e.g:
  ## extraEnvVars:
  ##   - name: FOO
  ##     value: "bar"
  ##
  extraEnvVars: []
  ## @param compactor.extraEnvVarsCM Name of existing ConfigMap containing extra env vars for Thanos Compactor nodes
  ##
  extraEnvVarsCM: ""
  ## @param compactor.extraEnvVarsSecret Name of existing Secret containing extra env vars for Thanos Compactor nodes
  ##
  extraEnvVarsSecret: ""
  ## @param compactor.extraFlags Extra Flags to passed to Thanos Compactor
  ##
  extraFlags: []
  ## @param compactor.command Override default container command (useful when using custom images)
  ##
  command: []
  ## @param compactor.args Override default container args (useful when using custom images)
  ##
  args: []
  ## @param compactor.revisionHistoryLimit The number of old history to retain to allow rollback
  ##
  revisionHistoryLimit: 10
  ## K8s CronJob configuration
  ## ref: https://kubernetes.io/docs/tasks/job/automated-tasks-with-cron-jobs/
  ## @param compactor.cronJob.enabled Run compactor as a CronJob rather than a Deployment
  ## @param compactor.cronJob.schedule The schedule in Cron format, see <https://en.wikipedia.org/wiki/Cron>
  ## @param compactor.cronJob.timeZone The time zone name for the given schedule, see <https://en.wikipedia.org/wiki/List_of_tz_database_time_zones>
  ## @param compactor.cronJob.concurrencyPolicy Specifies how to treat concurrent executions of a Job
  ## @param compactor.cronJob.startingDeadlineSeconds Optional deadline in seconds for starting the job if it misses scheduled time for any reason
  ## @param compactor.cronJob.suspend This flag tells the controller to suspend subsequent executions
  ## @param compactor.cronJob.successfulJobsHistoryLimit The number of successful finished jobs to retain
  ## @param compactor.cronJob.failedJobsHistoryLimit The number of failed finished jobs to retain
  ## @param compactor.cronJob.backoffLimit The number of retries before marking this job failed
  ## @param compactor.cronJob.ttlSecondsAfterFinished The maximum retention before removing the job
  ##
  cronJob:
    enabled: false
    schedule: "0 */6 * * *"
    timeZone: ""
    startingDeadlineSeconds: ""
    concurrencyPolicy: Forbid
    suspend: ""
    successfulJobsHistoryLimit: ""
    failedJobsHistoryLimit: ""
    backoffLimit: ""
    ttlSecondsAfterFinished: ""
  ## @param compactor.restartPolicy Compactor container restart policy.
  ## ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy
  ##
  restartPolicy: ""
  ## @param compactor.updateStrategy.type Update strategy type for Thanos Compactor replicas
  ##
  updateStrategy:
    type: Recreate
  ## @param compactor.containerPorts.http HTTP container port
  ##
  containerPorts:
    http: 10902
  ## K8s Pod Security Context for Thanos Compactor pods
  ## https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
  ## @param compactor.podSecurityContext.enabled Enable security context for the Thanos Compactor pods
  ## @param compactor.podSecurityContext.fsGroupChangePolicy Set filesystem group change policy
  ## @param compactor.podSecurityContext.sysctls Set kernel settings using the sysctl interface
  ## @param compactor.podSecurityContext.supplementalGroups Set filesystem extra groups
  ## @param compactor.podSecurityContext.fsGroup Group ID for the filesystem used by Thanos Compactor pods
  ##
  podSecurityContext:
    enabled: true
    fsGroupChangePolicy: Always
    sysctls: []
    supplementalGroups: []
    fsGroup: 1001
  ## K8s containers' Security Context for Thanos Compactor containers
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
  ## @param compactor.containerSecurityContext.enabled Enabled containers' Security Context
  ## @param compactor.containerSecurityContext.seLinuxOptions [object,nullable] Set SELinux options in container
  ## @param compactor.containerSecurityContext.runAsUser Set containers' Security Context runAsUser
  ## @param compactor.containerSecurityContext.runAsGroup Set containers' Security Context runAsGroup
  ## @param compactor.containerSecurityContext.runAsNonRoot Set container's Security Context runAsNonRoot
  ## @param compactor.containerSecurityContext.privileged Set container's Security Context privileged
  ## @param compactor.containerSecurityContext.readOnlyRootFilesystem Set container's Security Context readOnlyRootFilesystem
  ## @param compactor.containerSecurityContext.allowPrivilegeEscalation Set container's Security Context allowPrivilegeEscalation
  ## @param compactor.containerSecurityContext.capabilities.drop List of capabilities to be dropped
  ## @param compactor.containerSecurityContext.seccompProfile.type Set container's Security Context seccomp profile
  ##
  containerSecurityContext:
    enabled: true
    seLinuxOptions: {}
    runAsUser: 1001
    runAsGroup: 1001
    runAsNonRoot: true
    privileged: false
    readOnlyRootFilesystem: true
    allowPrivilegeEscalation: false
    capabilities:
      drop: ["ALL"]
    seccompProfile:
      type: "RuntimeDefault"
  ## Thanos Compactor containers' resource requests and limits
  ## ref: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
  ## @param compactor.resourcesPreset Set container resources according to one common preset (allowed values: none, nano, micro, small, medium, large, xlarge, 2xlarge). This is ignored if compactor.resources is set (compactor.resources is recommended for production).
  ## More information: https://github.com/bitnami/charts/blob/main/bitnami/common/templates/_resources.tpl#L15
  ##
  resourcesPreset: "nano"
  ## @param compactor.resources Set container requests and limits for different resources like CPU or memory (essential for production workloads)
  ## Example:
  ## resources:
  ##   requests:
  ##     cpu: 2
  ##     memory: 512Mi
  ##   limits:
  ##     cpu: 3
  ##     memory: 1024Mi
  ##
  resources: {}
  ## Configure extra options for Thanos Compactor containers' liveness and readiness probes
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
  ## @param compactor.livenessProbe.enabled Enable livenessProbe on Thanos Compactor containers
  ## @param compactor.livenessProbe.initialDelaySeconds Initial delay seconds for livenessProbe
  ## @param compactor.livenessProbe.periodSeconds Period seconds for livenessProbe
  ## @param compactor.livenessProbe.timeoutSeconds Timeout seconds for livenessProbe
  ## @param compactor.livenessProbe.failureThreshold Failure threshold for livenessProbe
  ## @param compactor.livenessProbe.successThreshold Success threshold for livenessProbe
  ##
  livenessProbe:
    enabled: true
    initialDelaySeconds: 30
    timeoutSeconds: 30
    periodSeconds: 10
    successThreshold: 1
    failureThreshold: 6
  ## @param compactor.readinessProbe.enabled Enable readinessProbe on Thanos Compactor containers
  ## @param compactor.readinessProbe.initialDelaySeconds Initial delay seconds for readinessProbe
  ## @param compactor.readinessProbe.periodSeconds Period seconds for readinessProbe
  ## @param compactor.readinessProbe.timeoutSeconds Timeout seconds for readinessProbe
  ## @param compactor.readinessProbe.failureThreshold Failure threshold for readinessProbe
  ## @param compactor.readinessProbe.successThreshold Success threshold for readinessProbe
  ##
  readinessProbe:
    enabled: true
    initialDelaySeconds: 30
    timeoutSeconds: 30
    periodSeconds: 10
    successThreshold: 1
    failureThreshold: 6
  ## @param compactor.startupProbe.enabled Enable startupProbe on Thanos Compactor containers
  ## @param compactor.startupProbe.initialDelaySeconds Initial delay seconds for startupProbe
  ## @param compactor.startupProbe.periodSeconds Period seconds for startupProbe
  ## @param compactor.startupProbe.timeoutSeconds Timeout seconds for startupProbe
  ## @param compactor.startupProbe.failureThreshold Failure threshold for startupProbe
  ## @param compactor.startupProbe.successThreshold Success threshold for startupProbe
  ##
  startupProbe:
    enabled: false
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 1
    failureThreshold: 15
    successThreshold: 1
  ## @param compactor.customLivenessProbe Custom livenessProbe that overrides the default one
  ##
  customLivenessProbe: {}
  ## @param compactor.customReadinessProbe Custom readinessProbe that overrides the default one
  ##
  customReadinessProbe: {}
  ## @param compactor.customStartupProbe Custom startupProbe that overrides the default one
  ##
  customStartupProbe: {}
  ## @param compactor.initContainers Add additional init containers to the Thanos Compactor pods
  ## ref: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
  ## e.g:
  ## initContainers:
  ##  - name: your-image-name
  ##    image: your-image
  ##    imagePullPolicy: Always
  ##    command: ['sh', '-c', 'echo "hello world"']
  ##
  initContainers: []
  ## @param compactor.sidecars Extra containers running as sidecars to Thanos Compactor pods
  ## e.g:
  ## sidecars:
  ##   - name: your-image-name
  ##     image: your-image
  ##     imagePullPolicy: Always
  ##     ports:
  ##       - name: portname
  ##         containerPort: 1234
  ##
  sidecars: []
  ## @param compactor.extraVolumes Extra volumes to add to Thanos Compactor
  ##
  extraVolumes: []
  ## @param compactor.extraVolumeMounts Extra volume mounts to add to the compactor container
  ##
  extraVolumeMounts: []
  ## @param compactor.podAffinityPreset Thanos Compactor pod affinity preset
  ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
  ##
  podAffinityPreset: ""
  ## @param compactor.podAntiAffinityPreset Thanos Compactor pod anti-affinity preset. Ignored if `compactor.affinity` is set. Allowed values: `soft` or `hard`
  ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
  ##
  podAntiAffinityPreset: soft
  ## Thanos Compactor node affinity preset
  ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#node-affinity
  ##
  nodeAffinityPreset:
    ## @param compactor.nodeAffinityPreset.type Thanos Compactor node affinity preset type. Ignored if `compactor.affinity` is set. Allowed values: `soft` or `hard`
    ##
    type: ""
    ## @param compactor.nodeAffinityPreset.key Thanos Compactor node label key to match. Ignored if `compactor.affinity` is set.
    ## e.g:
    ## key: "kubernetes.io/e2e-az-name"
    ##
    key: ""
    ## @param compactor.nodeAffinityPreset.values Thanos Compactor node label values to match. Ignored if `compactor.affinity` is set.
    ## e.g:
    ## values:
    ##   - e2e-az1
    ##   - e2e-az2
    ##
    values: []
  ## @param compactor.affinity Thanos Compactor affinity for pod assignment
  ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
  ## Note: compactor.podAffinityPreset, compactor.podAntiAffinityPreset, and compactor.nodeAffinityPreset will be ignored when it's set
  ##
  affinity: {}
  ## @param compactor.nodeSelector Thanos Compactor node labels for pod assignment
  ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/
  ##
  nodeSelector: {}
  ## @param compactor.tolerations Thanos Compactor tolerations for pod assignment
  ## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
  ##
  tolerations: []
  ## @param compactor.podLabels Thanos Compactor pod labels
  ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
  ##
  podLabels: {}
  ## @param compactor.podAnnotations Annotations for Thanos Compactor pods
  ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
  ##
  podAnnotations: {}
  ## @param compactor.dnsConfig Deployment pod DNS config
  ## ref: https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/
  ## E.g.
  ## dnsConfig:
  ##   options:
  ##   - name: ndots
  ##     value: "4"
  ##   - name: single-request-reopen
  ##
  dnsConfig: {}
  ## @param compactor.dnsPolicy Deployment pod DNS policy
  ## ref: https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/
  ## E.g.
  ## dnsPolicy: ClusterFirstWithHostNet
  ##
  dnsPolicy: ""
  ## @param compactor.hostAliases Deployment pod host aliases
  ## https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/
  ##
  hostAliases: []
  ## @param compactor.lifecycleHooks for the Thanos Compactor container(s) to automate configuration before or after startup
  ##
  lifecycleHooks: {}
  ## @param compactor.priorityClassName Thanos Compactor priorityClassName
  ## ref: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/
  ##
  priorityClassName: ""
  ## @param compactor.schedulerName Name of the k8s scheduler (other than default) for Thanos Compactor pods
  ## ref: https://kubernetes.io/docs/tasks/administer-cluster/configure-multiple-schedulers/
  ##
  schedulerName: ""
  ## @param compactor.topologySpreadConstraints Topology Spread Constraints for Thanos Compactor pods assignment spread across your cluster among failure-domains
  ## Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/#spread-constraints-for-pods
  ##
  topologySpreadConstraints: []
  ## Network Policies
  ## Ref: https://kubernetes.io/docs/concepts/services-networking/network-policies/
  ##
  networkPolicy:
    ## @param compactor.networkPolicy.enabled Specifies whether a NetworkPolicy should be created
    ##
    enabled: true
    ## @param compactor.networkPolicy.allowExternal Don't require client label for connections
    ## The Policy model to apply. When set to false, only pods with the correct
    ## client label will have network access to the ports the application is listening
    ## on. When true, the app will accept connections from any source
    ## (with the correct destination port).
    ##
    allowExternal: true
    ## @param compactor.networkPolicy.allowExternalEgress Allow the pod to access any range of port and all destinations.
    ##
    allowExternalEgress: true
    ## @param compactor.networkPolicy.extraIngress [array] Add extra ingress rules to the NetworkPolicy
    ## e.g:
    ## extraIngress:
    ##   - ports:
    ##       - port: 1234
    ##     from:
    ##       - podSelector:
    ##           - matchLabels:
    ##               - role: frontend
    ##       - podSelector:
    ##           - matchExpressions:
    ##               - key: role
    ##                 operator: In
    ##                 values:
    ##                   - frontend
    extraIngress: []
    ## @param compactor.networkPolicy.extraEgress [array] Add extra ingress rules to the NetworkPolicy
    ## e.g:
    ## extraEgress:
    ##   - ports:
    ##       - port: 1234
    ##     to:
    ##       - podSelector:
    ##           - matchLabels:
    ##               - role: frontend
    ##       - podSelector:
    ##           - matchExpressions:
    ##               - key: role
    ##                 operator: In
    ##                 values:
    ##                   - frontend
    ##
    extraEgress: []
    ## @param compactor.networkPolicy.ingressNSMatchLabels [object] Labels to match to allow traffic from other namespaces
    ## @param compactor.networkPolicy.ingressNSPodMatchLabels [object] Pod labels to match to allow traffic from other namespaces
    ##
    ingressNSMatchLabels: {}
    ingressNSPodMatchLabels: {}
  ## Service parameters
  ##
  service:
    ## @param compactor.service.type Kubernetes service type
    ##
    type: ClusterIP
    ## @param compactor.service.ports.http Thanos Compactor service HTTP port
    ##
    ports:
      http: 9090
    ## @param compactor.service.nodePorts.http Specify the Thanos Compactor HTTP nodePort value for the LoadBalancer and NodePort service types
    ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
    ##
    nodePorts:
      http: ""
    ## @param compactor.service.clusterIP Thanos Compactor service clusterIP IP
    ## e.g:
    ## clusterIP: None
    ##
    clusterIP: ""
    ## @param compactor.service.loadBalancerIP Load balancer IP if service type is `LoadBalancer`
    ## Set the LoadBalancer service type to internal only
    ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#internal-load-balancer
    ##
    loadBalancerIP: ""
    ## @param compactor.service.loadBalancerSourceRanges Addresses that are allowed when service is LoadBalancer
    ## https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/#restrict-access-for-loadbalancer-service
    ## e.g:
    ## loadBalancerSourceRanges:
    ## - 10.10.10.0/24
    ##
    loadBalancerSourceRanges: []
    ## @param compactor.service.externalTrafficPolicy Thanos Compactor service externalTrafficPolicy
    ## Denotes if this Service desires to route external traffic to node-local or cluster-wide endpoints
    ##
    externalTrafficPolicy: Cluster
    ## @param compactor.service.labels Labels for Thanos Compactor service
    ##
    labels: {}
    ## @param compactor.service.annotations Annotations for Thanos Compactor service
    ##
    annotations: {}
    ## @param compactor.service.extraPorts Extra ports to expose in the Thanos Compactor service
    ##
    extraPorts: []
    ## @param compactor.service.labelSelectorsOverride Selector for Thanos Query service
    ##
    labelSelectorsOverride: {}
    ## @param compactor.service.ipFamilyPolicy Sets the IP family policy for the Service to be able to configure dual-stack; see [Configure dual-stack](https://kubernetes.io/docs/concepts/services-networking/dual-stack/#services).
    ##
    ipFamilyPolicy: ""
    ## @param compactor.service.ipFamilies A list of IP families for the Service that should be supported, in the order in which they should be applied. Can be "IPv4" and/or "IPv6".
    ##
    ipFamilies: []
  ## @param compactor.automountServiceAccountToken Enable/disable auto mounting of the service account token only for the deployment
  ##
  automountServiceAccountToken: true
  ## ServiceAccount configuration
  ## @param compactor.serviceAccount.create Specifies whether a ServiceAccount should be created
  ## @param compactor.serviceAccount.name Name of the service account to use. If not set and create is true, a name is generated using the fullname template.
  ## @param compactor.serviceAccount.annotations Annotations for Thanos Compactor Service Account
  ## @param compactor.serviceAccount.automountServiceAccountToken Enable/disable auto mounting of the service account token
  ##
  serviceAccount:
    create: true
    name: ""
    annotations: {}
    automountServiceAccountToken: false
  ## Configure the ingress resource that allows you to access Thanos Query Frontend
  ## ref: https://kubernetes.io/docs/concepts/services-networking/ingress/
  ##
  ingress:
    ## @param compactor.ingress.enabled Enable ingress controller resource
    ##
    enabled: false
    ## @param compactor.ingress.hostname Default host for the ingress resource
    ##
    hostname: thanos-compactor.local
    ## @param compactor.ingress.ingressClassName IngressClass that will be be used to implement the Ingress (Kubernetes 1.18+)
    ## This is supported in Kubernetes 1.18+ and required if you have more than one IngressClass marked as the default for your cluster .
    ## ref: https://kubernetes.io/blog/2020/04/02/improvements-to-the-ingress-api-in-kubernetes-1.18/
    ##
    ingressClassName: ""
    ## @param compactor.ingress.labels Additional label for the Ingress resource.
    ## Use this parameter to set the required labels for your needs
    ## e.g:
    ## labels:
    ##   dns-managed-by-external-dns: 'true'
    ##
    labels: {}
    ## @param compactor.ingress.annotations Additional annotations for the Ingress resource. To enable certificate autogeneration, place here your cert-manager annotations.
    ## For a full list of possible ingress annotations, please see
    ## ref: https://github.com/kubernetes/ingress-nginx/blob/main/docs/user-guide/nginx-configuration/annotations.md
    ## Use this parameter to set the required annotations for cert-manager, see
    ## ref: https://cert-manager.io/docs/usage/ingress/#supported-annotations
    ##
    ## e.g:
    ## annotations:
    ##   kubernetes.io/ingress.class: nginx
    ##   cert-manager.io/cluster-issuer: cluster-issuer-name
    ##
    annotations: {}
    ## @param compactor.ingress.extraHosts The list of additional hostnames to be covered with this ingress record.
    ## Most likely the hostname above will be enough, but in the event more hosts are needed, this is an array
    ## extraHosts:
    ## - name: thanos.local
    ##   path: /
    ##   pathType: ImplementationSpecific
    ##
    extraHosts: []
    ## @param compactor.ingress.extraTls The tls configuration for additional hostnames to be covered with this ingress record.
    ## see: https://kubernetes.io/docs/concepts/services-networking/ingress/#tls
    ## extraTls:
    ## - hosts:
    ##     - thanos.local
    ##   secretName: thanos.local-tls
    ##
    extraTls: []
    ## @param compactor.ingress.secrets If you're providing your own certificates, please use this to add the certificates as secrets
    ## key and certificate should start with -----BEGIN CERTIFICATE----- or
    ## -----BEGIN RSA PRIVATE KEY-----
    ##
    ## name should line up with a tlsSecret set further up
    ## If you're using cert-manager, this is unneeded, as it will create the secret for you if it is not set
    ##
    ## It is also possible to create and manage the certificates outside of this helm chart
    ## Please see README.md for more information
    ## e.g:
    ## - name: thanos.local-tls
    ##   key:
    ##   certificate:
    ##
    secrets: []
    ## @param compactor.ingress.extraRules Additional rules to be covered with this ingress record
    ## ref: https://kubernetes.io/docs/concepts/services-networking/ingress/#ingress-rules
    ## e.g:
    ## extraRules:
    ## - host: example.local
    ##     http:
    ##       path: /
    ##       backend:
    ##         service:
    ##           name: example-svc
    ##           port:
    ##             name: http
    ##
    extraRules: []
    ## @param compactor.ingress.tls Enable TLS configuration for the hostname defined at `compactor.ingress.hostname` parameter
    ## TLS certificates will be retrieved from a TLS secret with name: `{{- printf "%s-tls" .Values.compactor.ingress.hostname }}`
    ## You can:
    ##   - Use the `compactor.ingress.secrets` parameter to create this TLS secret
    ##   - Rely on cert-manager to create it by setting the corresponding annotations
    ##   - Rely on Helm to create self-signed certificates by setting `compactor.ingress.selfSigned=true`
    ##
    tls: false
    ## @param compactor.ingress.selfSigned Create a TLS secret for this ingress record using self-signed certificates generated by Helm
    ##
    selfSigned: false
    ## @param compactor.ingress.apiVersion Force Ingress API version (automatically detected if not set)
    ##
    apiVersion: ""
    ## @param compactor.ingress.path Ingress path
    ##
    path: /
    ## @param compactor.ingress.pathType Ingress path type
    ##
    pathType: ImplementationSpecific
  ## Persistence parameters
  ##
  persistence:
    ## @param compactor.persistence.enabled Enable data persistence using PVC(s) on Thanos Compactor pods
    ##
    enabled: true
    ## @param compactor.persistence.ephemeral Use ephemeral volume for data persistence using PVC(s) on Thanos Compactor pods
    ##
    ephemeral: false
    ## @param compactor.persistence.defaultEmptyDir Defaults to emptyDir if persistence is disabled.
    ##
    defaultEmptyDir: true
    ## @param compactor.persistence.storageClass Specify the `storageClass` used to provision the volume
    ## If defined, storageClassName: <storageClass>
    ## If set to "-", storageClassName: "", which disables dynamic provisioning
    ## If undefined (the default) or set to null, no storageClassName spec is
    ## set, choosing the default provisioner.
    ##
    storageClass: ""
    ## @param compactor.persistence.accessModes PVC Access Modes for data volume
    ##
    accessModes:
      - ReadWriteOnce
    ## @param compactor.persistence.size PVC Storage Request for data volume
    ##
    size: 8Gi
    ## @param compactor.persistence.labels Labels for the PVC
    ##
    labels: {}
    ## @param compactor.persistence.annotations Annotations for the PVC
    ##
    annotations: {}
    ## @param compactor.persistence.existingClaim Name of an existing PVC to use
    ## If defined, PVC must be created manually before volume will be bound
    ##
    existingClaim: ""
## ============================================================
## @section Thanos Store Gateway parameters (Thanos Store Gateway 파라미터)
## ============================================================
## 💡 Thanos Store Gateway는 S3에 저장된 장기 메트릭 데이터를 조회하는 컴포넌트입니다.
##
## 주요 기능:
##   1. S3 버킷의 메트릭 블록을 인덱싱
##   2. Query에게 Store API 제공 (과거 데이터 조회)
##   3. 블록 메타데이터 캐싱 (빠른 조회)
##   4. 다운샘플링된 데이터 제공
##
## 아키텍처:
##   Query --Store API--> Store Gateway --Read--> S3 (Historical Data)
##
## 💡 장기 데이터 조회 시 필수 컴포넌트
##
storegateway:
  ## @param storegateway.enabled Thanos Store Gateway 컴포넌트 활성화/비활성화
  ## 💡 중앙 클러스터에서 활성화하여 S3의 장기 데이터 제공
  ##
  enabled: false

  ## @param storegateway.logLevel Thanos Store Gateway 로그 레벨
  ##
  logLevel: info

  ## @param storegateway.logFormat Thanos Store Gateway 로그 형식
  ##
  logFormat: logfmt

  ## @param storegateway.useEndpointGroup HA Store Gateway 레플리카의 Store API 쿼리 시 `endpoint-group` 사용 여부
  ## ⚠️ 주의: 이 설정은 Query 구성에 영향을 줍니다
  ## 💡 HA 구성 시 활성화하여 레플리카 간 부하 분산
  ##
  useEndpointGroup: false

  ## @param storegateway.config Thanos Store Gateway 설정
  ## config.yml 파일의 내용 지정
  ##
  ## 예시 (인덱스 캐시 설정):
  ## config: |
  ##   type: IN-MEMORY
  ##   config:
  ##     max_size: 1GB
  ##     max_item_size: 125MB
  ##
  config: ""

  ## @param storegateway.existingConfigmap Thanos Store Gateway 설정이 포함된 기존 ConfigMap 이름
  ## ⚠️ 주의: 설정 시 storegateway.config 값을 재정의합니다
  ##
  existingConfigmap: ""
  ## Thanos Store Gateway GRPC parameters
  ## ref: https://github.com/thanos-io/thanos/blob/master/docs/components/store.md#flags
  ##
  grpc:
    ## GRPC server side
    ##
    server:
      ## TLS configuration
      ## @param storegateway.grpc.server.tls.enabled Enable TLS encryption in the GRPC server
      ## @param storegateway.grpc.server.tls.autoGenerated Create self-signed TLS certificates. Currently only supports PEM certificates
      ## @param storegateway.grpc.server.tls.cert TLS Certificate for GRPC server - ignored if existingSecret is provided
      ## @param storegateway.grpc.server.tls.key TLS Key for GRPC server - ignored if existingSecret is provided
      ## @param storegateway.grpc.server.tls.ca TLS CA to verify clients against - ignored if existingSecret is provided
      ## @param storegateway.grpc.server.tls.clientAuthEnabled Enable TLS client verification against provided CA
      ## @param storegateway.grpc.server.tls.existingSecret Existing secret containing your own TLS certificates
      ## e.g:
      ## existingSecret:
      ##   name: foo
      ##   keyMapping:
      ##     ca-cert: ca.pem
      ##     tls-cert: cert.pem
      ##     tls-key: key.pem
      ##
      tls:
        enabled: false
        autoGenerated: false
        cert: ""
        key: ""
        ca: ""
        clientAuthEnabled: true
        existingSecret: {}
  ## @param storegateway.extraEnvVars Extra environment variables for Thanos Store Gateway container
  ## e.g:
  ## extraEnvVars:
  ##   - name: FOO
  ##     value: "bar"
  ##
  extraEnvVars: []
  ## @param storegateway.extraEnvVarsCM Name of existing ConfigMap containing extra env vars for Thanos Store Gateway nodes
  ##
  extraEnvVarsCM: ""
  ## @param storegateway.extraEnvVarsSecret Name of existing Secret containing extra env vars for Thanos Store Gateway nodes
  ##
  extraEnvVarsSecret: ""
  ## @param storegateway.extraFlags Extra Flags to passed to Thanos Store Gateway
  ##
  extraFlags: []
  ## @param storegateway.command Override default container command (useful when using custom images)
  ##
  command: []
  ## @param storegateway.args Override default container args (useful when using custom images)
  ##
  args: []
  ## @param storegateway.replicaCount Number of Thanos Store Gateway replicas to deploy
  ##
  replicaCount: 1
  ## @param storegateway.revisionHistoryLimit The number of old history to retain to allow rollback
  ##
  revisionHistoryLimit: 10
  ## @param storegateway.updateStrategy.type Update strategy type for Thanos Store Gateway replicas
  ##
  updateStrategy:
    type: RollingUpdate
  ## @param storegateway.podManagementPolicy Statefulset Pod management policy: OrderedReady (default) or Parallel
  ## ref: https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#pod-management-policies
  ##
  podManagementPolicy: OrderedReady
  ## @param storegateway.containerPorts.http HTTP container port
  ## @param storegateway.containerPorts.grpc GRPC container port
  ##
  containerPorts:
    http: 10902
    grpc: 10901
  ## K8s Pod Security Context for Thanos Store Gateway pods
  ## https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
  ## @param storegateway.podSecurityContext.enabled Enable security context for the Thanos Store Gateway pods
  ## @param storegateway.podSecurityContext.fsGroupChangePolicy Set filesystem group change policy
  ## @param storegateway.podSecurityContext.sysctls Set kernel settings using the sysctl interface
  ## @param storegateway.podSecurityContext.supplementalGroups Set filesystem extra groups
  ## @param storegateway.podSecurityContext.fsGroup Group ID for the filesystem used by Thanos Store Gateway pods
  ##
  podSecurityContext:
    enabled: true
    fsGroupChangePolicy: Always
    sysctls: []
    supplementalGroups: []
    fsGroup: 1001
  ## K8s containers' Security Context for Thanos Store Gateway containers
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
  ## @param storegateway.containerSecurityContext.enabled Enabled containers' Security Context
  ## @param storegateway.containerSecurityContext.seLinuxOptions [object,nullable] Set SELinux options in container
  ## @param storegateway.containerSecurityContext.runAsUser Set containers' Security Context runAsUser
  ## @param storegateway.containerSecurityContext.runAsGroup Set containers' Security Context runAsGroup
  ## @param storegateway.containerSecurityContext.runAsNonRoot Set container's Security Context runAsNonRoot
  ## @param storegateway.containerSecurityContext.privileged Set container's Security Context privileged
  ## @param storegateway.containerSecurityContext.readOnlyRootFilesystem Set container's Security Context readOnlyRootFilesystem
  ## @param storegateway.containerSecurityContext.allowPrivilegeEscalation Set container's Security Context allowPrivilegeEscalation
  ## @param storegateway.containerSecurityContext.capabilities.drop List of capabilities to be dropped
  ## @param storegateway.containerSecurityContext.seccompProfile.type Set container's Security Context seccomp profile
  ##
  containerSecurityContext:
    enabled: true
    seLinuxOptions: {}
    runAsUser: 1001
    runAsGroup: 1001
    runAsNonRoot: true
    privileged: false
    readOnlyRootFilesystem: true
    allowPrivilegeEscalation: false
    capabilities:
      drop: ["ALL"]
    seccompProfile:
      type: "RuntimeDefault"
  ## Thanos Store Gateway containers' resource requests and limits
  ## ref: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
  ## @param storegateway.resourcesPreset Set container resources according to one common preset (allowed values: none, nano, micro, small, medium, large, xlarge, 2xlarge). This is ignored if storegateway.resources is set (storegateway.resources is recommended for production).
  ## More information: https://github.com/bitnami/charts/blob/main/bitnami/common/templates/_resources.tpl#L15
  ##
  resourcesPreset: "nano"
  ## @param storegateway.resources Set container requests and limits for different resources like CPU or memory (essential for production workloads)
  ## Example:
  ## resources:
  ##   requests:
  ##     cpu: 2
  ##     memory: 512Mi
  ##   limits:
  ##     cpu: 3
  ##     memory: 1024Mi
  ##
  resources: {}
  ## Configure extra options for Thanos Store Gateway containers' liveness and readiness probes
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
  ## @param storegateway.livenessProbe.enabled Enable livenessProbe on Thanos Store Gateway containers
  ## @param storegateway.livenessProbe.initialDelaySeconds Initial delay seconds for livenessProbe
  ## @param storegateway.livenessProbe.periodSeconds Period seconds for livenessProbe
  ## @param storegateway.livenessProbe.timeoutSeconds Timeout seconds for livenessProbe
  ## @param storegateway.livenessProbe.failureThreshold Failure threshold for livenessProbe
  ## @param storegateway.livenessProbe.successThreshold Success threshold for livenessProbe
  ##
  livenessProbe:
    enabled: true
    initialDelaySeconds: 30
    timeoutSeconds: 30
    periodSeconds: 10
    successThreshold: 1
    failureThreshold: 6
  ## @param storegateway.readinessProbe.enabled Enable readinessProbe on Thanos Store Gateway containers
  ## @param storegateway.readinessProbe.initialDelaySeconds Initial delay seconds for readinessProbe
  ## @param storegateway.readinessProbe.periodSeconds Period seconds for readinessProbe
  ## @param storegateway.readinessProbe.timeoutSeconds Timeout seconds for readinessProbe
  ## @param storegateway.readinessProbe.failureThreshold Failure threshold for readinessProbe
  ## @param storegateway.readinessProbe.successThreshold Success threshold for readinessProbe
  ##
  readinessProbe:
    enabled: true
    initialDelaySeconds: 30
    timeoutSeconds: 30
    periodSeconds: 10
    successThreshold: 1
    failureThreshold: 6
  ## @param storegateway.startupProbe.enabled Enable startupProbe on Thanos Store Gateway containers
  ## @param storegateway.startupProbe.initialDelaySeconds Initial delay seconds for startupProbe
  ## @param storegateway.startupProbe.periodSeconds Period seconds for startupProbe
  ## @param storegateway.startupProbe.timeoutSeconds Timeout seconds for startupProbe
  ## @param storegateway.startupProbe.failureThreshold Failure threshold for startupProbe
  ## @param storegateway.startupProbe.successThreshold Success threshold for startupProbe
  ##
  startupProbe:
    enabled: false
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 1
    failureThreshold: 15
    successThreshold: 1
  ## @param storegateway.customLivenessProbe Custom livenessProbe that overrides the default one
  ##
  customLivenessProbe: {}
  ## @param storegateway.customReadinessProbe Custom readinessProbe that overrides the default one
  ##
  customReadinessProbe: {}
  ## @param storegateway.customStartupProbe Custom startupProbe that overrides the default one
  ##
  customStartupProbe: {}
  ## @param storegateway.initContainers Add additional init containers to the Thanos Store Gateway pods
  ## ref: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
  ## e.g:
  ## initContainers:
  ##  - name: your-image-name
  ##    image: your-image
  ##    imagePullPolicy: Always
  ##    command: ['sh', '-c', 'echo "hello world"']
  ##
  initContainers: []
  ## @param storegateway.sidecars Extra containers running as sidecars to Thanos Store Gateway pods
  ## e.g:
  ## sidecars:
  ##   - name: your-image-name
  ##     image: your-image
  ##     imagePullPolicy: Always
  ##     ports:
  ##       - name: portname
  ##         containerPort: 1234
  ##
  sidecars: []
  ## @param storegateway.extraVolumes Extra volumes to add to Thanos Store Gateway
  ##
  extraVolumes: []
  ## @param storegateway.extraVolumeMounts Extra volume mounts to add to the storegateway container
  ##
  extraVolumeMounts: []
  ## @param storegateway.podAffinityPreset Thanos Store Gateway pod affinity preset
  ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
  ##
  podAffinityPreset: ""
  ## @param storegateway.podAntiAffinityPreset Thanos Store Gateway pod anti-affinity preset. Ignored if `storegateway.affinity` is set. Allowed values: `soft` or `hard`
  ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
  ##
  podAntiAffinityPreset: soft
  ## Thanos Store Gateway node affinity preset
  ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#node-affinity
  ##
  nodeAffinityPreset:
    ## @param storegateway.nodeAffinityPreset.type Thanos Store Gateway node affinity preset type. Ignored if `storegateway.affinity` is set. Allowed values: `soft` or `hard`
    ##
    type: ""
    ## @param storegateway.nodeAffinityPreset.key Thanos Store Gateway node label key to match. Ignored if `storegateway.affinity` is set.
    ## e.g:
    ## key: "kubernetes.io/e2e-az-name"
    ##
    key: ""
    ## @param storegateway.nodeAffinityPreset.values Thanos Store Gateway node label values to match. Ignored if `storegateway.affinity` is set.
    ## e.g:
    ## values:
    ##   - e2e-az1
    ##   - e2e-az2
    ##
    values: []
  ## @param storegateway.affinity Thanos Store Gateway affinity for pod assignment
  ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
  ## Note: storegateway.podAffinityPreset, storegateway.podAntiAffinityPreset, and storegateway.nodeAffinityPreset will be ignored when it's set
  ##
  affinity: {}
  ## @param storegateway.nodeSelector Thanos Store Gateway node labels for pod assignment
  ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/
  ##
  nodeSelector: {}
  ## @param storegateway.tolerations Thanos Store Gateway tolerations for pod assignment
  ## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
  ##
  tolerations: []
  ## @param storegateway.podLabels Thanos Store Gateway pod labels
  ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
  ##
  podLabels: {}
  ## @param storegateway.podAnnotations Annotations for Thanos Store Gateway pods
  ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
  ##
  podAnnotations: {}
  ## @param storegateway.statefulsetLabels Thanos Store Gateway statefulset labels
  ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
  ##
  statefulsetLabels: {}
  ## @param storegateway.statefulsetAnnotations Thanos Store Gateway statefulset annotations
  ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
  ##
  statefulsetAnnotations: {}
  ## @param storegateway.dnsConfig Deployment pod DNS config
  ## ref: https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/
  ## E.g.
  ## dnsConfig:
  ##   options:
  ##   - name: ndots
  ##     value: "4"
  ##   - name: single-request-reopen
  ##
  dnsConfig: {}
  ## @param storegateway.dnsPolicy Deployment pod DNS policy
  ## ref: https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/
  ## E.g.
  ## dnsPolicy: ClusterFirstWithHostNet
  ##
  dnsPolicy: ""
  ## @param storegateway.hostAliases Deployment pod host aliases
  ## https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/
  ##
  hostAliases: []
  ## @param storegateway.lifecycleHooks for the Thanos Store Gateway container(s) to automate configuration before or after startup
  ##
  lifecycleHooks: {}
  ## @param storegateway.priorityClassName Thanos Store Gateway priorityClassName
  ## ref: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/
  ##
  priorityClassName: ""
  ## @param storegateway.topologySpreadConstraints Topology Spread Constraints for Thanos Store Gateway pods assignment spread across your cluster among failure-domains
  ## Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/#spread-constraints-for-pods
  ##
  topologySpreadConstraints: []
  ## @param storegateway.schedulerName Name of the k8s scheduler (other than default) for Thanos Store Gateway pods
  ## ref: https://kubernetes.io/docs/tasks/administer-cluster/configure-multiple-schedulers/
  ##
  schedulerName: ""
  ## Network Policies
  ## Ref: https://kubernetes.io/docs/concepts/services-networking/network-policies/
  ##
  networkPolicy:
    ## @param storegateway.networkPolicy.enabled Specifies whether a NetworkPolicy should be created
    ##
    enabled: true
    ## @param storegateway.networkPolicy.allowExternal Don't require client label for connections
    ## The Policy model to apply. When set to false, only pods with the correct
    ## client label will have network access to the ports the application is listening
    ## on. When true, the app will accept connections from any source
    ## (with the correct destination port).
    ##
    allowExternal: true
    ## @param storegateway.networkPolicy.allowExternalEgress Allow the pod to access any range of port and all destinations.
    ##
    allowExternalEgress: true
    ## @param storegateway.networkPolicy.extraIngress [array] Add extra ingress rules to the NetworkPolicy
    ## e.g:
    ## extraIngress:
    ##   - ports:
    ##       - port: 1234
    ##     from:
    ##       - podSelector:
    ##           - matchLabels:
    ##               - role: frontend
    ##       - podSelector:
    ##           - matchExpressions:
    ##               - key: role
    ##                 operator: In
    ##                 values:
    ##                   - frontend
    extraIngress: []
    ## @param storegateway.networkPolicy.extraEgress [array] Add extra ingress rules to the NetworkPolicy
    ## e.g:
    ## extraEgress:
    ##   - ports:
    ##       - port: 1234
    ##     to:
    ##       - podSelector:
    ##           - matchLabels:
    ##               - role: frontend
    ##       - podSelector:
    ##           - matchExpressions:
    ##               - key: role
    ##                 operator: In
    ##                 values:
    ##                   - frontend
    ##
    extraEgress: []
    ## @param storegateway.networkPolicy.ingressNSMatchLabels [object] Labels to match to allow traffic from other namespaces
    ## @param storegateway.networkPolicy.ingressNSPodMatchLabels [object] Pod labels to match to allow traffic from other namespaces
    ##
    ingressNSMatchLabels: {}
    ingressNSPodMatchLabels: {}
  ## Service parameters
  ##
  service:
    ## @param storegateway.service.type Kubernetes service type
    ##
    type: ClusterIP
    ## @param storegateway.service.ports.http Thanos Store Gateway service HTTP port
    ## @param storegateway.service.ports.grpc Thanos Store Gateway service GRPC port
    ##
    ports:
      http: 9090
      grpc: 10901
    ## @param storegateway.service.nodePorts.http Specify the Thanos Store Gateway HTTP nodePort value for the LoadBalancer and NodePort service types
    ## @param storegateway.service.nodePorts.grpc Specify the Thanos Store Gateway GRPC nodePort value for the LoadBalancer and NodePort service types
    ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
    ##
    nodePorts:
      http: ""
      grpc: ""
    ## @param storegateway.service.clusterIP Thanos Store Gateway service clusterIP IP
    ## e.g:
    ## clusterIP: None
    ##
    clusterIP: ""
    ## @param storegateway.service.loadBalancerIP Load balancer IP if service type is `LoadBalancer`
    ## Set the LoadBalancer service type to internal only
    ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#internal-load-balancer
    ##
    loadBalancerIP: ""
    ## @param storegateway.service.loadBalancerSourceRanges Addresses that are allowed when service is LoadBalancer
    ## https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/#restrict-access-for-loadbalancer-service
    ## e.g:
    ## loadBalancerSourceRanges:
    ## - 10.10.10.0/24
    ##
    loadBalancerSourceRanges: []
    ## @param storegateway.service.externalTrafficPolicy Thanos Store Gateway service externalTrafficPolicy
    ## Denotes if this Service desires to route external traffic to node-local or cluster-wide endpoints
    ##
    externalTrafficPolicy: Cluster
    ## @param storegateway.service.labels Extra labels for Thanos Store Gateway service
    ##
    labels: {}
    ## @param storegateway.service.annotations Annotations for Thanos Store Gateway service
    ##
    annotations: {}
    ## @param storegateway.service.extraPorts Extra ports to expose in the Thanos Store Gateway service
    ##
    extraPorts: []
    ## @param storegateway.service.labelSelectorsOverride Selector for Thanos Query service
    ##
    labelSelectorsOverride: {}
    ## @param storegateway.service.additionalHeadless Additional Headless service
    ##
    additionalHeadless: false
    ## Headless service properties
    ##
    headless:
      ## @param storegateway.service.headless.annotations Annotations for the headless service.
      ##
      annotations: {}
    ## @param storegateway.service.ipFamilyPolicy Sets the IP family policy for the Service to be able to configure dual-stack; see [Configure dual-stack](https://kubernetes.io/docs/concepts/services-networking/dual-stack/#services).
    ##
    ipFamilyPolicy: ""
    ## @param storegateway.service.ipFamilies A list of IP families for the Service that should be supported, in the order in which they should be applied. Can be "IPv4" and/or "IPv6".
    ##
    ipFamilies: []
  ## Persistence parameters
  ##
  persistence:
    ## @param storegateway.persistence.enabled Enable data persistence using PVC(s) on Thanos Store Gateway pods
    ##
    enabled: true
    ## @param storegateway.persistence.storageClass Specify the `storageClass` used to provision the volume
    ## If defined, storageClassName: <storageClass>
    ## If set to "-", storageClassName: "", which disables dynamic provisioning
    ## If undefined (the default) or set to null, no storageClassName spec is
    ## set, choosing the default provisioner.
    ##
    storageClass: ""
    ## @param storegateway.persistence.accessModes PVC Access Modes for data volume
    ##
    accessModes:
      - ReadWriteOnce
    ## @param storegateway.persistence.size PVC Storage Request for data volume
    ##
    size: 8Gi
    ## @param storegateway.persistence.labels Labels for the PVC
    ##
    labels: {}
    ## @param storegateway.persistence.annotations Annotations for the PVC
    ##
    annotations: {}
    ## @param storegateway.persistence.existingClaim Name of an existing PVC to use
    ## If defined, PVC must be created manually before volume will be bound
    ##
    existingClaim: ""
  ## Persistent Volume Claim Retention Policy
  ## ref: https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#persistentvolumeclaim-retention
  ##
  persistentVolumeClaimRetentionPolicy:
    ## @param storegateway.persistentVolumeClaimRetentionPolicy.enabled Enable Persistent volume retention policy for Thanos Store Gateway Statefulset
    ##
    enabled: false
    ## @param storegateway.persistentVolumeClaimRetentionPolicy.whenScaled Volume retention behavior when the replica count of the StatefulSet is reduced
    ##
    whenScaled: Retain
    ## @param storegateway.persistentVolumeClaimRetentionPolicy.whenDeleted Volume retention behavior that applies when the StatefulSet is deleted
    ##
    whenDeleted: Retain
  ## @param storegateway.automountServiceAccountToken Enable/disable auto mounting of the service account token only for the sts
  ##
  automountServiceAccountToken: true
  ## ServiceAccount configuration
  ## @param storegateway.serviceAccount.create Specifies whether a ServiceAccount should be created
  ## @param storegateway.serviceAccount.name Name of the service account to use. If not set and create is true, a name is generated using the fullname template.
  ## @param storegateway.serviceAccount.annotations Annotations for Thanos Store Gateway Service Account
  ## @param storegateway.serviceAccount.automountServiceAccountToken Enable/disable auto mounting of the service account token
  ##
  serviceAccount:
    create: true
    name: ""
    annotations: {}
    automountServiceAccountToken: false
  ## Thanos Store Gateway Autoscaling configuration
  ## ref: https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/
  ## @param storegateway.autoscaling.enabled Enable autoscaling for Thanos Store Gateway
  ## @param storegateway.autoscaling.minReplicas Minimum number of Thanos Store Gateway replicas
  ## @param storegateway.autoscaling.maxReplicas Maximum number of Thanos Store Gateway replicas
  ## @param storegateway.autoscaling.targetCPU Target CPU utilization percentage
  ## @param storegateway.autoscaling.targetMemory Target Memory utilization percentage
  ## @param storegateway.autoscaling.behavior HPA Behavior
  ## @param storegateway.externalAutoscaler Specifies whether the Thanos Store Gateway statefulset is scaled by an external autoscaler
  ##
  autoscaling:
    enabled: false
    minReplicas: ""
    maxReplicas: ""
    targetCPU: ""
    targetMemory: ""
    behavior: {}
  externalAutoscaler: false
  ## Thanos Store Gateway Pod Disruption Budget configuration
  ## ref: https://kubernetes.io/docs/tasks/run-application/configure-pdb
  ## @param storegateway.pdb.create Enable/disable a Pod Disruption Budget creation for Thanos Store Gateway
  ## @param storegateway.pdb.minAvailable Minimum number/percentage of pods that should remain scheduled
  ## @param storegateway.pdb.maxUnavailable Maximum number/percentage of pods that may be made unavailable
  ##
  pdb:
    create: true
    minAvailable: ""
    maxUnavailable: ""
  ## Configure the ingress resource that allows you to access Thanos Query Frontend
  ## ref: https://kubernetes.io/docs/concepts/services-networking/ingress/
  ##
  ingress:
    ## @param storegateway.ingress.enabled Enable ingress controller resource
    ##
    enabled: false
    ## @param storegateway.ingress.hostname Default host for the ingress resource
    ##
    hostname: thanos-storegateway.local
    ## @param storegateway.ingress.ingressClassName IngressClass that will be be used to implement the Ingress (Kubernetes 1.18+)
    ## This is supported in Kubernetes 1.18+ and required if you have more than one IngressClass marked as the default for your cluster .
    ## ref: https://kubernetes.io/blog/2020/04/02/improvements-to-the-ingress-api-in-kubernetes-1.18/
    ##
    ingressClassName: ""
    ## @param storegateway.ingress.labels Additional label for the Ingress resource.
    ## Use this parameter to set the required labels for your needs
    ## e.g:
    ## labels:
    ##   dns-managed-by-external-dns: 'true'
    ##
    labels: {}
    ## @param storegateway.ingress.annotations Additional annotations for the Ingress resource. To enable certificate autogeneration, place here your cert-manager annotations.
    ## For a full list of possible ingress annotations, please see
    ## ref: https://github.com/kubernetes/ingress-nginx/blob/main/docs/user-guide/nginx-configuration/annotations.md
    ## Use this parameter to set the required annotations for cert-manager, see
    ## ref: https://cert-manager.io/docs/usage/ingress/#supported-annotations
    ##
    ## e.g:
    ## annotations:
    ##   kubernetes.io/ingress.class: nginx
    ##   cert-manager.io/cluster-issuer: cluster-issuer-name
    ##
    annotations: {}
    ## @param storegateway.ingress.extraHosts The list of additional hostnames to be covered with this ingress record.
    ## Most likely the hostname above will be enough, but in the event more hosts are needed, this is an array
    ## extraHosts:
    ## - name: thanos.local
    ##   path: /
    ##   pathType: ImplementationSpecific
    ##
    extraHosts: []
    ## @param storegateway.ingress.extraTls The tls configuration for additional hostnames to be covered with this ingress record.
    ## see: https://kubernetes.io/docs/concepts/services-networking/ingress/#tls
    ## extraTls:
    ## - hosts:
    ##     - thanos.local
    ##   secretName: thanos.local-tls
    ##
    extraTls: []
    ## @param storegateway.ingress.secrets If you're providing your own certificates, please use this to add the certificates as secrets
    ## key and certificate should start with -----BEGIN CERTIFICATE----- or
    ## -----BEGIN RSA PRIVATE KEY-----
    ##
    ## name should line up with a tlsSecret set further up
    ## If you're using cert-manager, this is unneeded, as it will create the secret for you if it is not set
    ##
    ## It is also possible to create and manage the certificates outside of this helm chart
    ## Please see README.md for more information
    ## e.g:
    ## - name: thanos.local-tls
    ##   key:
    ##   certificate:
    ##
    secrets: []
    ## @param storegateway.ingress.extraRules Additional rules to be covered with this ingress record
    ## ref: https://kubernetes.io/docs/concepts/services-networking/ingress/#ingress-rules
    ## e.g:
    ## extraRules:
    ## - host: example.local
    ##     http:
    ##       path: /
    ##       backend:
    ##         service:
    ##           name: example-svc
    ##           port:
    ##             name: http
    ##
    extraRules: []
    ## @param storegateway.ingress.tls Enable TLS configuration for the hostname defined at `storegateway.ingress.hostname` parameter
    ## TLS certificates will be retrieved from a TLS secret with name: `{{- printf "%s-tls" .Values.storegateway.ingress.hostname }}`
    ## You can:
    ##   - Use the `storegateway.ingress.secrets` parameter to create this TLS secret
    ##   - Rely on cert-manager to create it by setting the corresponding annotations
    ##   - Rely on Helm to create self-signed certificates by setting `storegateway.ingress.selfSigned=true`
    ##
    tls: false
    ## @param storegateway.ingress.selfSigned Create a TLS secret for this ingress record using self-signed certificates generated by Helm
    ##
    selfSigned: false
    ## @param storegateway.ingress.apiVersion Force Ingress API version (automatically detected if not set)
    ##
    apiVersion: ""
    ## @param storegateway.ingress.path Ingress path
    ##
    path: /
    ## @param storegateway.ingress.pathType Ingress path type
    ##
    pathType: ImplementationSpecific
    ## Create an ingress object for the GRPC service. This requires an HTTP/2
    ## capable Ingress controller (eg. traefik using AWS NLB). Example annotations
    ## - ingress.kubernetes.io/protocol: h2c
    ## - service.beta.kubernetes.io/aws-load-balancer-type: nlb
    ## - service.beta.kubernetes.io/aws-load-balancer-backend-protocol: tcp
    ## For more information see https://kubernetes.io/docs/concepts/cluster-administration/cloud-providers/
    ## and also the documentation for your ingress controller.
    ##
    ## The options that are accepted are identical to the HTTP one listed above
    ##
    grpc:
      ## @param storegateway.ingress.grpc.enabled Enable ingress controller resource (GRPC)
      ##
      enabled: false
      ## @param storegateway.ingress.grpc.hostname Default host for the ingress resource (GRPC)
      ##
      hostname: thanos-grpc.local
      ## @param storegateway.ingress.grpc.ingressClassName IngressClass that will be be used to implement the Ingress (Kubernetes 1.18+)
      ## This is supported in Kubernetes 1.18+ and required if you have more than one IngressClass marked as the default for your cluster .
      ## ref: https://kubernetes.io/blog/2020/04/02/improvements-to-the-ingress-api-in-kubernetes-1.18/
      ##
      ingressClassName: ""
      ## @param storegateway.ingress.grpc.annotations Additional annotations for the Ingress resource (GRPC). To enable certificate autogeneration, place here your cert-manager annotations.
      ## For a full list of possible ingress annotations, please see
      ## ref: https://github.com/kubernetes/ingress-nginx/blob/main/docs/user-guide/nginx-configuration/annotations.md
      ## Use this parameter to set the required annotations for cert-manager, see
      ## ref: https://cert-manager.io/docs/usage/ingress/#supported-annotations
      ##
      ## Examples:
      ## kubernetes.io/ingress.class: nginx
      ## cert-manager.io/cluster-issuer: cluster-issuer-name
      ##
      annotations: {}
      ## @param storegateway.ingress.grpc.extraHosts The list of additional hostnames to be covered with this ingress record.
      ## Most likely the hostname above will be enough, but in the event more hosts are needed, this is an array
      ## extraHosts:
      ## - name: thanos-grpc.local
      ##   path: /
      ##
      extraHosts: []
      ## @param storegateway.ingress.grpc.extraTls The tls configuration for additional hostnames to be covered with this ingress record.
      ## see: https://kubernetes.io/docs/concepts/services-networking/ingress/#tls
      ## extraTls:
      ## - hosts:
      ##     - thanos-grpc.local
      ##   secretName: thanos-grpc.local-tls
      ##
      extraTls: []
      ## @param storegateway.ingress.grpc.secrets If you're providing your own certificates, please use this to add the certificates as secrets
      ## key and certificate should start with -----BEGIN CERTIFICATE----- or
      ## -----BEGIN RSA PRIVATE KEY-----
      ##
      ## name should line up with a tlsSecret set further up
      ## If you're using cert-manager, this is unneeded, as it will create the secret for you if it is not set
      ##
      ## It is also possible to create and manage the certificates outside of this helm chart
      ## Please see README.md for more information
      ## e.g:
      ## - name: thanos-grpc.local-tls
      ##   key:
      ##   certificate:
      ##
      secrets: []
      ## @param storegateway.ingress.grpc.extraRules Additional rules to be covered with this ingress record
      ## ref: https://kubernetes.io/docs/concepts/services-networking/ingress/#ingress-rules
      ## e.g:
      ## extraRules:
      ## - host: example.local
      ##     http:
      ##       path: /
      ##       backend:
      ##         service:
      ##           name: example-svc
      ##           port:
      ##             name: http
      ##
      extraRules: []
      ## @param storegateway.ingress.grpc.tls Enable TLS configuration for the hostname defined at `storegateway.ingress.grpc.hostname` parameter
      ## TLS certificates will be retrieved from a TLS secret with name: `{{- printf "%s-tls" .Values.storegateway.ingress.grpc.hostname }}`
      ## You can:
      ##   - Use the `storegateway.ingress.grpc.secrets` parameter to create this TLS secret
      ##   - Rely on cert-manager to create it by setting the corresponding annotations
      ##   - Rely on Helm to create self-signed certificates by setting `storegateway.ingress.grpc.selfSigned=true`
      ##
      tls: false
      ## @param storegateway.ingress.grpc.selfSigned Create a TLS secret for this ingress record using self-signed certificates generated by Helm
      ##
      selfSigned: false
      ## @param storegateway.ingress.grpc.apiVersion Override API Version (automatically detected if not set)
      ##
      apiVersion: ""
      ## @param storegateway.ingress.grpc.path Ingress Path
      ##
      path: /
      ## @param storegateway.ingress.grpc.pathType Ingress Path type
      ##
      pathType: ImplementationSpecific
  ## Sharded parameters
  ## @param storegateway.sharded.enabled Enable sharding for Thanos Store Gateway
  ## @param storegateway.sharded.hashPartitioning.shards Setting hashPartitioning will create multiple store statefulsets based on the number of shards specified using the hashmod of the blocks
  ## @param storegateway.sharded.hashPartitioning.extraRelabelingConfigs Setting extra relabel config
  ## e,g:
  ## extraRelabelingConfigs:
  ##   - action: keep
  ##     source_labels: ["region"]
  ##     regex: cn-zhangjiakou
  ## @param storegateway.sharded.timePartitioning [array] Setting time timePartitioning will create multiple store deployments based on the number of partitions
  ## @param storegateway.sharded.service.clusterIPs Array of cluster IPs for each Store Gateway service. Length must be the same as the number of shards
  ## e.g:
  ## clusterIPs:
  ##   - X.X.X.X
  ##   - Y.Y.Y.Y
  ## @param storegateway.sharded.service.loadBalancerIPs Array of load balancer IPs for each Store Gateway service. Length must be the same as the number of shards
  ## e.g:
  ## loadBalancerIPs:
  ##   - X.X.X.X
  ##   - Y.Y.Y.Y
  ## @param storegateway.sharded.service.http.nodePorts Array of http node ports used for Store Gateway service. Length must be the same as the number of shards
  ## e.g:
  ## nodePorts:
  ##   - 30001
  ##   - 30002
  ## @param storegateway.sharded.service.grpc.nodePorts Array of grpc node ports used for Store Gateway service. Length must be the same as the number of shards
  ## e.g:
  ## nodePorts:
  ##   - 30011
  ##   - 30012
  ##
  sharded:
    enabled: false
    hashPartitioning:
      shards: ""
      extraRelabelingConfigs: []
    timePartitioning:
      - min: ""
        max: ""
    service:
      clusterIPs: []
      loadBalancerIPs: []
      http:
        nodePorts: []
      grpc:
        nodePorts: []
## ============================================================
## @section Thanos Ruler parameters (Thanos Ruler 파라미터)
## ============================================================
## 💡 Thanos Ruler는 Recording Rule과 Alerting Rule을 평가하는 컴포넌트입니다.
##
## 주요 기능:
##   1. Recording Rule 평가 및 사전 집계된 메트릭 생성
##   2. Alerting Rule 평가 및 Alert 발생
##   3. Alertmanager에 Alert 전송
##   4. 평가 결과를 S3에 저장
##
## 아키텍처:
##   Ruler --Query--> Query/Store --> Evaluate Rules --> Alertmanager + S3
##
## 💡 중앙 집중식 알림 관리 및 사전 집계 메트릭 생성
##
ruler:
  ## @param ruler.enabled Thanos Ruler 컴포넌트 활성화/비활성화
  ## 💡 중앙 클러스터에서 활성화하여 통합 알림 관리
  ##
  enabled: false

  ## @param ruler.logLevel Thanos Ruler 로그 레벨
  ##
  logLevel: info

  ## @param ruler.logFormat Thanos Ruler 로그 형식
  ##
  logFormat: logfmt

  ## @param ruler.replicaLabel 데이터 중복 제거를 위한 레플리카 인디케이터 레이블
  ## 💡 HA 구성 시 동일한 Alert를 중복 발생시키지 않기 위해 사용
  ##
  replicaLabel: replica

  ## @param ruler.dnsDiscovery.enabled DNS Discovery를 사용한 Query API 동적 구성
  ## 💡 Query Pod를 자동으로 검색하여 연결
  ##
  dnsDiscovery:
    enabled: true

  ## @param ruler.queryURL Ruler UI에서 링크할 Thanos Query/Query-Frontend URL
  ## 예: http://thanos-query.monitoring.svc.cluster.local:9090
  ##
  queryURL: ""

  ## @param ruler.alertmanagers Alertmanager URL 배열
  ## ⚠️ 주의: ruler.alertmanagersConfig가 설정되지 않은 경우에만 사용
  ## 예: ["http://alertmanager:9093"]
  ##
  alertmanagers: []

  ## @param ruler.alertmanagersConfig Alertmanager 설정
  ## ⚠️ 주의: ruler.alertmanagers가 설정되지 않은 경우에만 사용
  ## ref: https://thanos.io/tip/components/rule.md/#alertmanager
  ##
  ## 예시 (Basic Auth):
  ## alertmanagersConfig:
  ##   alertmanagers:
  ##     - http_config:
  ##         basic_auth:
  ##           username: admin
  ##           password: secret
  ##       static_configs:
  ##         - alertmanager.monitoring.svc:9093
  ##       scheme: http
  ##       timeout: 10s
  ##       api_version: v2
  ##
  alertmanagersConfig: {}

  ## @param ruler.evalInterval 기본 Rule 평가 주기
  ## 💡 Recording/Alerting Rule을 얼마나 자주 평가할지 결정
  ## 권장: 1m (일반), 30s (빠른 응답 필요 시)
  ##
  evalInterval: 1m

  ## @param ruler.clusterName 'ruler_cluster' 레이블 설정에 사용
  ## 💡 멀티클러스터 환경에서 어느 Ruler가 Alert를 발생시켰는지 구분
  ##
  clusterName: ""

  ## @param ruler.ruleFile Thanos가 Rule 파일을 확인하는 위치
  ## 💡 ConfigMap으로 마운트된 Rule 파일 경로
  ##
  ruleFile: "/conf/rules/*.yml"

  ## @param ruler.config Ruler 설정
  ## ruler.yml 파일의 내용 지정
  ##
  config: ""

  ## @param ruler.dataPath 데이터 디렉토리 경로
  ## 💡 평가된 Rule 결과를 임시 저장하는 TSDB 경로
  ## 예: /data
  ##
  dataPath: ""

  ## @param ruler.existingConfigmap Ruler 설정이 포함된 기존 ConfigMap 이름
  ## ⚠️ 주의: 설정 시 ruler.config 값을 재정의합니다
  ##
  existingConfigmap: ""
  ## @param ruler.extraEnvVars Extra environment variables for Thanos Ruler container
  ## e.g:
  ## extraEnvVars:
  ##   - name: FOO
  ##     value: "bar"
  ##
  extraEnvVars: []
  ## @param ruler.extraEnvVarsCM Name of existing ConfigMap containing extra env vars for Thanos Ruler nodes
  ##
  extraEnvVarsCM: ""
  ## @param ruler.extraEnvVarsSecret Name of existing Secret containing extra env vars for Thanos Ruler nodes
  ##
  extraEnvVarsSecret: ""
  ## @param ruler.extraFlags Extra Flags to passed to Thanos Ruler
  ##
  extraFlags: []
  ## @param ruler.command Override default container command (useful when using custom images)
  ##
  command: []
  ## @param ruler.args Override default container args (useful when using custom images)
  ##
  args: []
  ## @param ruler.replicaCount Number of Thanos Ruler replicas to deploy
  ##
  replicaCount: 1
  ## @param ruler.revisionHistoryLimit The number of old history to retain to allow rollback
  ##
  revisionHistoryLimit: 10
  ## @param ruler.updateStrategy.type Update strategy type for Thanos Ruler replicas
  ##
  updateStrategy:
    type: RollingUpdate
  ## @param ruler.podManagementPolicy Statefulset Pod Management Policy Type
  ## ref: https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#pod-management-policies
  ##
  podManagementPolicy: OrderedReady
  ## @param ruler.containerPorts.http HTTP container port
  ## @param ruler.containerPorts.grpc GRPC container port
  ##
  containerPorts:
    http: 10902
    grpc: 10901
  ## K8s Pod Security Context for Thanos Ruler pods
  ## https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
  ## @param ruler.podSecurityContext.enabled Enable security context for the Thanos Ruler pods
  ## @param ruler.podSecurityContext.fsGroupChangePolicy Set filesystem group change policy
  ## @param ruler.podSecurityContext.sysctls Set kernel settings using the sysctl interface
  ## @param ruler.podSecurityContext.supplementalGroups Set filesystem extra groups
  ## @param ruler.podSecurityContext.fsGroup Group ID for the filesystem used by Thanos Ruler pods
  ##
  podSecurityContext:
    enabled: true
    fsGroupChangePolicy: Always
    sysctls: []
    supplementalGroups: []
    fsGroup: 1001
  ## K8s containers' Security Context for Thanos Ruler containers
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
  ## @param ruler.containerSecurityContext.enabled Enabled containers' Security Context
  ## @param ruler.containerSecurityContext.seLinuxOptions [object,nullable] Set SELinux options in container
  ## @param ruler.containerSecurityContext.runAsUser Set containers' Security Context runAsUser
  ## @param ruler.containerSecurityContext.runAsGroup Set containers' Security Context runAsGroup
  ## @param ruler.containerSecurityContext.runAsNonRoot Set container's Security Context runAsNonRoot
  ## @param ruler.containerSecurityContext.privileged Set container's Security Context privileged
  ## @param ruler.containerSecurityContext.readOnlyRootFilesystem Set container's Security Context readOnlyRootFilesystem
  ## @param ruler.containerSecurityContext.allowPrivilegeEscalation Set container's Security Context allowPrivilegeEscalation
  ## @param ruler.containerSecurityContext.capabilities.drop List of capabilities to be dropped
  ## @param ruler.containerSecurityContext.seccompProfile.type Set container's Security Context seccomp profile
  ##
  containerSecurityContext:
    enabled: true
    seLinuxOptions: {}
    runAsUser: 1001
    runAsGroup: 1001
    runAsNonRoot: true
    privileged: false
    readOnlyRootFilesystem: true
    allowPrivilegeEscalation: false
    capabilities:
      drop: ["ALL"]
    seccompProfile:
      type: "RuntimeDefault"
  ## Thanos Ruler containers' resource requests and limits
  ## ref: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
  ## @param ruler.resourcesPreset Set container resources according to one common preset (allowed values: none, nano, micro, small, medium, large, xlarge, 2xlarge). This is ignored if ruler.resources is set (ruler.resources is recommended for production).
  ## More information: https://github.com/bitnami/charts/blob/main/bitnami/common/templates/_resources.tpl#L15
  ##
  resourcesPreset: "nano"
  ## @param ruler.resources Set container requests and limits for different resources like CPU or memory (essential for production workloads)
  ## Example:
  ## resources:
  ##   requests:
  ##     cpu: 2
  ##     memory: 512Mi
  ##   limits:
  ##     cpu: 3
  ##     memory: 1024Mi
  ##
  resources: {}
  ## Configure extra options for Thanos Ruler containers' liveness and readiness probes
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
  ## @param ruler.livenessProbe.enabled Enable livenessProbe on Thanos Ruler containers
  ## @param ruler.livenessProbe.initialDelaySeconds Initial delay seconds for livenessProbe
  ## @param ruler.livenessProbe.periodSeconds Period seconds for livenessProbe
  ## @param ruler.livenessProbe.timeoutSeconds Timeout seconds for livenessProbe
  ## @param ruler.livenessProbe.failureThreshold Failure threshold for livenessProbe
  ## @param ruler.livenessProbe.successThreshold Success threshold for livenessProbe
  ##
  livenessProbe:
    enabled: true
    initialDelaySeconds: 30
    timeoutSeconds: 30
    periodSeconds: 10
    successThreshold: 1
    failureThreshold: 6
  ## @param ruler.readinessProbe.enabled Enable readinessProbe on Thanos Ruler containers
  ## @param ruler.readinessProbe.initialDelaySeconds Initial delay seconds for readinessProbe
  ## @param ruler.readinessProbe.periodSeconds Period seconds for readinessProbe
  ## @param ruler.readinessProbe.timeoutSeconds Timeout seconds for readinessProbe
  ## @param ruler.readinessProbe.failureThreshold Failure threshold for readinessProbe
  ## @param ruler.readinessProbe.successThreshold Success threshold for readinessProbe
  ##
  readinessProbe:
    enabled: true
    initialDelaySeconds: 30
    timeoutSeconds: 30
    periodSeconds: 10
    successThreshold: 1
    failureThreshold: 6
  ## @param ruler.startupProbe.enabled Enable startupProbe on Thanos Ruler containers
  ## @param ruler.startupProbe.initialDelaySeconds Initial delay seconds for startupProbe
  ## @param ruler.startupProbe.periodSeconds Period seconds for startupProbe
  ## @param ruler.startupProbe.timeoutSeconds Timeout seconds for startupProbe
  ## @param ruler.startupProbe.failureThreshold Failure threshold for startupProbe
  ## @param ruler.startupProbe.successThreshold Success threshold for startupProbe
  ##
  startupProbe:
    enabled: false
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 1
    failureThreshold: 15
    successThreshold: 1
  ## @param ruler.customLivenessProbe Custom livenessProbe that overrides the default one
  ##
  customLivenessProbe: {}
  ## @param ruler.customReadinessProbe Custom readinessProbe that overrides the default one
  ##
  customReadinessProbe: {}
  ## @param ruler.customStartupProbe Custom startupProbe that overrides the default one
  ##
  customStartupProbe: {}
  ## @param ruler.initContainers Add additional init containers to the Thanos Ruler pods
  ## ref: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
  ## e.g:
  ## initContainers:
  ##  - name: your-image-name
  ##    image: your-image
  ##    imagePullPolicy: Always
  ##    command: ['sh', '-c', 'echo "hello world"']
  ##
  initContainers: []
  ## @param ruler.sidecars Extra containers running as sidecars to Thanos Ruler pods
  ## e.g:
  ## sidecars:
  ##   - name: your-image-name
  ##     image: your-image
  ##     imagePullPolicy: Always
  ##     ports:
  ##       - name: portname
  ##         containerPort: 1234
  ##
  sidecars: []
  ## @param ruler.extraVolumes Extra volumes to add to Thanos Ruler
  ##
  extraVolumes: []
  ## @param ruler.extraVolumeMounts Extra volume mounts to add to the ruler container
  ##
  extraVolumeMounts: []
  ## @param ruler.podAffinityPreset Thanos Ruler pod affinity preset
  ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
  ##
  podAffinityPreset: ""
  ## @param ruler.podAntiAffinityPreset Thanos Ruler pod anti-affinity preset. Ignored if `ruler.affinity` is set. Allowed values: `soft` or `hard`
  ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
  ##
  podAntiAffinityPreset: soft
  ## Thanos Ruler node affinity preset
  ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#node-affinity
  ##
  nodeAffinityPreset:
    ## @param ruler.nodeAffinityPreset.type Thanos Ruler node affinity preset type. Ignored if `ruler.affinity` is set. Allowed values: `soft` or `hard`
    ##
    type: ""
    ## @param ruler.nodeAffinityPreset.key Thanos Ruler node label key to match. Ignored if `ruler.affinity` is set.
    ## e.g:
    ## key: "kubernetes.io/e2e-az-name"
    ##
    key: ""
    ## @param ruler.nodeAffinityPreset.values Thanos Ruler node label values to match. Ignored if `ruler.affinity` is set.
    ## e.g:
    ## values:
    ##   - e2e-az1
    ##   - e2e-az2
    ##
    values: []
  ## @param ruler.affinity Thanos Ruler affinity for pod assignment
  ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
  ## Note: ruler.podAffinityPreset, ruler.podAntiAffinityPreset, and ruler.nodeAffinityPreset will be ignored when it's set
  ##
  affinity: {}
  ## @param ruler.nodeSelector Thanos Ruler node labels for pod assignment
  ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/
  ##
  nodeSelector: {}
  ## @param ruler.tolerations Thanos Ruler tolerations for pod assignment
  ## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
  ##
  tolerations: []
  ## @param ruler.podLabels Thanos Ruler pod labels
  ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
  ##
  podLabels: {}
  ## @param ruler.podAnnotations Annotations for Thanos Ruler pods
  ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
  ##
  podAnnotations: {}
  ## @param ruler.statefulsetLabels Thanos Ruler statefulset labels
  ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
  ##
  statefulsetLabels: {}
  ## @param ruler.statefulsetAnnotations Thanos Ruler statefulset annotations
  ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
  ##
  statefulsetAnnotations: {}
  ## @param ruler.dnsConfig Deployment pod DNS config
  ## ref: https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/
  ## E.g.
  ## dnsConfig:
  ##   options:
  ##   - name: ndots
  ##     value: "4"
  ##   - name: single-request-reopen
  ##
  dnsConfig: {}
  ## @param ruler.dnsPolicy Deployment pod DNS policy
  ## ref: https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/
  ## E.g.
  ## dnsPolicy: ClusterFirstWithHostNet
  ##
  dnsPolicy: ""
  ## @param ruler.hostAliases Deployment pod host aliases
  ## https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/
  ##
  hostAliases: []
  ## @param ruler.lifecycleHooks for the Thanos Ruler container(s) to automate configuration before or after startup
  ##
  lifecycleHooks: {}
  ## @param ruler.priorityClassName Thanos Ruler priorityClassName
  ## ref: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/
  ##
  priorityClassName: ""
  ## @param ruler.schedulerName Name of the k8s scheduler (other than default) for Thanos Ruler pods
  ## ref: https://kubernetes.io/docs/tasks/administer-cluster/configure-multiple-schedulers/
  ##
  schedulerName: ""
  ## @param ruler.topologySpreadConstraints Topology Spread Constraints for Thanos Ruler pods assignment spread across your cluster among failure-domains
  ## Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/#spread-constraints-for-pods
  ##
  topologySpreadConstraints: []
  ## Network Policies
  ## Ref: https://kubernetes.io/docs/concepts/services-networking/network-policies/
  ##
  networkPolicy:
    ## @param ruler.networkPolicy.enabled Specifies whether a NetworkPolicy should be created
    ##
    enabled: true
    ## @param ruler.networkPolicy.allowExternal Don't require client label for connections
    ## The Policy model to apply. When set to false, only pods with the correct
    ## client label will have network access to the ports the application is listening
    ## on. When true, the app will accept connections from any source
    ## (with the correct destination port).
    ##
    allowExternal: true
    ## @param ruler.networkPolicy.allowExternalEgress Allow the pod to access any range of port and all destinations.
    ##
    allowExternalEgress: true
    ## @param ruler.networkPolicy.extraIngress [array] Add extra ingress rules to the NetworkPolicy
    ## e.g:
    ## extraIngress:
    ##   - ports:
    ##       - port: 1234
    ##     from:
    ##       - podSelector:
    ##           - matchLabels:
    ##               - role: frontend
    ##       - podSelector:
    ##           - matchExpressions:
    ##               - key: role
    ##                 operator: In
    ##                 values:
    ##                   - frontend
    extraIngress: []
    ## @param ruler.networkPolicy.extraEgress [array] Add extra ingress rules to the NetworkPolicy
    ## e.g:
    ## extraEgress:
    ##   - ports:
    ##       - port: 1234
    ##     to:
    ##       - podSelector:
    ##           - matchLabels:
    ##               - role: frontend
    ##       - podSelector:
    ##           - matchExpressions:
    ##               - key: role
    ##                 operator: In
    ##                 values:
    ##                   - frontend
    ##
    extraEgress: []
    ## @param ruler.networkPolicy.ingressNSMatchLabels [object] Labels to match to allow traffic from other namespaces
    ## @param ruler.networkPolicy.ingressNSPodMatchLabels [object] Pod labels to match to allow traffic from other namespaces
    ##
    ingressNSMatchLabels: {}
    ingressNSPodMatchLabels: {}
  ## Service parameters
  ##
  service:
    ## @param ruler.service.type Kubernetes service type
    ##
    type: ClusterIP
    ## @param ruler.service.ports.http Thanos Ruler service HTTP port
    ## @param ruler.service.ports.grpc Thanos Ruler service GRPC port
    ##
    ports:
      http: 9090
      grpc: 10901
    ## @param ruler.service.nodePorts.http Specify the Thanos Ruler HTTP nodePort value for the LoadBalancer and NodePort service types
    ## @param ruler.service.nodePorts.grpc Specify the Thanos Ruler GRPC nodePort value for the LoadBalancer and NodePort service types
    ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
    ##
    nodePorts:
      http: ""
      grpc: ""
    ## @param ruler.service.clusterIP Thanos Ruler service clusterIP IP
    ## e.g:
    ## clusterIP: None
    ##
    clusterIP: ""
    ## @param ruler.service.loadBalancerIP Load balancer IP if service type is `LoadBalancer`
    ## Set the LoadBalancer service type to internal only
    ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#internal-load-balancer
    ##
    loadBalancerIP: ""
    ## @param ruler.service.loadBalancerSourceRanges Address that are allowed when service is LoadBalancer
    ## https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/#restrict-access-for-loadbalancer-service
    ## e.g:
    ## loadBalancerSourceRanges:
    ## - 10.10.10.0/24
    ##
    loadBalancerSourceRanges: []
    ## @param ruler.service.externalTrafficPolicy Thanos Ruler service externalTrafficPolicy
    ## Denotes if this Service desires to route external traffic to node-local or cluster-wide endpoints
    ##
    externalTrafficPolicy: Cluster
    ## @param ruler.service.labels Extra labels for Thanos Ruler service
    ##
    labels: {}
    ## @param ruler.service.annotations Annotations for Thanos Ruler service
    ##
    annotations: {}
    ## @param ruler.service.extraPorts Extra ports to expose in the Thanos Ruler service
    ##
    extraPorts: []
    ## @param ruler.service.labelSelectorsOverride Selector for Thanos Query service
    ##
    labelSelectorsOverride: {}
    ## @param ruler.service.additionalHeadless Additional Headless service
    ##
    additionalHeadless: false
    ## Headless service properties
    ##
    headless:
      ## @param ruler.service.headless.annotations Annotations for the headless service.
      ##
      annotations: {}
    ## @param ruler.service.ipFamilyPolicy Sets the IP family policy for the Service to be able to configure dual-stack; see [Configure dual-stack](https://kubernetes.io/docs/concepts/services-networking/dual-stack/#services).
    ##
    ipFamilyPolicy: ""
    ## @param ruler.service.ipFamilies A list of IP families for the Service that should be supported, in the order in which they should be applied. Can be "IPv4" and/or "IPv6".
    ##
    ipFamilies: []
  ## Persistence parameters
  ##
  persistence:
    ## @param ruler.persistence.enabled Enable data persistence using PVC(s) on Thanos Ruler pods
    ##
    enabled: true
    ## @param ruler.persistence.storageClass Specify the `storageClass` used to provision the volume
    ## If defined, storageClassName: <storageClass>
    ## If set to "-", storageClassName: "", which disables dynamic provisioning
    ## If undefined (the default) or set to null, no storageClassName spec is
    ## set, choosing the default provisioner.
    ##
    storageClass: ""
    ## @param ruler.persistence.accessModes PVC Access Modes for data volume
    ##
    accessModes:
      - ReadWriteOnce
    ## @param ruler.persistence.size PVC Storage Request for data volume
    ##
    size: 8Gi
    ## @param ruler.persistence.annotations Annotations for the PVC
    ##
    annotations: {}
    ## @param ruler.persistence.existingClaim Name of an existing PVC to use
    ## If defined, PVC must be created manually before volume will be bound
    ##
    existingClaim: ""
  ## Persistent Volume Claim Retention Policy
  ## ref: https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#persistentvolumeclaim-retention
  ##
  persistentVolumeClaimRetentionPolicy:
    ## @param ruler.persistentVolumeClaimRetentionPolicy.enabled Enable Persistent volume retention policy for Thanos Ruler Statefulset
    ##
    enabled: false
    ## @param ruler.persistentVolumeClaimRetentionPolicy.whenScaled Volume retention behavior when the replica count of the StatefulSet is reduced
    ##
    whenScaled: Retain
    ## @param ruler.persistentVolumeClaimRetentionPolicy.whenDeleted Volume retention behavior that applies when the StatefulSet is deleted
    ##
    whenDeleted: Retain
  ## @param ruler.automountServiceAccountToken Enable/disable auto mounting of the service account token only for the sts
  ##
  automountServiceAccountToken: true
  ## ServiceAccount configuration
  ## @param ruler.serviceAccount.create Specifies whether a ServiceAccount should be created
  ## @param ruler.serviceAccount.name Name of the service account to use. If not set and create is true, a name is generated using the fullname template.
  ## @param ruler.serviceAccount.annotations Annotations for Thanos Ruler Service Account
  ## @param ruler.serviceAccount.automountServiceAccountToken Enable/disable auto mounting of the service account token
  ##
  serviceAccount:
    create: true
    name: ""
    annotations: {}
    automountServiceAccountToken: false
  ## Thanos Ruler Autoscaling configuration
  ## ref: https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/
  ## @param ruler.autoscaling.enabled Enable autoscaling for Thanos Ruler
  ## @param ruler.autoscaling.minReplicas Minimum number of Thanos Ruler replicas
  ## @param ruler.autoscaling.maxReplicas Maximum number of Thanos Ruler replicas
  ## @param ruler.autoscaling.targetCPU Target CPU utilization percentage
  ## @param ruler.autoscaling.targetMemory Target Memory utilization percentage
  ## @param ruler.autoscaling.behavior HPA Behavior
  ## @param ruler.externalAutoscaler Specifies whether the Thanos Ruler statefulset is scaled by an external autoscaler
  ##
  autoscaling:
    enabled: false
    minReplicas: ""
    maxReplicas: ""
    targetCPU: ""
    targetMemory: ""
    behavior: {}
  externalAutoscaler: false
  ## Thanos Ruler Pod Disruption Budget configuration
  ## ref: https://kubernetes.io/docs/tasks/run-application/configure-pdb
  ## @param ruler.pdb.create Enable/disable a Pod Disruption Budget creation for Thanos Ruler
  ## @param ruler.pdb.minAvailable Minimum number/percentage of pods that should remain scheduled
  ## @param ruler.pdb.maxUnavailable Maximum number/percentage of pods that may be made unavailable
  ##
  pdb:
    create: true
    minAvailable: ""
    maxUnavailable: ""
  ## Configure the ingress resource that allows you to access Thanos Ruler
  ## ref: https://kubernetes.io/docs/concepts/services-networking/ingress/
  ##
  ingress:
    ## @param ruler.ingress.enabled Enable ingress controller resource
    ##
    enabled: false
    ## @param ruler.ingress.hostname Default host for the ingress resource
    ##
    hostname: thanos-ruler.local
    ## @param ruler.ingress.ingressClassName IngressClass that will be be used to implement the Ingress (Kubernetes 1.18+)
    ## This is supported in Kubernetes 1.18+ and required if you have more than one IngressClass marked as the default for your cluster .
    ## ref: https://kubernetes.io/blog/2020/04/02/improvements-to-the-ingress-api-in-kubernetes-1.18/
    ##
    ingressClassName: ""
    ## @param ruler.ingress.labels Additional label for the Ingress resource.
    ## Use this parameter to set the required labels for your needs
    ## e.g:
    ## labels:
    ##   dns-managed-by-external-dns: 'true'
    ##
    labels: {}
    ## @param ruler.ingress.annotations Additional annotations for the Ingress resource. To enable certificate autogeneration, place here your cert-manager annotations.
    ## For a full list of possible ingress annotations, please see
    ## ref: https://github.com/kubernetes/ingress-nginx/blob/main/docs/user-guide/nginx-configuration/annotations.md
    ## Use this parameter to set the required annotations for cert-manager, see
    ## ref: https://cert-manager.io/docs/usage/ingress/#supported-annotations
    ##
    ## e.g:
    ## annotations:
    ##   kubernetes.io/ingress.class: nginx
    ##   cert-manager.io/cluster-issuer: cluster-issuer-name
    ##
    annotations: {}
    ## @param ruler.ingress.extraHosts The list of additional hostnames to be covered with this ingress record.
    ## Most likely the hostname above will be enough, but in the event more hosts are needed, this is an array
    ## extraHosts:
    ## - name: thanos.local
    ##   path: /
    ##   pathType: ImplementationSpecific
    ##
    extraHosts: []
    ## @param ruler.ingress.extraTls The tls configuration for additional hostnames to be covered with this ingress record.
    ## see: https://kubernetes.io/docs/concepts/services-networking/ingress/#tls
    ## extraTls:
    ## - hosts:
    ##     - thanos.local
    ##   secretName: thanos.local-tls
    ##
    extraTls: []
    ## @param ruler.ingress.secrets If you're providing your own certificates, please use this to add the certificates as secrets
    ## key and certificate should start with -----BEGIN CERTIFICATE----- or
    ## -----BEGIN RSA PRIVATE KEY-----
    ##
    ## name should line up with a tlsSecret set further up
    ## If you're using cert-manager, this is unneeded, as it will create the secret for you if it is not set
    ##
    ## It is also possible to create and manage the certificates outside of this helm chart
    ## Please see README.md for more information
    ## e.g:
    ## - name: thanos.local-tls
    ##   key:
    ##   certificate:
    ##
    secrets: []
    ## @param ruler.ingress.extraRules Additional rules to be covered with this ingress record
    ## ref: https://kubernetes.io/docs/concepts/services-networking/ingress/#ingress-rules
    ## e.g:
    ## extraRules:
    ## - host: example.local
    ##     http:
    ##       path: /
    ##       backend:
    ##         service:
    ##           name: example-svc
    ##           port:
    ##             name: http
    ##
    extraRules: []
    ## @param ruler.ingress.apiVersion Force Ingress API version (automatically detected if not set)
    ##
    apiVersion: ""
    ## @param ruler.ingress.path Ingress path
    ##
    path: /
    ## @param ruler.ingress.pathType Ingress path type
    ##
    pathType: ImplementationSpecific
## ============================================================
## @section Thanos Receive parameters (Thanos Receive 파라미터)
## ============================================================
## 💡 Thanos Receive는 Prometheus의 Remote Write 프로토콜로 메트릭을 수신하는 컴포넌트입니다.
##    멀티클러스터 구성에서 중앙 클러스터에 배포하여 Edge 클러스터의 메트릭을 수집합니다.
##
## 아키텍처:
##   Edge Cluster (Prometheus Agent) --remote-write--> Receiver --> S3 + Query
##
receive:
  ## @param receive.enabled Thanos Receive 컴포넌트 활성화/비활성화
  ## 💡 중앙 클러스터에서 활성화하여 Edge 메트릭 수신
  ##
  enabled: false

  ## @param receive.mode Receiver 실행 모드
  ## ref: https://github.com/thanos-io/thanos/blob/release-0.22/docs/proposals-accepted/202012-receive-split.md
  ##
  ## 가능한 값:
  ##   - standalone: 모든 기능이 하나의 컴포넌트에 (소규모 환경)
  ##   - dual-mode: Distributor(무상태)와 Ingester(상태유지) 분리 (대규모 환경)
  ##
  ## 💡 dual-mode 설정 시 stateless Thanos Distributor Deployment 생성
  ##
  mode: standalone

  ## @param receive.logLevel Thanos Receive 로그 레벨
  ## 가능한 값: debug, info, warn, error
  ##
  logLevel: info

  ## @param receive.logFormat Thanos Receive 로그 형식
  ## 가능한 값: logfmt, json
  ##
  logFormat: logfmt

  ## @param receive.tsdbRetention Thanos Receive TSDB 보존 기간
  ## 💡 로컬 TSDB에 메트릭을 보관하는 기간 (S3 업로드 후 삭제)
  ## 권장: 15d ~ 30d (Query가 최근 데이터를 빠르게 조회)
  ##
  tsdbRetention: 15d

  ## @param receive.replicationProtocol Thanos Receive 복제 프로토콜
  ## ref: https://thanos.io/tip/components/receive.md/#replication-protocols
  ## 가능한 값: capnproto, grpc
  ## 💡 HA 구성 시 Receiver 간 데이터 복제에 사용
  ##
  replicationProtocol: capnproto

  ## @param receive.replicationFactor Thanos Receive 복제 계수
  ## 💡 각 메트릭을 몇 개의 Receiver 인스턴스에 복제할지 결정
  ## 권장: 3 (HA 구성), 1 (단일 구성)
  ##
  replicationFactor: 1

  ## @param receive.config Receive Hashring 설정
  ## 💡 Hashring은 메트릭을 여러 Receiver 인스턴스에 분산하는 방법
  ## JSON 또는 YAML 형식 허용
  ##
  ## 예시 (Multi-tenancy):
  ## config:
  ##   - hashring: "tenant-a"
  ##     endpoints:
  ##       - "receive-0.receive:10901"
  ##       - "receive-1.receive:10901"
  ##     tenants:
  ##       - "tenant-a"
  ##   - hashring: "tenant-b"
  ##     endpoints:
  ##       - "receive-2.receive:10901"
  ##     tenants:
  ##       - "tenant-b"
  ##
  config: []

  ## @param receive.tsdbPath Thanos Receive 시계열 데이터베이스 경로
  ## 로컬 TSDB 데이터 저장 경로
  ## 예: /var/thanos/receive
  ##
  tsdbPath: ""

  ## @param receive.existingConfigmap Thanos Receive Hashring 설정이 포함된 기존 ConfigMap 이름
  ## ⚠️ 주의: 설정 시 receive.config 값을 재정의합니다
  ##
  existingConfigmap: ""

  ## @param receive.replicaLabel 데이터 중복 제거를 위한 레플리카 인디케이터 레이블
  ## 💡 HA Prometheus에서 동일한 데이터를 식별하는 레이블
  ##
  replicaLabel: replica
  ## Thanos Receive parameters
  ## ref: https://github.com/thanos-io/thanos/blob/master/docs/components/receive.md#flags
  ##
  grpc:
    ## GRPC server side
    ##
    server:
      ## TLS configuration
      ## @param receive.grpc.server.tls.enabled Enable TLS encryption in the GRPC server
      ## @param receive.grpc.server.tls.autoGenerated Create self-signed TLS certificates. Currently only supports PEM certificates
      ## @param receive.grpc.server.tls.cert TLS Certificate for GRPC server - ignored if existingSecret is provided
      ## @param receive.grpc.server.tls.key TLS Key for GRPC server - ignored if existingSecret is provided
      ## @param receive.grpc.server.tls.ca TLS CA to verify clients against - ignored if existingSecret is provided
      ## @param receive.grpc.server.tls.clientAuthEnabled Enable TLS client verification against provided CA
      ## @param receive.grpc.server.tls.existingSecret Existing secret containing your own TLS certificates
      ## e.g:
      ## existingSecret:
      ##   name: foo
      ##   keyMapping:
      ##     ca-cert: ca.pem
      ##     tls-cert: cert.pem
      ##     tls-key: key.pem
      ##
      tls:
        enabled: false
        autoGenerated: false
        cert: ""
        key: ""
        ca: ""
        clientAuthEnabled: true
        existingSecret: {}
  ## @param receive.extraEnvVars Extra environment variables for Thanos Receive container
  ## e.g:
  ## extraEnvVars:
  ##   - name: FOO
  ##     value: "bar"
  ##
  extraEnvVars: []
  ## @param receive.extraEnvVarsCM Name of existing ConfigMap containing extra env vars for Thanos Receive nodes
  ##
  extraEnvVarsCM: ""
  ## @param receive.extraEnvVarsSecret Name of existing Secret containing extra env vars for Thanos Receive nodes
  ##
  extraEnvVarsSecret: ""
  ## @param receive.extraFlags Extra Flags to passed to Thanos Receive
  ##
  extraFlags: []
  ## @param receive.command Override default container command (useful when using custom images)
  ##
  command: []
  ## @param receive.args Override default container args (useful when using custom images)
  ##
  args: []
  ## @param receive.replicaCount Number of Thanos Receive replicas to deploy
  ##
  replicaCount: 1
  ## @param receive.revisionHistoryLimit The number of old history to retain to allow rollback
  ##
  revisionHistoryLimit: 10
  ## @param receive.updateStrategy.type Update strategy type for Thanos Receive replicas
  ##
  updateStrategy:
    type: RollingUpdate
  ## @param receive.podManagementPolicy
  ## @param receive.podManagementPolicy Statefulset Pod management policy: OrderedReady (default) or Parallel
  ## ref: https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#pod-management-policies
  ##
  podManagementPolicy: OrderedReady
  ## @param receive.minReadySeconds How many seconds a pod needs to be ready before killing the next, during update
  ##
  minReadySeconds: 0
  ## @param receive.containerPorts.http HTTP container port
  ## @param receive.containerPorts.grpc GRPC container port
  ## @param receive.containerPorts.remote Remote-write container port
  ## @param receive.containerPorts.capnproto Cap'n'Proto container port
  ##
  containerPorts:
    http: 10902
    grpc: 10901
    remote: 19291
    capnproto: 19391
  ## K8s Pod Security Context for Thanos Receive pods
  ## https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
  ## @param receive.podSecurityContext.enabled Enable security context for the Thanos Receive pods
  ## @param receive.podSecurityContext.fsGroupChangePolicy Set filesystem group change policy
  ## @param receive.podSecurityContext.sysctls Set kernel settings using the sysctl interface
  ## @param receive.podSecurityContext.supplementalGroups Set filesystem extra groups
  ## @param receive.podSecurityContext.fsGroup Group ID for the filesystem used by Thanos Receive pods
  ##
  podSecurityContext:
    enabled: true
    fsGroupChangePolicy: Always
    sysctls: []
    supplementalGroups: []
    fsGroup: 1001
  ## K8s containers' Security Context for Thanos Receive containers
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
  ## @param receive.containerSecurityContext.enabled Enabled containers' Security Context
  ## @param receive.containerSecurityContext.seLinuxOptions [object,nullable] Set SELinux options in container
  ## @param receive.containerSecurityContext.runAsUser Set containers' Security Context runAsUser
  ## @param receive.containerSecurityContext.runAsGroup Set containers' Security Context runAsGroup
  ## @param receive.containerSecurityContext.runAsNonRoot Set container's Security Context runAsNonRoot
  ## @param receive.containerSecurityContext.privileged Set container's Security Context privileged
  ## @param receive.containerSecurityContext.readOnlyRootFilesystem Set container's Security Context readOnlyRootFilesystem
  ## @param receive.containerSecurityContext.allowPrivilegeEscalation Set container's Security Context allowPrivilegeEscalation
  ## @param receive.containerSecurityContext.capabilities.drop List of capabilities to be dropped
  ## @param receive.containerSecurityContext.seccompProfile.type Set container's Security Context seccomp profile
  ##
  containerSecurityContext:
    enabled: true
    seLinuxOptions: {}
    runAsUser: 1001
    runAsGroup: 1001
    runAsNonRoot: true
    privileged: false
    readOnlyRootFilesystem: true
    allowPrivilegeEscalation: false
    capabilities:
      drop: ["ALL"]
    seccompProfile:
      type: "RuntimeDefault"
  ## Thanos Receive containers' resource requests and limits
  ## ref: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
  ## @param receive.resourcesPreset Set container resources according to one common preset (allowed values: none, nano, micro, small, medium, large, xlarge, 2xlarge). This is ignored if receive.resources is set (receive.resources is recommended for production).
  ## More information: https://github.com/bitnami/charts/blob/main/bitnami/common/templates/_resources.tpl#L15
  ##
  resourcesPreset: "nano"
  ## @param receive.resources Set container requests and limits for different resources like CPU or memory (essential for production workloads)
  ## Example:
  ## resources:
  ##   requests:
  ##     cpu: 2
  ##     memory: 512Mi
  ##   limits:
  ##     cpu: 3
  ##     memory: 1024Mi
  ##
  resources: {}
  ## Configure extra options for Thanos Receive containers' liveness and readiness probes
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
  ## @param receive.livenessProbe.enabled Enable livenessProbe on Thanos Receive containers
  ## @param receive.livenessProbe.initialDelaySeconds Initial delay seconds for livenessProbe
  ## @param receive.livenessProbe.periodSeconds Period seconds for livenessProbe
  ## @param receive.livenessProbe.timeoutSeconds Timeout seconds for livenessProbe
  ## @param receive.livenessProbe.failureThreshold Failure threshold for livenessProbe
  ## @param receive.livenessProbe.successThreshold Success threshold for livenessProbe
  ##
  livenessProbe:
    enabled: true
    initialDelaySeconds: 30
    timeoutSeconds: 30
    periodSeconds: 10
    successThreshold: 1
    failureThreshold: 6
  ## @param receive.readinessProbe.enabled Enable readinessProbe on Thanos Receive containers
  ## @param receive.readinessProbe.initialDelaySeconds Initial delay seconds for readinessProbe
  ## @param receive.readinessProbe.periodSeconds Period seconds for readinessProbe
  ## @param receive.readinessProbe.timeoutSeconds Timeout seconds for readinessProbe
  ## @param receive.readinessProbe.failureThreshold Failure threshold for readinessProbe
  ## @param receive.readinessProbe.successThreshold Success threshold for readinessProbe
  ##
  readinessProbe:
    enabled: true
    initialDelaySeconds: 30
    timeoutSeconds: 30
    periodSeconds: 10
    successThreshold: 1
    failureThreshold: 6
  ## @param receive.startupProbe.enabled Enable startupProbe on Thanos Receive containers
  ## @param receive.startupProbe.initialDelaySeconds Initial delay seconds for startupProbe
  ## @param receive.startupProbe.periodSeconds Period seconds for startupProbe
  ## @param receive.startupProbe.timeoutSeconds Timeout seconds for startupProbe
  ## @param receive.startupProbe.failureThreshold Failure threshold for startupProbe
  ## @param receive.startupProbe.successThreshold Success threshold for startupProbe
  ##
  startupProbe:
    enabled: false
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 1
    failureThreshold: 15
    successThreshold: 1
  ## @param receive.customLivenessProbe Custom livenessProbe that overrides the default one
  ##
  customLivenessProbe: {}
  ## @param receive.customReadinessProbe Custom readinessProbe that overrides the default one
  ##
  customReadinessProbe: {}
  ## @param receive.customStartupProbe Custom startupProbe that overrides the default one
  ##
  customStartupProbe: {}
  ## @param receive.initContainers Add additional init containers to the Thanos Receive pods
  ## ref: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
  ## e.g:
  ## initContainers:
  ##  - name: your-image-name
  ##    image: your-image
  ##    imagePullPolicy: Always
  ##    command: ['sh', '-c', 'echo "hello world"']
  ##
  initContainers: []
  ## @param receive.sidecars Extra containers running as sidecars to Thanos Receive pods
  ## e.g:
  ## sidecars:
  ##   - name: your-image-name
  ##     image: your-image
  ##     imagePullPolicy: Always
  ##     ports:
  ##       - name: portname
  ##         containerPort: 1234
  ##
  sidecars: []
  ## @param receive.extraVolumes Extra volumes to add to Thanos Receive
  ##
  extraVolumes: []
  ## @param receive.extraVolumeMounts Extra volume mounts to add to the receive container
  ##
  extraVolumeMounts: []
  ## @param receive.podAffinityPreset Thanos Receive pod affinity preset
  ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
  ## Allowed values: soft, hard
  ##
  podAffinityPreset: ""
  ## @param receive.podAntiAffinityPreset Thanos Receive pod anti-affinity preset. Ignored if `ruler.affinity` is set. Allowed values: `soft` or `hard`
  ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
  ##
  podAntiAffinityPreset: soft
  ## Thanos Receive node affinity preset
  ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#node-affinity
  ##
  nodeAffinityPreset:
    ## @param receive.nodeAffinityPreset.type Thanos Receive node affinity preset type. Ignored if `receive.affinity` is set. Allowed values: `soft` or `hard`
    ##
    type: ""
    ## @param receive.nodeAffinityPreset.key Thanos Receive node label key to match. Ignored if `receive.affinity` is set.
    ## e.g:
    ## key: "kubernetes.io/e2e-az-name"
    ##
    key: ""
    ## @param receive.nodeAffinityPreset.values Thanos Receive node label values to match. Ignored if `receive.affinity` is set.
    ## e.g:
    ## values:
    ##   - e2e-az1
    ##   - e2e-az2
    ##
    values: []
  ## @param receive.affinity Thanos Receive affinity for pod assignment
  ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
  ## Note: receive.podAffinityPreset, receive.podAntiAffinityPreset, and receive.nodeAffinityPreset will be ignored when it's set
  ##
  affinity: {}
  ## @param receive.nodeSelector Thanos Receive node labels for pod assignment
  ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/
  ##
  nodeSelector: {}
  ## @param receive.tolerations Thanos Receive tolerations for pod assignment
  ## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
  ##
  tolerations: []
  ## @param receive.statefulsetLabels Thanos Receive statefulset labels
  ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
  ##
  statefulsetLabels: {}
  ## @param receive.statefulsetAnnotations Thanos Receive statefulset annotations
  ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
  ##
  statefulsetAnnotations: {}
  ## @param receive.podLabels Thanos Receive pod labels
  ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
  ##
  podLabels: {}
  ## @param receive.podAnnotations Annotations for Thanos Receive pods
  ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
  ##
  podAnnotations: {}
  ## @param receive.dnsConfig Deployment pod DNS config
  ## ref: https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/
  ## E.g.
  ## dnsConfig:
  ##   options:
  ##   - name: ndots
  ##     value: "4"
  ##   - name: single-request-reopen
  ##
  dnsConfig: {}
  ## @param receive.dnsPolicy Deployment pod DNS policy
  ## ref: https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/
  ## E.g.
  ## dnsPolicy: ClusterFirstWithHostNet
  ##
  dnsPolicy: ""
  ## @param receive.hostAliases Deployment pod host aliases
  ## https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/
  ##
  hostAliases: []
  ## @param receive.terminationGracePeriodSeconds for the Thanos Receive containers(s) to extend the grace period
  ##
  terminationGracePeriodSeconds: ""
  ## @param receive.lifecycleHooks for the Thanos Receive container(s) to automate configuration before or after startup
  ##
  lifecycleHooks: {}
  ## @param receive.priorityClassName Thanos Receive priorityClassName
  ## ref: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/
  ##
  priorityClassName: ""
  ## @param receive.schedulerName Name of the k8s scheduler (other than default) for Thanos Receive pods
  ## ref: https://kubernetes.io/docs/tasks/administer-cluster/configure-multiple-schedulers/
  ##
  schedulerName: ""
  ## @param receive.topologySpreadConstraints Topology Spread Constraints for Thanos Receive pods assignment spread across your cluster among failure-domains
  ## Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/#spread-constraints-for-pods
  ##
  topologySpreadConstraints: []
  ## Network Policies
  ## Ref: https://kubernetes.io/docs/concepts/services-networking/network-policies/
  ##
  networkPolicy:
    ## @param receive.networkPolicy.enabled Specifies whether a NetworkPolicy should be created
    ##
    enabled: true
    ## @param receive.networkPolicy.allowExternal Don't require client label for connections
    ## The Policy model to apply. When set to false, only pods with the correct
    ## client label will have network access to the ports the application is listening
    ## on. When true, the app will accept connections from any source
    ## (with the correct destination port).
    ##
    allowExternal: true
    ## @param receive.networkPolicy.allowExternalEgress Allow the pod to access any range of port and all destinations.
    ##
    allowExternalEgress: true
    ## @param receive.networkPolicy.extraIngress [array] Add extra ingress rules to the NetworkPolicy
    ## e.g:
    ## extraIngress:
    ##   - ports:
    ##       - port: 1234
    ##     from:
    ##       - podSelector:
    ##           - matchLabels:
    ##               - role: frontend
    ##       - podSelector:
    ##           - matchExpressions:
    ##               - key: role
    ##                 operator: In
    ##                 values:
    ##                   - frontend
    extraIngress: []
    ## @param receive.networkPolicy.extraEgress [array] Add extra ingress rules to the NetworkPolicy
    ## e.g:
    ## extraEgress:
    ##   - ports:
    ##       - port: 1234
    ##     to:
    ##       - podSelector:
    ##           - matchLabels:
    ##               - role: frontend
    ##       - podSelector:
    ##           - matchExpressions:
    ##               - key: role
    ##                 operator: In
    ##                 values:
    ##                   - frontend
    ##
    extraEgress: []
    ## @param receive.networkPolicy.ingressNSMatchLabels [object] Labels to match to allow traffic from other namespaces
    ## @param receive.networkPolicy.ingressNSPodMatchLabels [object] Pod labels to match to allow traffic from other namespaces
    ##
    ingressNSMatchLabels: {}
    ingressNSPodMatchLabels: {}
  ## Service parameters
  ##
  service:
    ## @param receive.service.type Kubernetes service type
    ##
    type: ClusterIP
    ## @param receive.service.ports.http Thanos Receive service HTTP port
    ## @param receive.service.ports.grpc Thanos Receive service GRPC port
    ## @param receive.service.ports.remote Thanos Receive service Remote-write port
    ## @param receive.service.ports.capnproto Thanos Receive service Cap'n'Proto port
    ##
    ports:
      http: 10902
      grpc: 10901
      remote: 19291
      capnproto: 19391
    ## @param receive.service.nodePorts.http Specify the Thanos Receive HTTP nodePort value for the LoadBalancer and NodePort service types
    ## @param receive.service.nodePorts.grpc Specify the Thanos Receive GRPC nodePort value for the LoadBalancer and NodePort service types
    ## @param receive.service.nodePorts.remote Specify the Thanos Receive Remote-write nodePort value for the LoadBalancer and NodePort service types
    ## @param receive.service.nodePorts.capnproto Specify the Thanos Receive Cap'n'Proto nodePort value for the LoadBalancer and NodePort service types
    ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
    ##
    nodePorts:
      http: ""
      grpc: ""
      remote: ""
      capnproto: ""
    ## @param receive.service.clusterIP Thanos Receive service clusterIP IP
    ## e.g:
    ## clusterIP: None
    ##
    clusterIP: ""
    ## @param receive.service.loadBalancerIP Load balancer IP if service type is `LoadBalancer`
    ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#internal-load-balancer
    ##
    loadBalancerIP: ""
    ## @param receive.service.loadBalancerSourceRanges Addresses that are allowed when service is LoadBalancer
    ## https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/#restrict-access-for-loadbalancer-service
    ## e.g:
    ## loadBalancerSourceRanges:
    ## - 10.10.10.0/24
    ##
    loadBalancerSourceRanges: []
    ## @param receive.service.externalTrafficPolicy Thanos Receive service externalTrafficPolicy
    ## Denotes if this Service desires to route external traffic to node-local or cluster-wide endpoints
    ##
    externalTrafficPolicy: Cluster
    ## @param receive.service.labels Extra labels for Thanos Receive service
    ##
    labels: {}
    ## @param receive.service.annotations Annotations for Thanos Receive service
    ##
    annotations: {}
    ## @param receive.service.extraPorts Extra ports to expose in the Thanos Receive service
    ##
    extraPorts: []
    ## @param receive.service.labelSelectorsOverride Selector for Thanos receive service
    ##
    labelSelectorsOverride: {}
    ## @param receive.service.additionalHeadless Additional Headless service
    ##
    additionalHeadless: false
    ## Headless service properties
    ##
    headless:
      ## @param receive.service.headless.annotations Annotations for the headless service.
      ##
      annotations: {}
    ## @param receive.service.ipFamilyPolicy Sets the IP family policy for the Service to be able to configure dual-stack; see [Configure dual-stack](https://kubernetes.io/docs/concepts/services-networking/dual-stack/#services).
    ##
    ipFamilyPolicy: ""
    ## @param receive.service.ipFamilies A list of IP families for the Service that should be supported, in the order in which they should be applied. Can be "IPv4" and/or "IPv6".
    ##
    ipFamilies: []
  ## @param receive.automountServiceAccountToken Enable/disable auto mounting of the service account token only for the sts
  ##
  automountServiceAccountToken: true
  ## ServiceAccount configuration
  ## @param receive.serviceAccount.create Specifies whether a ServiceAccount should be created
  ## @param receive.serviceAccount.name Name of the service account to use. If not set and create is true, a name is generated using the fullname template.
  ## @param receive.serviceAccount.annotations Annotations for Thanos Receive Service Account
  ## @param receive.serviceAccount.automountServiceAccountToken Enable/disable auto mounting of the service account token
  ##
  serviceAccount:
    create: true
    name: ""
    annotations: {}
    automountServiceAccountToken: false
  ## Thanos Receive Autoscaling configuration
  ## ref: https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/
  ## @param receive.autoscaling.enabled Enable autoscaling for Thanos Receive
  ## @param receive.autoscaling.minReplicas Minimum number of Thanos Receive replicas
  ## @param receive.autoscaling.maxReplicas Maximum number of Thanos Receive replicas
  ## @param receive.autoscaling.targetCPU Target CPU utilization percentage
  ## @param receive.autoscaling.targetMemory Target Memory utilization percentage
  ## @param receive.autoscaling.behavior HPA Behavior
  ## @param receive.externalAutoscaler Specifies whether the Thanos Receive statefulset is scaled by an external autoscaler
  ##
  autoscaling:
    enabled: false
    minReplicas: ""
    maxReplicas: ""
    targetCPU: ""
    targetMemory: ""
    behavior: {}
  externalAutoscaler: false
  ## Thanos Receive Pod Disruption Budget configuration
  ## ref: https://kubernetes.io/docs/tasks/run-application/configure-pdb
  ## @param receive.pdb.create Enable/disable a Pod Disruption Budget creation for Thanos Receive
  ## @param receive.pdb.minAvailable Minimum number/percentage of pods that should remain scheduled
  ## @param receive.pdb.maxUnavailable Maximum number/percentage of pods that may be made unavailable
  ##
  pdb:
    create: true
    minAvailable: ""
    maxUnavailable: ""
  ## Persistence parameters
  ##
  persistence:
    ## @param receive.persistence.enabled Enable data persistence using PVC(s) on Thanos Receive pods
    ##
    enabled: true
    ## @param receive.persistence.storageClass Specify the `storageClass` used to provision the volume
    ## If defined, storageClassName: <storageClass>
    ## If set to "-", storageClassName: "", which disables dynamic provisioning
    ## If undefined (the default) or set to null, no storageClassName spec is
    ## set, choosing the default provisioner.
    ##
    storageClass: ""
    ## @param receive.persistence.accessModes PVC Access Modes for data volume
    ##
    accessModes:
      - ReadWriteOnce
    ## @param receive.persistence.size PVC Storage Request for data volume
    ##
    size: 8Gi
    ## @param receive.persistence.labels Labels for the PVC
    ##
    labels: {}
    ## @param receive.persistence.annotations Annotations for the PVC
    ##
    annotations: {}
    ## @param receive.persistence.existingClaim Name of an existing PVC to use
    ## If defined, PVC must be created manually before volume will be bound
    ##
    existingClaim: ""
  ## Persistent Volume Claim Retention Policy
  ## ref: https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#persistentvolumeclaim-retention
  ##
  persistentVolumeClaimRetentionPolicy:
    ## @param receive.persistentVolumeClaimRetentionPolicy.enabled Enable Persistent volume retention policy for Thanos Receive Statefulset
    ##
    enabled: false
    ## @param receive.persistentVolumeClaimRetentionPolicy.whenScaled Volume retention behavior when the replica count of the StatefulSet is reduced
    ##
    whenScaled: Retain
    ## @param receive.persistentVolumeClaimRetentionPolicy.whenDeleted Volume retention behavior that applies when the StatefulSet is deleted
    ##
    whenDeleted: Retain
  ## Configure the ingress resource that allows you to access Thanos Receive
  ## ref: https://kubernetes.io/docs/concepts/services-networking/ingress/
  ##
  ingress:
    ## @param receive.ingress.enabled Set to true to enable ingress record generation
    ##
    enabled: false
    ## @param receive.ingress.hostname When the ingress is enabled, a host pointing to this will be created
    ##
    hostname: thanos-receive.local
    ## @param receive.ingress.ingressClassName IngressClass that will be be used to implement the Ingress (Kubernetes 1.18+)
    ## This is supported in Kubernetes 1.18+ and required if you have more than one IngressClass marked as the default for your cluster .
    ## ref: https://kubernetes.io/blog/2020/04/02/improvements-to-the-ingress-api-in-kubernetes-1.18/
    ##
    ingressClassName: ""
    ## @param receive.ingress.labels Additional label for the Ingress resource.
    ## Use this parameter to set the required labels for your needs
    ## e.g:
    ## labels:
    ##   dns-managed-by-external-dns: 'true'
    ##
    labels: {}
    ## @param receive.ingress.annotations Additional annotations for the Ingress resource. To enable certificate autogeneration, place here your cert-manager annotations.
    ## For a full list of possible ingress annotations, please see
    ## ref: https://github.com/kubernetes/ingress-nginx/blob/main/docs/user-guide/nginx-configuration/annotations.md
    ## Use this parameter to set the required annotations for cert-manager, see
    ## ref: https://cert-manager.io/docs/usage/ingress/#supported-annotations
    ##
    ## e.g:
    ## annotations:
    ##   kubernetes.io/ingress.class: nginx
    ##   cert-manager.io/cluster-issuer: cluster-issuer-name
    ##
    annotations: {}
    ## @param receive.ingress.extraHosts The list of additional hostnames to be covered with this ingress record.
    ## Most likely the hostname above will be enough, but in the event more hosts are needed, this is an array
    ## extraHosts:
    ## - name: thanos.local
    ##   path: /
    ##   pathType: ImplementationSpecific
    ##   portName: "http" # or "remote"
    ##
    extraHosts: []
    ## @param receive.ingress.extraTls The tls configuration for additional hostnames to be covered with this ingress record.
    ## see: https://kubernetes.io/docs/concepts/services-networking/ingress/#tls
    ## extraTls:
    ## - hosts:
    ##     - thanos.local
    ##   secretName: thanos.local-tls
    ##
    extraTls: []
    ## @param receive.ingress.secrets If you're providing your own certificates, please use this to add the certificates as secrets
    ## key and certificate should start with -----BEGIN CERTIFICATE----- or
    ## -----BEGIN RSA PRIVATE KEY-----
    ##
    ## name should line up with a tlsSecret set further up
    ## If you're using cert-manager, this is unneeded, as it will create the secret for you if it is not set
    ##
    ## It is also possible to create and manage the certificates outside of this helm chart
    ## Please see README.md for more information
    ## e.g:
    ## - name: thanos.local-tls
    ##   key:
    ##   certificate:
    ##
    secrets: []
    ## @param receive.ingress.extraRules Additional rules to be covered with this ingress record
    ## ref: https://kubernetes.io/docs/concepts/services-networking/ingress/#ingress-rules
    ## e.g:
    ## extraRules:
    ## - host: example.local
    ##     http:
    ##       path: /
    ##       backend:
    ##         service:
    ##           name: example-svc
    ##           port:
    ##             name: http
    ##
    extraRules: []
    ## @param receive.ingress.tls Enable TLS configuration for the hostname defined at `receive.ingress.hostname` parameter
    ## TLS certificates will be retrieved from a TLS secret with name: `{{- printf "%s-tls" .Values.receive.ingress.hostname }}`
    ## You can:
    ##   - Use the `receive.ingress.secrets` parameter to create this TLS secret
    ##   - Rely on cert-manager to create it by setting the corresponding annotations
    ##   - Rely on Helm to create self-signed certificates by setting `receive.ingress.selfSigned=true`
    ##
    tls: false
    ## @param receive.ingress.selfSigned Create a TLS secret for this ingress record using self-signed certificates generated by Helm
    ##
    selfSigned: false
    ## @param receive.ingress.apiVersion Override API Version (automatically detected if not set)
    ##
    apiVersion: ""
    ## @param receive.ingress.path Ingress Path
    ##
    path: /
    ## @param receive.ingress.pathType Ingress Path type
    ##
    pathType: ImplementationSpecific
## ============================================================
## @section Thanos Receive Distributor parameters (Thanos Receive Distributor 파라미터)
## ============================================================
## 💡 Thanos Receive Distributor는 Dual-mode 구성에서 사용되는 무상태(stateless) 컴포넌트입니다.
##
## 주요 기능:
##   1. 들어오는 Remote Write 요청을 받아 Hashring에 따라 라우팅
##   2. 데이터를 적절한 Ingester(Receiver)로 분산
##   3. Replication Factor에 따라 여러 Ingester에 복제
##   4. Ingester 장애 시 자동 페일오버
##
## 아키텍처 (Dual-mode):
##   Prometheus Agent --remote-write--> Distributor --route--> Ingester (Receiver)
##
## 💡 대규모 환경에서 수평 확장 가능 (Distributor는 stateless이므로 자유롭게 스케일링)
##
receiveDistributor:
  ## @param receiveDistributor.enabled Thanos Receive Distributor 컴포넌트 활성화/비활성화
  ## 💡 receive.mode가 "dual-mode"일 때만 활성화됨
  ##
  enabled: false

  ## @param receiveDistributor.logLevel Thanos Receive Distributor 로그 레벨
  ##
  logLevel: info

  ## @param receiveDistributor.logFormat Thanos Receive Distributor 로그 형식
  ##
  logFormat: logfmt

  ## @param receiveDistributor.replicaLabel 데이터 중복 제거를 위한 레플리카 인디케이터 레이블
  ##
  replicaLabel: replica

  ## @param receiveDistributor.replicationProtocol Thanos Receive Distributor 복제 프로토콜
  ## ref: https://thanos.io/tip/components/receive.md/#replication-protocols
  ## 가능한 값: capnproto, grpc
  ## 💡 Ingester 간 데이터 복제에 사용
  ##
  replicationProtocol: capnproto

  ## @param receiveDistributor.replicationFactor Thanos Receive Distributor 복제 계수
  ## 💡 각 메트릭을 몇 개의 Ingester에 복제할지 결정 (HA: 3, 단일: 1)
  ##
  replicationFactor: 1
  ## @param receiveDistributor.extraEnvVars Extra environment variables for Thanos Receive Distributor container
  ## e.g:
  ## extraEnvVars:
  ##   - name: FOO
  ##     value: "bar"
  ##
  extraEnvVars: []
  ## @param receiveDistributor.extraEnvVarsCM Name of existing ConfigMap containing extra env vars for Thanos Receive Distributor nodes
  ##
  extraEnvVarsCM: ""
  ## @param receiveDistributor.extraEnvVarsSecret Name of existing Secret containing extra env vars for Thanos Receive Distributor nodes
  ##
  extraEnvVarsSecret: ""
  ## @param receiveDistributor.extraFlags Extra Flags to passed to Thanos Receive Distributor
  ##
  extraFlags: []
  ## @param receiveDistributor.command Override default container command (useful when using custom images)
  ##
  command: []
  ## @param receiveDistributor.args Override default container args (useful when using custom images)
  ##
  args: []
  ## @param receiveDistributor.replicaCount Number of Thanos Receive Distributor replicas to deploy
  ##
  replicaCount: 1
  ## @param receiveDistributor.revisionHistoryLimit The number of old history to retain to allow rollback
  ##
  revisionHistoryLimit: 10
  ## @param receiveDistributor.updateStrategy.type Update strategy type for Thanos Receive Distributor replicas
  ##
  updateStrategy:
    type: RollingUpdate
  ## K8s Pod Security Context for Thanos Receive Distributor pods
  ## https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
  ## @param receiveDistributor.podSecurityContext.enabled Enable security context for the Thanos Receive Distributor pods
  ## @param receiveDistributor.podSecurityContext.fsGroupChangePolicy Set filesystem group change policy
  ## @param receiveDistributor.podSecurityContext.sysctls Set kernel settings using the sysctl interface
  ## @param receiveDistributor.podSecurityContext.supplementalGroups Set filesystem extra groups
  ## @param receiveDistributor.podSecurityContext.fsGroup Group ID for the filesystem used by Thanos Receive Distributor pods
  ##
  podSecurityContext:
    enabled: true
    fsGroupChangePolicy: Always
    sysctls: []
    supplementalGroups: []
    fsGroup: 1001
  ## K8s containers' Security Context for Thanos Receive Distributor containers
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
  ## @param receiveDistributor.containerSecurityContext.enabled Enabled containers' Security Context
  ## @param receiveDistributor.containerSecurityContext.seLinuxOptions [object,nullable] Set SELinux options in container
  ## @param receiveDistributor.containerSecurityContext.runAsUser Set containers' Security Context runAsUser
  ## @param receiveDistributor.containerSecurityContext.runAsGroup Set containers' Security Context runAsGroup
  ## @param receiveDistributor.containerSecurityContext.runAsNonRoot Set container's Security Context runAsNonRoot
  ## @param receiveDistributor.containerSecurityContext.privileged Set container's Security Context privileged
  ## @param receiveDistributor.containerSecurityContext.readOnlyRootFilesystem Set container's Security Context readOnlyRootFilesystem
  ## @param receiveDistributor.containerSecurityContext.allowPrivilegeEscalation Set container's Security Context allowPrivilegeEscalation
  ## @param receiveDistributor.containerSecurityContext.capabilities.drop List of capabilities to be dropped
  ## @param receiveDistributor.containerSecurityContext.seccompProfile.type Set container's Security Context seccomp profile
  ##
  containerSecurityContext:
    enabled: true
    seLinuxOptions: {}
    runAsUser: 1001
    runAsGroup: 1001
    runAsNonRoot: true
    privileged: false
    readOnlyRootFilesystem: true
    allowPrivilegeEscalation: false
    capabilities:
      drop: ["ALL"]
    seccompProfile:
      type: "RuntimeDefault"
  ## Thanos Receive Distributor containers' resource requests and limits
  ## ref: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
  ## @param receiveDistributor.resourcesPreset Set container resources according to one common preset (allowed values: none, nano, micro, small, medium, large, xlarge, 2xlarge). This is ignored if receiveDistributor.resources is set (receiveDistributor.resources is recommended for production).
  ## More information: https://github.com/bitnami/charts/blob/main/bitnami/common/templates/_resources.tpl#L15
  ##
  resourcesPreset: "nano"
  ## @param receiveDistributor.resources Set container requests and limits for different resources like CPU or memory (essential for production workloads)
  ## Example:
  ## resources:
  ##   requests:
  ##     cpu: 2
  ##     memory: 512Mi
  ##   limits:
  ##     cpu: 3
  ##     memory: 1024Mi
  ##
  resources: {}
  ## Configure extra options for Thanos Receive Distributor containers' liveness and readiness probes
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
  ## @param receiveDistributor.livenessProbe.enabled Enable livenessProbe on Thanos Receive Distributor containers
  ## @param receiveDistributor.livenessProbe.initialDelaySeconds Initial delay seconds for livenessProbe
  ## @param receiveDistributor.livenessProbe.periodSeconds Period seconds for livenessProbe
  ## @param receiveDistributor.livenessProbe.timeoutSeconds Timeout seconds for livenessProbe
  ## @param receiveDistributor.livenessProbe.failureThreshold Failure threshold for livenessProbe
  ## @param receiveDistributor.livenessProbe.successThreshold Success threshold for livenessProbe
  ##
  livenessProbe:
    enabled: true
    initialDelaySeconds: 30
    timeoutSeconds: 30
    periodSeconds: 10
    successThreshold: 1
    failureThreshold: 6
  ## @param receiveDistributor.readinessProbe.enabled Enable readinessProbe on Thanos Receive Distributor containers
  ## @param receiveDistributor.readinessProbe.initialDelaySeconds Initial delay seconds for readinessProbe
  ## @param receiveDistributor.readinessProbe.periodSeconds Period seconds for readinessProbe
  ## @param receiveDistributor.readinessProbe.timeoutSeconds Timeout seconds for readinessProbe
  ## @param receiveDistributor.readinessProbe.failureThreshold Failure threshold for readinessProbe
  ## @param receiveDistributor.readinessProbe.successThreshold Success threshold for readinessProbe
  ##
  readinessProbe:
    enabled: true
    initialDelaySeconds: 30
    timeoutSeconds: 30
    periodSeconds: 10
    successThreshold: 1
    failureThreshold: 6
  ## @param receiveDistributor.startupProbe.enabled Enable startupProbe on Thanos Receive Distributor containers
  ## @param receiveDistributor.startupProbe.initialDelaySeconds Initial delay seconds for startupProbe
  ## @param receiveDistributor.startupProbe.periodSeconds Period seconds for startupProbe
  ## @param receiveDistributor.startupProbe.timeoutSeconds Timeout seconds for startupProbe
  ## @param receiveDistributor.startupProbe.failureThreshold Failure threshold for startupProbe
  ## @param receiveDistributor.startupProbe.successThreshold Success threshold for startupProbe
  ##
  startupProbe:
    enabled: false
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 1
    failureThreshold: 15
    successThreshold: 1
  ## @param receiveDistributor.customLivenessProbe Custom livenessProbe that overrides the default one
  ##
  customLivenessProbe: {}
  ## @param receiveDistributor.customReadinessProbe Custom readinessProbe that overrides the default one
  ##
  customReadinessProbe: {}
  ## @param receiveDistributor.customStartupProbe Custom startupProbe that overrides the default one
  ##
  customStartupProbe: {}
  ## @param receiveDistributor.terminationGracePeriodSeconds for the Thanos Receive containers(s) to extend the grace period
  ##
  terminationGracePeriodSeconds: ""
  ## @param receiveDistributor.initContainers Add additional init containers to the Thanos Receive Distributor pods
  ## ref: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
  ## e.g:
  ## initContainers:
  ##  - name: your-image-name
  ##    image: your-image
  ##    imagePullPolicy: Always
  ##    command: ['sh', '-c', 'echo "hello world"']
  ##
  initContainers: []
  ## @param receiveDistributor.sidecars Extra containers running as sidecars to Thanos Receive Distributor pods
  ## e.g:
  ## sidecars:
  ##   - name: your-image-name
  ##     image: your-image
  ##     imagePullPolicy: Always
  ##     ports:
  ##       - name: portname
  ##         containerPort: 1234
  ##
  sidecars: []
  ## @param receiveDistributor.extraVolumes Extra volumes to add to Thanos Receive Distributor
  ##
  extraVolumes: []
  ## @param receiveDistributor.extraVolumeMounts Extra volume mounts to add to the receive distributor container
  ##
  extraVolumeMounts: []
  ## @param receiveDistributor.podAffinityPreset Thanos Receive pod affinity preset
  ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
  ## Allowed values: soft, hard
  ##
  podAffinityPreset: ""
  ## @param receiveDistributor.podAntiAffinityPreset Thanos Receive pod anti-affinity preset. Ignored if `receiveDistributor.affinity` is set. Allowed values: `soft` or `hard`
  ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
  ##
  podAntiAffinityPreset: soft
  ## Thanos Receive node affinity preset
  ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#node-affinity
  ##
  nodeAffinityPreset:
    ## @param receiveDistributor.nodeAffinityPreset.type Thanos Receive node affinity preset type. Ignored if `receiveDistributor.affinity` is set. Allowed values: `soft` or `hard`
    ##
    type: ""
    ## @param receiveDistributor.nodeAffinityPreset.key Thanos Receive node label key to match. Ignored if `receiveDistributor.affinity` is set.
    ## e.g:
    ## key: "kubernetes.io/e2e-az-name"
    ##
    key: ""
    ## @param receiveDistributor.nodeAffinityPreset.values Thanos Receive node label values to match. Ignored if `receiveDistributor.affinity` is set.
    ## e.g:
    ## values:
    ##   - e2e-az1
    ##   - e2e-az2
    ##
    values: []
  ## @param receiveDistributor.affinity Thanos Receive Distributor affinity for pod assignment
  ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
  ## Note: receiveDistributor.podAffinityPreset, receiveDistributor.podAntiAffinityPreset, and receiveDistributor.nodeAffinityPreset will be ignored when it's set
  ##
  affinity: {}
  ## @param receiveDistributor.nodeSelector Thanos Receive Distributor node labels for pod assignment
  ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/
  ##
  nodeSelector: {}
  ## @param receiveDistributor.tolerations Thanos Receive Distributor tolerations for pod assignment
  ## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
  ##
  tolerations: []
  ## @param receiveDistributor.podLabels Thanos Receive Distributor pod labels
  ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
  ##
  podLabels: {}
  ## @param receiveDistributor.podAnnotations Annotations for Thanos Receive Distributor pods
  ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
  ##
  podAnnotations: {}
  ## @param receiveDistributor.dnsConfig Deployment pod DNS config
  ## ref: https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/
  ## E.g.
  ## dnsConfig:
  ##   options:
  ##   - name: ndots
  ##     value: "4"
  ##   - name: single-request-reopen
  ##
  dnsConfig: {}
  ## @param receiveDistributor.dnsPolicy Deployment pod DNS policy
  ## ref: https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/
  ## E.g.
  ## dnsPolicy: ClusterFirstWithHostNet
  ##
  dnsPolicy: ""
  ## @param receiveDistributor.hostAliases Deployment pod host aliases
  ## https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/
  ##
  hostAliases: []
  ## @param receiveDistributor.lifecycleHooks for the Thanos Receive Distributor container(s) to automate configuration before or after startup
  ##
  lifecycleHooks: {}
  ## @param receiveDistributor.priorityClassName Thanos Receive Distributor priorityClassName
  ## ref: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/
  ##
  priorityClassName: ""
  ## @param receiveDistributor.schedulerName Name of the k8s scheduler (other than default) for Thanos Receive Distributor pods
  ## ref: https://kubernetes.io/docs/tasks/administer-cluster/configure-multiple-schedulers/
  ##
  schedulerName: ""
  ## @param receiveDistributor.topologySpreadConstraints Topology Spread Constraints for Thanos Receive Distributor pods assignment spread across your cluster among failure-domains
  ## Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/#spread-constraints-for-pods
  ##
  topologySpreadConstraints: []
  ## @param receiveDistributor.automountServiceAccountToken Enable/disable auto mounting of the service account token only for the deployment
  ##
  automountServiceAccountToken: true
  ## ServiceAccount configuration
  ## @param receiveDistributor.serviceAccount.create Specifies whether a ServiceAccount should be created
  ## @param receiveDistributor.serviceAccount.name Name of the service account to use. If not set and create is true, a name is generated using the fullname template.
  ## @param receiveDistributor.serviceAccount.annotations Annotations for Thanos Receive Distributor Service Account
  ## @param receiveDistributor.serviceAccount.automountServiceAccountToken Enable/disable auto mounting of the service account token
  ##
  serviceAccount:
    create: true
    name: ""
    annotations: {}
    automountServiceAccountToken: false
  ## Thanos Receive Distributor Autoscaling configuration
  ## ref: https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/
  ## @param receiveDistributor.autoscaling.enabled Enable autoscaling for Thanos Receive Distributor
  ## @param receiveDistributor.autoscaling.minReplicas Minimum number of Thanos Receive Distributor replicas
  ## @param receiveDistributor.autoscaling.maxReplicas Maximum number of Thanos Receive Distributor replicas
  ## @param receiveDistributor.autoscaling.targetCPU Target CPU utilization percentage
  ## @param receiveDistributor.autoscaling.targetMemory Target Memory utilization percentage
  ## @param receiveDistributor.autoscaling.behavior HPA Behavior
  ## @param receiveDistributor.externalAutoscaler Specifies whether the Thanos Receive Distributor deployment is scaled by an external autoscaler
  ##
  autoscaling:
    enabled: false
    minReplicas: ""
    maxReplicas: ""
    targetCPU: ""
    targetMemory: ""
    behavior: {}
  externalAutoscaler: false
  ## Thanos Receive Distributor Pod Disruption Budget configuration
  ## ref: https://kubernetes.io/docs/tasks/run-application/configure-pdb
  ## @param receiveDistributor.pdb.create Enable/disable a Pod Disruption Budget creation for Thanos Receive Distributor
  ## @param receiveDistributor.pdb.minAvailable Minimum number/percentage of pods that should remain scheduled
  ## @param receiveDistributor.pdb.maxUnavailable Maximum number/percentage of pods that may be made unavailable
  ##
  pdb:
    create: true
    minAvailable: ""
    maxUnavailable: ""
## ============================================================
## @section Metrics parameters (메트릭 파라미터)
## ============================================================

## Prometheus 메트릭 수집 설정
## 💡 Thanos 컴포넌트 자체를 모니터링하기 위한 설정
##
metrics:
  ## @param metrics.enabled Prometheus 메트릭 내보내기 활성화
  ## 💡 Thanos 컴포넌트의 상태를 모니터링하려면 활성화
  ##
  enabled: false

  ## ============================================================
  ## Prometheus Operator ServiceMonitor 설정
  ## ============================================================
  ## 💡 Prometheus Operator를 사용하는 경우 자동으로 메트릭 수집
  ##
  serviceMonitor:
    ## @param metrics.serviceMonitor.enabled Prometheus Operator용 ServiceMonitor 배포 여부
    ## 💡 Prometheus Operator 사용 시 활성화
    ##
    enabled: false

    ## @param metrics.serviceMonitor.namespace Prometheus가 실행되는 네임스페이스
    ## 💡 미설정 시 Thanos와 동일한 네임스페이스 사용
    ##
    namespace: ""

    ## @param metrics.serviceMonitor.labels ServiceMonitor에 추가할 레이블
    ## 💡 Prometheus가 이 ServiceMonitor를 선택하도록 레이블 추가
    ## 예: labels: { "prometheus": "kube-prometheus" }
    ##
    labels: {}

    ## @param metrics.serviceMonitor.jobLabel Prometheus의 job 이름으로 사용할 대상 서비스의 레이블 이름
    ##
    jobLabel: ""

    ## @param metrics.serviceMonitor.interval 메트릭 수집 주기
    ## 예: interval: 30s
    ##
    interval: ""

    ## @param metrics.serviceMonitor.scrapeTimeout 수집 종료 타임아웃
    ## 예: scrapeTimeout: 10s
    ##
    scrapeTimeout: ""

    ## @param metrics.serviceMonitor.metricRelabelings [array] 메트릭의 추가 relabeling 지정
    ## 💡 불필요한 메트릭 필터링, 레이블 변경 등
    ##
    metricRelabelings: []

    ## @param metrics.serviceMonitor.relabelings [array] 일반 relabeling 지정
    ## 💡 수집 전 대상 레이블 변경
    ##
    relabelings: []

    ## @param metrics.serviceMonitor.selector Prometheus 인스턴스 셀렉터 레이블
    ## ref: https://github.com/bitnami/charts/tree/main/bitnami/prometheus-operator#prometheus-configuration
    ##
    selector: {}

    ## @param metrics.serviceMonitor.extraParameters ServiceMonitor 엔드포인트에 추가할 추가 파라미터
    ## 예: HTTPS 동작 추가 커스터마이징을 위한 tlsConfig
    ## ⚠️ 주의: 이 차트에서 'https.enabled' 플래그 사용 시 'scheme'이 자동으로 'https'로 설정됨
    ## ref: https://github.com/prometheus-operator/prometheus-operator/blob/main/Documentation/api.md#monitoring.coreos.com/v1.Endpoint
    ##
    extraParameters: {}
  ## ============================================================
  ## PrometheusRule CRD 설정
  ## ============================================================
  ## 💡 Thanos 컴포넌트에 대한 사전 정의된 알림 규칙
  ##
  prometheusRule:
    ## @param metrics.prometheusRule.enabled Prometheus Operator PrometheusRule 생성 여부
    ## ⚠️ 주의: `metrics.enabled`도 `true`여야 함
    ## 💡 Thanos 컴포넌트 장애 알림을 받으려면 활성화
    ##
    enabled: false

    ## ============================================================
    ## Prometheus Rule 설정
    ## ============================================================
    ## 💡 Thanos 각 컴포넌트에 대한 기본 알림 규칙
    ##
    default:
      ## @extra metrics.prometheusRule.default.absent_rules Enable absent_rules when metrics.prometheusRule.default.create is false (also requires `metrics.enabled` to be `true`)
      ## @extra metrics.prometheusRule.default.compaction Enable compaction rules when metrics.prometheusRule.default.create is false (also requires `metrics.enabled` to be `true`)
      ## @extra metrics.prometheusRule.default.query Enable query when metrics.prometheusRule.default.create is false (also requires `metrics.enabled` to be `true`)
      ## @extra metrics.prometheusRule.default.receive Enable receive rules when metrics.prometheusRule.default.create is false (also requires `metrics.enabled` to be `true`)
      ## @extra metrics.prometheusRule.default.replicate Enable replicate rules when metrics.prometheusRule.default.create is false (also requires `metrics.enabled` to be `true`)
      ## @extra metrics.prometheusRule.default.ruler Enable ruler rules when metrics.prometheusRule.default.create is false (also requires `metrics.enabled` to be `true`)
      ## @extra metrics.prometheusRule.default.sidecar Enable sidecar rules when metrics.prometheusRule.default.create is false (also requires `metrics.enabled` to be `true`)
      ## @param metrics.prometheusRule.default.sidecarJobRegex Allows the customization of the thanos-sidecar job name to use in the sidecar prometheus alerts
      sidecarJobRegex: ".*thanos-sidecar.*"
      ## @extra metrics.prometheusRule.default.store_gateway Enable store_gateway rules when metrics.prometheusRule.default.create is false (also requires `metrics.enabled` to be `true`)
      ## @param metrics.prometheusRule.default.create would create all default prometheus alerts
      ##
      create: false
      ## @extra metrics.prometheusRule.default.disabled.ThanosCompactIsDown Disable ThanosCompactIsDown rule when metrics.prometheusRule.default.create or metrics.prometheusRule.default.absent_rules is true
      ## @extra metrics.prometheusRule.default.disabled.ThanosQueryIsDown Disable ThanosQueryIsDown rule when metrics.prometheusRule.default.create or metrics.prometheusRule.default.absent_rules is true
      ## @extra metrics.prometheusRule.default.disabled.ThanosReceiveIsDown Disable ThanosReceiveIsDown rule when metrics.prometheusRule.default.create or metrics.prometheusRule.default.absent_rules is true
      ## @extra metrics.prometheusRule.default.disabled.ThanosRuleIsDown Disable ThanosRuleIsDown rule when metrics.prometheusRule.default.create or metrics.prometheusRule.default.absent_rules is true
      ## @extra metrics.prometheusRule.default.disabled.ThanosSidecarIsDown Disable ThanosSidecarIsDown rule when metrics.prometheusRule.default.create or metrics.prometheusRule.default.absent_rules is true
      ## @extra metrics.prometheusRule.default.disabled.ThanosStoreIsDown Disable ThanosStoreIsDown rule when metrics.prometheusRule.default.create or metrics.prometheusRule.default.absent_rules is true
      ## @extra metrics.prometheusRule.default.disabled.ThanosCompactMultipleRunning Disable ThanosCompactMultipleRunning rule when metrics.prometheusRule.default.create or metrics.prometheusRule.default.compaction is true
      ## @extra metrics.prometheusRule.default.disabled.ThanosCompactHalted Disable ThanosCompactMultipleRunning rule when metrics.prometheusRule.default.create or metrics.prometheusRule.default.compaction is true
      ## @extra metrics.prometheusRule.default.disabled.ThanosCompactHighCompactionFailures Disable ThanosCompactMultipleRunning rule when metrics.prometheusRule.default.create or metrics.prometheusRule.default.compaction is true
      ## @extra metrics.prometheusRule.default.disabled.ThanosCompactBucketHighOperationFailures Disable ThanosCompactMultipleRunning rule when metrics.prometheusRule.default.create or metrics.prometheusRule.default.compaction is true
      ## @extra metrics.prometheusRule.default.disabled.ThanosCompactHasNotRun Disable ThanosCompactMultipleRunning rule when metrics.prometheusRule.default.create or metrics.prometheusRule.default.compaction is true
      ## @extra metrics.prometheusRule.default.disabled.ThanosQueryHttpRequestQueryErrorRateHigh Disable ThanosQueryHttpRequestQueryErrorRateHigh rule when metrics.prometheusRule.default.create or metrics.prometheusRule.default.query is true
      ## @extra metrics.prometheusRule.default.disabled.ThanosQueryHttpRequestQueryRangeErrorRateHigh Disable ThanosQueryHttpRequestQueryRangeErrorRateHigh rule when metrics.prometheusRule.default.create or metrics.prometheusRule.default.query is true
      ## @extra metrics.prometheusRule.default.disabled.ThanosQueryGrpcServerErrorRate Disable ThanosQueryGrpcServerErrorRate rule when metrics.prometheusRule.default.create or metrics.prometheusRule.default.query is true
      ## @extra metrics.prometheusRule.default.disabled.ThanosQueryGrpcClientErrorRate Disable ThanosQueryGrpcClientErrorRate rule when metrics.prometheusRule.default.create or metrics.prometheusRule.default.query is true
      ## @extra metrics.prometheusRule.default.disabled.ThanosQueryHighDNSFailures Disable ThanosQueryHighDNSFailures rule when metrics.prometheusRule.default.create or metrics.prometheusRule.default.query is true
      ## @extra metrics.prometheusRule.default.disabled.ThanosQueryInstantLatencyHigh Disable ThanosQueryInstantLatencyHigh rule when metrics.prometheusRule.default.create or metrics.prometheusRule.default.query is true
      ## @extra metrics.prometheusRule.default.disabled.ThanosQueryRangeLatencyHigh Disable ThanosQueryRangeLatencyHigh rule when metrics.prometheusRule.default.create or metrics.prometheusRule.default.query is true
      ## @extra metrics.prometheusRule.default.disabled.ThanosQueryOverload Disable ThanosQueryOverload rule when metrics.prometheusRule.default.create or metrics.prometheusRule.default.query is true
      ## @extra metrics.prometheusRule.default.disabled.ThanosReceiveHttpRequestErrorRateHigh Disable ThanosReceiveHttpRequestErrorRateHigh rule when metrics.prometheusRule.default.create or metrics.prometheusRule.default.receive is true
      ## @extra metrics.prometheusRule.default.disabled.ThanosReceiveHttpRequestLatencyHigh Disable ThanosReceiveHttpRequestLatencyHigh rule when metrics.prometheusRule.default.create or metrics.prometheusRule.default.receive is true
      ## @extra metrics.prometheusRule.default.disabled.ThanosReceiveHighReplicationFailures Disable ThanosReceiveHighReplicationFailures rule when metrics.prometheusRule.default.create or metrics.prometheusRule.default.receive is true
      ## @extra metrics.prometheusRule.default.disabled.ThanosReceiveHighForwardRequestFailures Disable ThanosReceiveHighForwardRequestFailures rule when metrics.prometheusRule.default.create or metrics.prometheusRule.default.receive is true
      ## @extra metrics.prometheusRule.default.disabled.ThanosReceiveHighHashringFileRefreshFailures Disable ThanosReceiveHighHashringFileRefreshFailures rule when metrics.prometheusRule.default.create or metrics.prometheusRule.default.receive is true
      ## @extra metrics.prometheusRule.default.disabled.ThanosReceiveConfigReloadFailure Disable ThanosReceiveConfigReloadFailure rule when metrics.prometheusRule.default.create or metrics.prometheusRule.default.receive is true
      ## @extra metrics.prometheusRule.default.disabled.ThanosReceiveNoUpload Disable ThanosReceiveNoUpload rule when metrics.prometheusRule.default.create or metrics.prometheusRule.default.receive is true
      ## @extra metrics.prometheusRule.default.disabled.ThanosReceiveTrafficBelowThreshold Disable ThanosReceiveTrafficBelowThreshold rule when metrics.prometheusRule.default.create or metrics.prometheusRule.default.receive is true
      ## @extra metrics.prometheusRule.default.disabled.ThanosBucketReplicateErrorRate Disable ThanosBucketReplicateErrorRate rule when metrics.prometheusRule.default.create or metrics.prometheusRule.default.receive is true
      ## @extra metrics.prometheusRule.default.disabled.ThanosBucketReplicateRunLatency Disable ThanosBucketReplicateRunLatency rule when metrics.prometheusRule.default.create or metrics.prometheusRule.default.receive is true
      ## @extra metrics.prometheusRule.default.disabled.ThanosRuleQueueIsDroppingAlerts Disable ThanosRuleQueueIsDroppingAlerts rule when metrics.prometheusRule.default.create or metrics.prometheusRule.default.ruler is true
      ## @extra metrics.prometheusRule.default.disabled.ThanosRuleSenderIsFailingAlerts Disable ThanosRuleSenderIsFailingAlerts rule when metrics.prometheusRule.default.create or metrics.prometheusRule.default.ruler is true
      ## @extra metrics.prometheusRule.default.disabled.ThanosRuleHighRuleEvaluationFailures Disable ThanosRuleHighRuleEvaluationFailures rule when metrics.prometheusRule.default.create or metrics.prometheusRule.default.ruler is true
      ## @extra metrics.prometheusRule.default.disabled.ThanosRuleHighRuleEvaluationWarnings Disable ThanosRuleHighRuleEvaluationWarnings rule when metrics.prometheusRule.default.create or metrics.prometheusRule.default.ruler is true
      ## @extra metrics.prometheusRule.default.disabled.ThanosRuleRuleEvaluationLatencyHigh Disable ThanosRuleRuleEvaluationLatencyHigh rule when metrics.prometheusRule.default.create or metrics.prometheusRule.default.ruler is true
      ## @extra metrics.prometheusRule.default.disabled.ThanosRuleGrpcErrorRate Disable ThanosRuleGrpcErrorRate rule when metrics.prometheusRule.default.create or metrics.prometheusRule.default.ruler is true
      ## @extra metrics.prometheusRule.default.disabled.ThanosRuleConfigReloadFailure Disable ThanosRuleConfigReloadFailure rule when metrics.prometheusRule.default.create or metrics.prometheusRule.default.ruler is true
      ## @extra metrics.prometheusRule.default.disabled.ThanosRuleQueryHighDNSFailures Disable ThanosRuleQueryHighDNSFailures rule when metrics.prometheusRule.default.create or metrics.prometheusRule.default.ruler is true
      ## @extra metrics.prometheusRule.default.disabled.ThanosRuleAlertmanagerHighDNSFailures Disable ThanosRuleAlertmanagerHighDNSFailures rule when metrics.prometheusRule.default.create or metrics.prometheusRule.default.ruler is true
      ## @extra metrics.prometheusRule.default.disabled.ThanosRuleNoEvaluationFor10Intervals Disable ThanosRuleNoEvaluationFor10Intervals rule when metrics.prometheusRule.default.create or metrics.prometheusRule.default.ruler is true
      ## @extra metrics.prometheusRule.default.disabled.ThanosNoRuleEvaluations Disable ThanosNoRuleEvaluations rule when metrics.prometheusRule.default.create or metrics.prometheusRule.default.ruler is true
      ## @extra metrics.prometheusRule.default.disabled.ThanosSidecarBucketOperationsFailed Disable ThanosSidecarBucketOperationsFailed rule when metrics.prometheusRule.default.create or metrics.prometheusRule.default.sidecar is true
      ## @extra metrics.prometheusRule.default.disabled.ThanosSidecarNoConnectionToStartedPrometheus Disable ThanosSidecarNoConnectionToStartedPrometheus rule when metrics.prometheusRule.default.create or metrics.prometheusRule.default.sidecar is true
      ## @extra metrics.prometheusRule.default.disabled.ThanosStoreGrpcErrorRate Disable ThanosSidecarNoConnectionToStartedPrometheus rule when metrics.prometheusRule.default.create or metrics.prometheusRule.default.store_gateway  is true
      ## @extra metrics.prometheusRule.default.disabled.ThanosStoreSeriesGateLatencyHigh Disable ThanosStoreSeriesGateLatencyHigh rule when metrics.prometheusRule.default.create or metrics.prometheusRule.default.store_gateway  is true
      ## @extra metrics.prometheusRule.default.disabled.ThanosStoreBucketHighOperationFailures Disable ThanosStoreBucketHighOperationFailures rule when metrics.prometheusRule.default.create or metrics.prometheusRule.default.store_gateway  is true
      ## @extra metrics.prometheusRule.default.disabled.ThanosStoreObjstoreOperationLatencyHigh Disable ThanosStoreObjstoreOperationLatencyHigh rule when metrics.prometheusRule.default.create or metrics.prometheusRule.default.store_gateway  is true
      ## @param metrics.prometheusRule.default.disabled disable one specific prometheus alert rule
      ##
      disabled: {}
    ## @param metrics.prometheusRule.runbookUrl Prefix for runbook URLs. Use this to override the first part of the runbookURLs that is common to all rules
    ##
    runbookUrl: "https://github.com/thanos-io/thanos/tree/main/mixin/runbook.md#alert-name-"
    ## @param metrics.prometheusRule.namespace Namespace in which the PrometheusRule CRD is created
    ##
    namespace: ""
    ## @param metrics.prometheusRule.additionalLabels Additional labels for the prometheusRule
    ##
    additionalLabels: {}
    ## @param metrics.prometheusRule.groups Prometheus Rule Groups for Thanos components
    ## These are just examples rules, please adapt them to your needs.
    ##   groups:
    ##     - name: Compactor
    ##       rules:
    ##         - alert: ThanosCompactMultipleRunning
    ##           annotations:
    ##             description: No more than one Thanos Compact instance should be running at once. There are {{`{{`}}$value{{`}}`}} instances running.
    ##             runbook_url: {{ .Values.metrics.prometheusRule.runbookUrl }}thanoscompactmultiplerunning
    ##             summary: Thanos Compact has multiple instances running.
    ##           expr: sum by (job) (up{job=~"{{ template "common.names.fullname" . }}-compact.*"}) > 1
    ##           for: 5m
    ##           labels:
    ##             severity: warning
    groups: []
## @section Volume Permissions parameters

## 'volumePermissions' init container parameters
## Changes the owner and group of the persistent volume mount point to runAsUser:fsGroup values
##   based on the *podSecurityContext/*containerSecurityContext parameters
##
volumePermissions:
  ## @param volumePermissions.enabled Enable init container that changes the owner/group of the PV mount point to `runAsUser:fsGroup`
  ##
  enabled: false
  ## @param volumePermissions.image.registry [default: REGISTRY_NAME] Init container volume-permissions image registry
  ## @param volumePermissions.image.repository [default: REPOSITORY_NAME/os-shell] Init container volume-permissions image repository
  ## @skip volumePermissions.image.tag Init container volume-permissions image tag
  ## @param volumePermissions.image.digest Init container volume-permissions image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag
  ## @param volumePermissions.image.pullPolicy Init container volume-permissions image pull policy
  ## @param volumePermissions.image.pullSecrets Specify docker-registry secret names as an array
  ##
  image:
    registry: docker.io
    repository: bitnami/os-shell
    tag: 12-debian-12-r50
    digest: ""
    ## ref: https://kubernetes.io/docs/concepts/containers/images/#pre-pulled-images
    ##
    pullPolicy: IfNotPresent
    ## Optionally specify an array of imagePullSecrets.
    ## Secrets must be manually created in the namespace.
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
    ## e.g:
    ## pullSecrets:
    ##   - myRegistryKeySecretName
    ##
    pullSecrets: []
## @section MinIO&reg; chart parameters
## @extra minio For full list of MinIO&reg; values configurations please refer [here](https://github.com/bitnami/charts/tree/main/bitnami/minio)
minio:
  ## @param minio.enabled Enable/disable MinIO&reg; chart installation
  ## to be used as an objstore for Thanos
  ##
  enabled: false
  ## MinIO&reg; authentication parameters
  ##
  auth:
    ## @param minio.auth.rootUser MinIO&reg; root username
    ##
    rootUser: admin
    ## @param minio.auth.rootPassword Password for MinIO&reg; root user
    ##
    rootPassword: ""
  ## @param minio.defaultBuckets Comma, semi-colon or space separated list of MinIO&reg; buckets to create
  ##
  defaultBuckets: "thanos"
  ## MinIO&reg; containers' resource requests and limits
  ## ref: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
  ## We usually recommend not to specify default resources and to leave this as a conscious
  ## choice for the user. This also increases chances charts run on environments with little
  ## resources, such as Minikube. If you do want to specify resources, uncomment the following
  ## lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  ## @param minio.resourcesPreset Set container resources according to one common preset (allowed values: none, nano, small, medium, large, xlarge, 2xlarge). This is ignored if resources is set (resources is recommended for production).
  ## More information: https://github.com/bitnami/charts/blob/main/bitnami/common/templates/_resources.tpl#L15
  ##
  resourcesPreset: "micro"
  ## @param minio.resources Set container requests and limits for different resources like CPU or memory (essential for production workloads)
  ## Example:
  ## resources:
  ##   requests:
  ##     cpu: 2
  ##     memory: 512Mi
  ##   limits:
  ##     cpu: 3
  ##     memory: 1024Mi
  ##
  resources: {}
  ## @param minio.console.enabled Enable MinIO&reg; Console
  ##
  console:
    enabled: false
