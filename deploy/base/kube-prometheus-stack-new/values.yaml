# ============================================================================
# kube-prometheus-stack Base Values
# ============================================================================
#
# 목적:
#   - 모든 클러스터의 기본 설정
#   - 중앙/엣지 클러스터가 공통으로 사용하는 값
#   - Overlay에서 필요한 부분만 재정의
#
# 사용 방법:
#   - 중앙 클러스터: 이 파일 + values-central.yaml
#   - 엣지 클러스터: 이 파일 + values-edge.yaml
#
# ============================================================================

# ============================================================================
# Global 설정
# ============================================================================
global:
  # RBAC 활성화
  # - Kubernetes RBAC 사용
  # - ServiceAccount, Role, RoleBinding 자동 생성
  rbac:
    create: true

# ============================================================================
# Prometheus Operator 설정
# ============================================================================
# Prometheus Operator는 CRD 기반으로 Prometheus를 관리합니다
# - Prometheus, Alertmanager, ServiceMonitor 등의 CRD 제공
# - 선언적 관리 방식
# - 자동 설정 업데이트
prometheusOperator:
  # Operator 활성화
  # - false로 설정 시 Operator가 배포되지 않음
  # - 반드시 true로 유지 (ServiceMonitor 자동 감지에 필수)
  enabled: true

  # Operator 이미지
  image:
    repository: quay.io/prometheus-operator/prometheus-operator
    tag: v0.77.2
    pullPolicy: IfNotPresent

  # Prometheus Config Reloader 설정
  # - Prometheus 설정 변경 시 자동 리로드
  prometheusConfigReloader:
    image:
      repository: quay.io/prometheus-operator/prometheus-config-reloader
      tag: v0.77.2

  # 리소스 제한
  resources:
    limits:
      cpu: 200m
      memory: 200Mi
    requests:
      cpu: 100m
      memory: 100Mi

  # ServiceMonitor 생성
  # - Operator 자체 메트릭 수집
  serviceMonitor:
    enabled: true

# ============================================================================
# Prometheus 설정
# ============================================================================
# Prometheus 서버 설정
# - Full 모드 또는 Agent 모드로 실행 가능
# - ServiceMonitor/PodMonitor 자동 감지
prometheus:
  enabled: true

  # Service 설정
  service:
    type: ClusterIP
    port: 9090
    targetPort: 9090

  # ServiceMonitor 생성
  # - Prometheus 자체 메트릭 수집
  serviceMonitor:
    enabled: true
    interval: 30s

  # Prometheus 상세 설정
  prometheusSpec:
    # ========================================================================
    # 자동 Service Discovery 설정 (핵심!)
    # ========================================================================
    # ServiceMonitor 선택자
    # - nilUsesHelmValues: false → 모든 네임스페이스의 모든 ServiceMonitor 자동 감지
    # - true로 설정 시 release label이 일치하는 것만 감지
    # 권장: false (자동 감지 활성화)
    serviceMonitorSelectorNilUsesHelmValues: false
    serviceMonitorNamespaceSelector: {}  # 모든 네임스페이스

    # PodMonitor 선택자
    # - nilUsesHelmValues: false → 모든 PodMonitor 자동 감지
    podMonitorSelectorNilUsesHelmValues: false
    podMonitorNamespaceSelector: {}  # 모든 네임스페이스

    # Probe 선택자
    # - 외부 엔드포인트 모니터링용
    probeSelectorNilUsesHelmValues: false
    probeNamespaceSelector: {}

    # Rule 선택자
    # - PrometheusRule 자동 감지
    ruleSelectorNilUsesHelmValues: false
    ruleNamespaceSelector: {}

    # ========================================================================
    # 리소스 설정
    # ========================================================================
    # Prometheus Pod 리소스 제한
    # 환경별 권장값:
    #   소규모 (노드 < 10):
    #     requests: cpu=500m, memory=1Gi
    #     limits: cpu=1, memory=2Gi
    #   중규모 (노드 10-50):
    #     requests: cpu=1, memory=2Gi
    #     limits: cpu=2, memory=4Gi
    #   대규모 (노드 > 50):
    #     requests: cpu=2, memory=4Gi
    #     limits: cpu=4, memory=8Gi
    resources:
      requests:
        cpu: 500m
        memory: 1Gi
      limits:
        cpu: 1
        memory: 2Gi

    # ========================================================================
    # 저장소 설정
    # ========================================================================
    # Retention (데이터 보관 기간)
    # - Agent 모드: 최소값 (2h-6h, Remote Write만 사용)
    # - Full 모드: 15일-30일 권장
    # - Thanos 사용 시: 7-15일 (장기 데이터는 S3)
    retention: 15d

    # Retention Size (저장소 크기 제한)
    # - 디스크 공간이 이 크기에 도달하면 오래된 데이터 삭제
    # - 예: 50GB, 100GB
    # - 설정하지 않으면 retention 기간만 적용
    # retentionSize: "50GB"

    # 스토리지 설정
    # - PVC로 영구 저장소 사용
    # - Agent 모드에서도 WAL 저장용으로 필요 (작은 용량)
    storageSpec:
      volumeClaimTemplate:
        spec:
          # 스토리지 클래스
          # - longhorn: Longhorn 분산 스토리지
          # - 다른 옵션: local-path, nfs, ceph-rbd
          storageClassName: longhorn

          # 접근 모드
          # - ReadWriteOnce: 단일 노드에서만 읽기/쓰기
          accessModes:
            - ReadWriteOnce

          # 스토리지 크기
          # 권장 크기:
          #   Agent 모드: 5-10Gi (WAL만)
          #   Full 모드 (소규모): 20-50Gi
          #   Full 모드 (중규모): 50-100Gi
          #   Full 모드 (대규모): 100-500Gi
          resources:
            requests:
              storage: 20Gi

    # ========================================================================
    # Replica 설정
    # ========================================================================
    # Prometheus Pod 개수
    # - 1: 단일 인스턴스 (개발/테스트)
    # - 2: HA 구성 (권장, 프로덕션)
    # - Thanos 사용 시 Deduplication 자동 처리
    replicas: 1

    # ========================================================================
    # 평가 간격 설정
    # ========================================================================
    # Scrape 간격
    # - 메트릭 수집 주기
    # - 기본값: 30초
    # - 높은 해상도: 15초
    # - 낮은 부하: 60초
    scrapeInterval: 30s

    # Scrape 타임아웃
    # - 메트릭 수집 제한 시간
    # - scrapeInterval보다 작아야 함
    scrapeTimeout: 10s

    # Rule 평가 간격
    # - Recording Rule 및 Alerting Rule 평가 주기
    # - 기본값: 30초
    evaluationInterval: 30s

    # ========================================================================
    # 보안 설정
    # ========================================================================
    # SecurityContext
    securityContext:
      runAsNonRoot: true
      runAsUser: 1000
      fsGroup: 2000

# ============================================================================
# Alertmanager 설정
# ============================================================================
# Alert 관리 및 라우팅
# - Prometheus에서 발생한 Alert 수신
# - Alert 그룹화, 억제, 라우팅
# - 여러 채널로 알림 전송 (Slack, Email, PagerDuty 등)
alertmanager:
  # Alertmanager 활성화
  # - 중앙 클러스터: true
  # - 엣지 클러스터: false (중앙에서만 관리)
  enabled: true

  # Service 설정
  service:
    type: ClusterIP
    port: 9093

  # ServiceMonitor 생성
  serviceMonitor:
    enabled: true

  # Alertmanager 상세 설정
  alertmanagerSpec:
    # 리소스 설정
    resources:
      requests:
        cpu: 100m
        memory: 128Mi
      limits:
        cpu: 200m
        memory: 256Mi

    # 저장소 설정
    # - Alert 상태 저장
    storage:
      volumeClaimTemplate:
        spec:
          storageClassName: longhorn
          accessModes:
            - ReadWriteOnce
          resources:
            requests:
              storage: 5Gi

    # Replica 수
    # - 1: 단일 인스턴스
    # - 2-3: HA 구성 (권장)
    replicas: 1

# ============================================================================
# Grafana 설정
# ============================================================================
# 대시보드 및 시각화 도구
# - Prometheus 데이터 시각화
# - 대시보드 관리
grafana:
  # Grafana 활성화
  # - 중앙 클러스터: true
  # - 엣지 클러스터: false (중앙에서만 관리)
  enabled: true

  # Admin 계정 설정
  adminPassword: admin123

  # Service 설정
  service:
    type: ClusterIP
    port: 80

  # Persistence 설정
  # - 대시보드 및 설정 영구 저장
  persistence:
    enabled: true
    storageClassName: longhorn
    size: 5Gi

  # 리소스 설정
  resources:
    requests:
      cpu: 100m
      memory: 128Mi
    limits:
      cpu: 200m
      memory: 256Mi

  # 데이터소스 자동 설정
  # - Prometheus 자동 추가
  datasources:
    datasources.yaml:
      apiVersion: 1
      datasources:
        # 기본 Prometheus (로컬)
        - name: Prometheus
          type: prometheus
          url: http://kube-prometheus-stack-prometheus:9090
          access: proxy
          isDefault: false
          editable: true

  # ServiceMonitor 생성
  serviceMonitor:
    enabled: true

# ============================================================================
# node-exporter 설정
# ============================================================================
# 노드 시스템 메트릭 수집
# - CPU, 메모리, 디스크, 네트워크 등
# - 모든 노드에 DaemonSet으로 배포
prometheus-node-exporter:
  enabled: true

  # hostNetwork 사용
  # - 호스트 네트워크 네임스페이스 사용
  # - 실제 노드 메트릭 수집에 필요
  hostNetwork: true
  hostPID: true
  hostRootFsMount:
    enabled: true

  # Service 설정
  service:
    port: 9100
    targetPort: 9100

  # ServiceMonitor 자동 생성
  prometheus:
    monitor:
      enabled: true
      interval: 30s

  # 리소스 설정
  resources:
    requests:
      cpu: 100m
      memory: 128Mi
    limits:
      cpu: 200m
      memory: 256Mi

# ============================================================================
# kube-state-metrics 설정
# ============================================================================
# Kubernetes 리소스 메트릭 수집
# - Pod, Deployment, Service, Node 등의 상태
# - Kubernetes API에서 메트릭 생성
kube-state-metrics:
  enabled: true

  # Service 설정
  service:
    port: 8080

  # ServiceMonitor 자동 생성
  prometheus:
    monitor:
      enabled: true
      interval: 30s

  # 리소스 설정
  resources:
    requests:
      cpu: 100m
      memory: 128Mi
    limits:
      cpu: 200m
      memory: 256Mi

# ============================================================================
# Kubernetes 컴포넌트 ServiceMonitor 설정
# ============================================================================
# Kubernetes 내장 컴포넌트 메트릭 수집 설정

# kube-apiserver 메트릭
kubeApiServer:
  enabled: true
  serviceMonitor:
    interval: 30s

# kubelet 메트릭 (cAdvisor 포함)
kubelet:
  enabled: true
  serviceMonitor:
    # Kubelet 메트릭
    interval: 30s
    # cAdvisor 메트릭 (컨테이너 리소스)
    cAdvisor: true
    cAdvisorInterval: 30s
    # Probes 메트릭
    probes: true
    probesInterval: 30s

# kube-controller-manager 메트릭
kubeControllerManager:
  enabled: true
  serviceMonitor:
    interval: 30s

# coreDNS 메트릭
coreDns:
  enabled: true
  serviceMonitor:
    interval: 30s

# kube-etcd 메트릭
kubeEtcd:
  enabled: true
  serviceMonitor:
    interval: 30s

# kube-scheduler 메트릭
kubeScheduler:
  enabled: true
  serviceMonitor:
    interval: 30s

# kube-proxy 메트릭
kubeProxy:
  enabled: true
  serviceMonitor:
    interval: 30s

# ============================================================================
# 기본 PrometheusRules 설정
# ============================================================================
# 기본 Alert 및 Recording Rules
defaultRules:
  # 기본 Rule 생성
  create: true

  # Rule 그룹별 활성화
  rules:
    # Alertmanager Rules
    alertmanager: true
    # etcd Rules
    etcd: true
    # Kubernetes 앱 Rules
    kubernetesApps: true
    # Kubernetes 리소스 Rules
    kubernetesResources: true
    # Kubernetes 시스템 Rules
    kubernetesSystem: true
    # Node Rules
    node: true
    # Prometheus Rules
    prometheus: true

# ============================================================================
# 추가 ServiceMonitor 설정
# ============================================================================
# 사용자 정의 ServiceMonitor는 별도 YAML로 생성
# 예시:
#
# apiVersion: monitoring.coreos.com/v1
# kind: ServiceMonitor
# metadata:
#   name: my-app
#   namespace: monitoring
# spec:
#   selector:
#     matchLabels:
#       app: my-app
#   endpoints:
#     - port: metrics
#       interval: 30s
#
# 이 ServiceMonitor는 자동으로 Prometheus에서 감지됨
# (serviceMonitorSelectorNilUsesHelmValues: false 덕분)

# ============================================================================
# 운영 가이드
# ============================================================================
#
# 1. ServiceMonitor 추가 방법:
#    kubectl apply -f my-servicemonitor.yaml
#    → 자동으로 Prometheus가 감지하고 Scrape 시작
#
# 2. 설정 변경 후 적용:
#    helm upgrade kube-prometheus-stack . -f values.yaml -n monitoring
#
# 3. Prometheus 상태 확인:
#    kubectl port-forward -n monitoring svc/kube-prometheus-stack-prometheus 9090:9090
#    → http://localhost:9090
#
# 4. Grafana 접속:
#    kubectl port-forward -n monitoring svc/kube-prometheus-stack-grafana 3000:80
#    → http://localhost:3000 (admin/admin123)
#
# 5. Alertmanager 접속:
#    kubectl port-forward -n monitoring svc/kube-prometheus-stack-alertmanager 9093:9093
#    → http://localhost:9093
#
# 6. Target 확인:
#    Prometheus UI → Status → Targets
#    → 모든 ServiceMonitor가 자동으로 표시됨
#
# 7. ServiceMonitor 확인:
#    kubectl get servicemonitor -A
#
# 8. PrometheusRule 확인:
#    kubectl get prometheusrule -A
#
# ============================================================================
# 문제 해결
# ============================================================================
#
# 1. ServiceMonitor가 감지되지 않을 때:
#    - serviceMonitorSelectorNilUsesHelmValues 확인 (false여야 함)
#    - ServiceMonitor의 네임스페이스 확인
#    - Prometheus Operator 로그 확인
#
# 2. Prometheus OOMKilled:
#    - resources.limits.memory 증가
#    - retention 기간 단축
#    - 불필요한 메트릭 제거
#
# 3. 메트릭이 수집되지 않을 때:
#    - Service 포트 확인
#    - ServiceMonitor selector 확인
#    - Target에서 에러 메시지 확인
#
# ============================================================================
