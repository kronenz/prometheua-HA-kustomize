# ============================================================================
# Prometheus Agent 설정 - Edge Cluster (Cluster-02)
# ============================================================================
#
# 목적: 엣지 클러스터에서 메트릭을 수집하여 중앙 Thanos Receiver로 전송
#
# Prometheus Agent vs Full Prometheus:
#   - Agent 모드: 로컬 저장소 없이 remote_write만 수행 (메모리 효율적)
#   - Full 모드: 로컬 TSDB + 쿼리 API 제공 (더 많은 리소스 필요)
#   - Edge 환경에서는 Agent 모드가 적합 (낮은 리소스, 중앙 집중식 쿼리)
#
# 데이터 흐름:
#   Edge Prometheus Agent → Remote Write → Thanos Receiver (중앙) → Thanos Query → Grafana
#
# ============================================================================

apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-agent-config
  namespace: monitoring
data:
  prometheus.yml: |
    # ========================================================================
    # Global 설정
    # ========================================================================
    global:
      # 메트릭 수집 주기 (기본값: 30초)
      # - 15초: 고해상도 모니터링 필요 시 (높은 부하)
      # - 30초: 일반적인 프로덕션 환경 권장
      # - 60초: 리소스 제약이 있는 환경
      scrape_interval: 30s

      # 스크랩 타임아웃 (기본값: 10초)
      # - scrape_interval보다 작아야 함
      # - 네트워크 지연이 있는 환경에서는 15초로 증가 고려
      scrape_timeout: 10s

      # Rule 평가 주기 (Agent 모드에서는 사용 안 함)
      # - Agent 모드는 recording/alerting rule을 평가하지 않음
      # - 중앙 Thanos Ruler에서 rule 평가 수행
      evaluation_interval: 30s

      # 외부 레이블 (모든 메트릭에 자동 추가)
      # - 중앙에서 클러스터 구분을 위해 필수
      # - Thanos에서 deduplication 및 쿼리 필터링에 사용
      external_labels:
        cluster: cluster-02           # 클러스터 식별자 (고유해야 함)
        region: edge                  # 리전 구분 (central/edge)

    # ========================================================================
    # Remote Write 설정 (Thanos Receiver로 전송)
    # ========================================================================
    # 중요: Prometheus Agent의 핵심 기능
    # - 수집한 메트릭을 원격 Thanos Receiver로 실시간 전송
    # - 로컬 저장소를 사용하지 않아 메모리 효율적
    # ========================================================================
    remote_write:
      # Thanos Receiver 엔드포인트
      # - Ingress를 통한 접근 (HTTP 80 포트)
      # - 이전에는 직접 포트(19291)를 사용했으나 Ingress로 변경
      - url: http://thanos-receiver.k8s-cluster-01.miribit.lab/api/v1/receive

        # Queue 설정 (메모리 및 성능 최적화)
        queue_config:
          # Queue 용량 (샘플 수)
          # - 기본값: 10000
          # - 높은 부하: 50000-100000 (더 많은 메모리 필요)
          # - 메트릭 손실 방지를 위해 적절한 크기 설정 필요
          capacity: 10000

          # 최대 샤드 수 (병렬 전송)
          # - 기본값: 10
          # - 높은 처리량 필요 시: 20-50
          # - 각 샤드는 별도의 고루틴으로 동작
          # - 너무 많으면 네트워크 및 Receiver 부하 증가
          max_shards: 10

          # 최소 샤드 수
          # - 기본값: 1
          # - 낮은 부하에서도 최소한의 병렬성 유지
          min_shards: 1

          # 한 번에 전송할 최대 샘플 수
          # - 기본값: 5000
          # - 배치 크기 조정으로 네트워크 효율성 개선
          # - 너무 크면 타임아웃 가능성 증가
          max_samples_per_send: 5000

          # 배치 전송 마감 시간
          # - 기본값: 5초
          # - 샘플이 max_samples_per_send에 도달하지 않아도 이 시간이 지나면 전송
          # - 실시간성과 효율성의 균형
          batch_send_deadline: 5s

          # 재시도 백오프 시간 (최소)
          # - 전송 실패 시 재시도 대기 시간
          # - 지수 백오프로 max_backoff까지 증가
          min_backoff: 30ms

          # 재시도 백오프 시간 (최대)
          # - 기본값: 5초
          # - 장애 상황에서 Receiver 부하 방지
          max_backoff: 5s

        # Write Relabel 설정 (전송 전 메트릭 필터링)
        # - 불필요한 메트릭 제거로 네트워크 대역폭 절약
        # - Receiver 저장 공간 절약
        write_relabel_configs:
          # Prometheus 내부 메트릭 제거
          # - up: 스크랩 대상 상태 (불필요)
          # - scrape_*: 스크랩 관련 메트릭 (불필요)
          - source_labels: [__name__]
            regex: up|scrape_.*
            action: drop

    # ========================================================================
    # Scrape 설정 (메트릭 수집 대상)
    # ========================================================================
    scrape_configs:
      # --------------------------------------------------------------------
      # Job 1: Kubelet 메트릭
      # --------------------------------------------------------------------
      # 목적: Kubernetes 노드의 기본 메트릭 수집
      # 수집 내용: 노드 상태, Pod 상태, 볼륨 사용량
      # --------------------------------------------------------------------
      - job_name: 'kubelet'
        # HTTPS로 Kubelet에 접근
        scheme: https

        # TLS 설정
        # - Kubelet은 자체 서명 인증서 사용
        # - 프로덕션에서는 적절한 CA 인증서 사용 권장
        tls_config:
          insecure_skip_verify: true

        # ServiceAccount 토큰으로 인증
        # - Kubernetes RBAC으로 권한 관리
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

        # Service Discovery: Kubernetes Node
        # - 자동으로 클러스터 내 모든 노드 발견
        kubernetes_sd_configs:
          - role: node

        # Relabel 설정 (메타데이터 변환)
        relabel_configs:
          # Kubelet 포트(10250) 확인 및 설정
          - source_labels: [__address__]
            regex: '(.*):10250'
            replacement: '${1}:10250'
            target_label: __address__

          # 노드 이름을 'node' 레이블로 추가
          - source_labels: [__meta_kubernetes_node_name]
            target_label: node

          # 노드 이름을 'instance' 레이블로 추가
          - source_labels: [__meta_kubernetes_node_name]
            target_label: instance

      # --------------------------------------------------------------------
      # Job 2: cAdvisor 메트릭
      # --------------------------------------------------------------------
      # 목적: 컨테이너 리소스 사용량 메트릭 수집
      # 수집 내용: CPU, 메모리, 네트워크, 디스크 I/O
      # 중요: Kubernetes 리소스 모니터링의 핵심
      # --------------------------------------------------------------------
      - job_name: 'cadvisor'
        scheme: https
        tls_config:
          insecure_skip_verify: true
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        kubernetes_sd_configs:
          - role: node
        relabel_configs:
          - source_labels: [__address__]
            regex: '(.*):10250'
            replacement: '${1}:10250'
            target_label: __address__
          - source_labels: [__meta_kubernetes_node_name]
            target_label: node
          - source_labels: [__meta_kubernetes_node_name]
            target_label: instance

          # cAdvisor 메트릭 엔드포인트 지정
          # - Kubelet과 같은 포트, 다른 경로
          - target_label: __metrics_path__
            replacement: /metrics/cadvisor

      # --------------------------------------------------------------------
      # Job 3: Node Exporter 메트릭
      # --------------------------------------------------------------------
      # 목적: 노드 시스템 레벨 메트릭 수집
      # 수집 내용: CPU, 메모리, 디스크, 네트워크, 파일시스템
      # DaemonSet으로 배포되어 각 노드에서 실행
      # --------------------------------------------------------------------
      - job_name: 'node-exporter'
        # Service Discovery: Kubernetes Pod
        # - monitoring 네임스페이스의 Pod만 검색
        kubernetes_sd_configs:
          - role: pod
            namespaces:
              names:
                - monitoring

        # Relabel 설정
        relabel_configs:
          # app=node-exporter 레이블을 가진 Pod만 수집
          - source_labels: [__meta_kubernetes_pod_label_app]
            action: keep
            regex: node-exporter

          # Pod가 실행 중인 노드 이름 추가
          - source_labels: [__meta_kubernetes_pod_node_name]
            target_label: node
          - source_labels: [__meta_kubernetes_pod_node_name]
            target_label: instance

          # Node Exporter의 IP와 포트 설정
          # - hostNetwork 모드로 실행되므로 노드 IP 사용
          - source_labels: [__meta_kubernetes_pod_ip]
            target_label: __address__
            replacement: $1:9100

      # --------------------------------------------------------------------
      # Job 4: Kube-State-Metrics
      # --------------------------------------------------------------------
      # 목적: Kubernetes 리소스 상태 메트릭 수집
      # 수집 내용: Deployment, Pod, Service, ConfigMap 등의 상태
      # 중요: Kubernetes 오브젝트 모니터링의 핵심
      # --------------------------------------------------------------------
      - job_name: 'kube-state-metrics'
        # Static 설정 (Service 이름으로 직접 접근)
        # - kube-state-metrics는 단일 Deployment로 실행
        # - Service DNS를 통해 접근
        static_configs:
          - targets: ['kube-state-metrics.monitoring.svc:8080']

        relabel_configs:
          # Instance 이름 고정
          - target_label: instance
            replacement: kube-state-metrics

# ============================================================================
# 운영 가이드
# ============================================================================
#
# 1. ConfigMap 업데이트 후 적용:
#    kubectl apply -f prometheus-agent-config.yaml
#    kubectl rollout restart statefulset/prometheus-agent -n monitoring
#
# 2. 메트릭 전송 확인:
#    kubectl logs -n monitoring prometheus-agent-0 | grep "remote_write"
#
# 3. Thanos Receiver 연결 확인:
#    # Receiver 로그에서 incoming 확인
#    kubectl logs -n monitoring thanos-receiver-0 | grep "receive"
#
# 4. 성능 튜닝:
#    - 높은 카디널리티: max_shards 증가 (20-50)
#    - 메모리 부족: capacity 감소, scrape_interval 증가
#    - 네트워크 대역폭 제한: batch_send_deadline 증가
#
# 5. 문제 해결:
#    - "context deadline exceeded": scrape_timeout 증가
#    - "queue full": capacity 증가 또는 max_shards 증가
#    - "connection refused": Thanos Receiver URL 확인
#
# 6. 보안 고려사항:
#    - 프로덕션에서는 TLS 인증서 검증 활성화
#    - RBAC 권한 최소화
#    - 민감한 메트릭은 relabel로 제거
#
# ============================================================================
