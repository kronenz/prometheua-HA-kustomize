# ============================================================================
# Thanos S3 Secret - 오브젝트 스토리지 접속 정보
# ============================================================================
#
# 목적:
#   - Thanos 컴포넌트가 S3 호환 스토리지에 접근하기 위한 인증 정보
#   - 모든 Thanos 컴포넌트(Receiver, Store, Compactor, Ruler)가 공유
#   - 장기 메트릭 데이터 저장 및 조회
#
# 사용 컴포넌트:
#   - Thanos Receiver: 수신한 메트릭을 S3에 업로드
#   - Thanos Store: S3에서 과거 데이터 읽기
#   - Thanos Compactor: S3 블록 압축 및 다운샘플링
#   - Thanos Ruler: Recording Rule 결과 S3 저장
#
# 보안 주의사항:
#   - 이 파일에는 민감한 인증 정보가 포함됨
#   - Git에 커밋 시 주의 (gitignore 또는 암호화 권장)
#   - 프로덕션에서는 Sealed Secrets, Vault 등 사용 권장
#   - RBAC으로 Secret 접근 제한
#
# ============================================================================

apiVersion: v1
kind: Secret
metadata:
  name: thanos-s3-config
  namespace: monitoring
type: Opaque

# stringData: 평문 데이터 (자동으로 base64 인코딩됨)
# data 대신 stringData 사용으로 가독성 향상
stringData:
  # objstore.yml: Thanos가 읽는 S3 설정 파일
  # 모든 Thanos 컴포넌트는 --objstore.config-file 플래그로 이 파일 참조
  objstore.yml: |
    # ========================================================================
    # S3 Object Storage 설정
    # ========================================================================

    # 스토리지 타입
    # - S3: AWS S3 또는 S3 호환 스토리지 (MinIO, Ceph 등)
    # - GCS: Google Cloud Storage
    # - Azure: Azure Blob Storage
    # - Swift: OpenStack Swift
    type: S3

    config:
      # ======================================================================
      # 기본 S3 설정
      # ======================================================================

      # S3 버킷 이름
      # - 모든 Thanos 메트릭 블록이 저장될 버킷
      # - 미리 생성되어 있어야 함
      # - 버킷 이름은 전역적으로 고유해야 함 (AWS S3의 경우)
      bucket: thanos-bucket

      # S3 엔드포인트
      # - AWS S3: s3.amazonaws.com (리전별로 다를 수 있음)
      # - MinIO: minio.example.com:9000
      # - Ceph RGW: ceph-rgw.example.com
      # - 포트 포함 가능 (예: minio.example.com:9000)
      endpoint: s3.minio.miribit.lab:80

      # Access Key (사용자 ID)
      # - S3 호환 스토리지의 Access Key
      # - AWS의 경우 IAM 사용자의 Access Key ID
      # - 환경 변수로 주입 권장: ${S3_ACCESS_KEY}
      access_key: Kl8u9VGxT4KA8TxlLEfO

      # Secret Key (비밀번호)
      # - Access Key에 대응하는 Secret Key
      # - 절대 노출되면 안 됨
      # - 환경 변수로 주입 권장: ${S3_SECRET_KEY}
      secret_key: U9KVRsMZlHJtiToriOxXfl9uPAXqFjqAI1ZdRCOz

      # ======================================================================
      # 보안 설정
      # ======================================================================

      # Insecure 모드 (HTTP 사용)
      # - true: HTTP 사용 (테스트 환경)
      # - false: HTTPS 사용 (프로덕션 권장)
      # 주의: 프로덕션에서는 반드시 false로 설정
      insecure: true

      # HTTP 클라이언트 설정
      http_config:
        # TLS 인증서 검증 건너뛰기
        # - true: 자체 서명 인증서 허용 (테스트 환경)
        # - false: 유효한 인증서 필요 (프로덕션)
        # 주의: 프로덕션에서는 false로 설정하고 CA 인증서 제공
        insecure_skip_verify: true

        # 추가 HTTP 설정 (선택사항)
        # idle_conn_timeout: 90s        # 유휴 연결 타임아웃
        # response_header_timeout: 2m   # 응답 헤더 타임아웃
        # tls_handshake_timeout: 10s    # TLS 핸드셰이크 타임아웃
        # expect_continue_timeout: 1s   # Expect 100-continue 타임아웃
        # max_idle_conns: 100            # 최대 유휴 연결 수
        # max_idle_conns_per_host: 100  # 호스트당 최대 유휴 연결
        # max_conns_per_host: 0         # 호스트당 최대 연결 (0=무제한)

      # ======================================================================
      # 고급 S3 설정 (선택사항)
      # ======================================================================

      # region: us-east-1              # AWS 리전 (AWS S3만 해당)
      # signature_version2: false       # V2 서명 사용 (레거시)
      # encrypt_sse: false              # Server-Side Encryption 사용
      # sse_config:                     # SSE 설정
      #   type: SSE-S3                  # SSE-S3, SSE-KMS
      #   kms_key_id: ""                # KMS Key ID (SSE-KMS)

      # list_objects_version: ""        # ListObjects 버전 (v1/v2)
      # bucket_lookup_type: auto        # 버킷 조회 방식 (auto/dns/path)
      # part_size: 67108864             # Multipart upload 파트 크기 (64MB)
      # sse_encryption: ""              # SSE 암호화 타입
      # storage_class: STANDARD         # 스토리지 클래스

# ============================================================================
# 보안 Best Practices
# ============================================================================
#
# 1. Git 저장소 보호:
#    # .gitignore에 추가
#    *-secret.yaml
#
# 2. Sealed Secrets 사용 (권장):
#    kubeseal --format yaml < thanos-s3-secret.yaml > thanos-s3-sealed.yaml
#
# 3. External Secrets Operator 사용:
#    # Vault, AWS Secrets Manager 등과 연동
#    kind: ExternalSecret
#    spec:
#      secretStoreRef:
#        name: vault-backend
#
# 4. 환경 변수 사용:
#    access_key: ${S3_ACCESS_KEY}
#    secret_key: ${S3_SECRET_KEY}
#
# 5. IAM Role 사용 (AWS):
#    # EC2/EKS에서 IAM Role 활용
#    # access_key/secret_key 불필요
#
# ============================================================================
# S3 버킷 설정 가이드
# ============================================================================
#
# 1. 버킷 생성:
#    # AWS CLI
#    aws s3 mb s3://thanos-bucket --region us-east-1
#
#    # MinIO CLI
#    mc mb minio/thanos-bucket
#
# 2. 버킷 정책 설정:
#    {
#      "Version": "2012-10-17",
#      "Statement": [{
#        "Effect": "Allow",
#        "Principal": {"AWS": "arn:aws:iam::ACCOUNT:user/thanos"},
#        "Action": [
#          "s3:ListBucket",
#          "s3:GetObject",
#          "s3:PutObject",
#          "s3:DeleteObject"
#        ],
#        "Resource": [
#          "arn:aws:s3:::thanos-bucket",
#          "arn:aws:s3:::thanos-bucket/*"
#        ]
#      }]
#    }
#
# 3. Lifecycle 정책 (비용 절감):
#    # 오래된 블록 자동 삭제
#    {
#      "Rules": [{
#        "Id": "DeleteOldBlocks",
#        "Status": "Enabled",
#        "Expiration": {"Days": 395}
#      }]
#    }
#
# 4. 버전 관리 (데이터 보호):
#    # 실수로 삭제한 데이터 복구 가능
#    aws s3api put-bucket-versioning \
#      --bucket thanos-bucket \
#      --versioning-configuration Status=Enabled
#
# ============================================================================
# 연결 테스트
# ============================================================================
#
# 1. Secret 생성 확인:
#    kubectl get secret -n monitoring thanos-s3-config
#
# 2. Secret 내용 확인:
#    kubectl get secret -n monitoring thanos-s3-config \
#      -o jsonpath='{.data.objstore\.yml}' | base64 -d
#
# 3. Thanos Store에서 S3 연결 테스트:
#    kubectl exec -n monitoring thanos-store-0 -- \
#      thanos tools bucket inspect \
#      --objstore.config-file=/etc/thanos/objstore.yml
#
# 4. 버킷 내용 조회:
#    kubectl exec -n monitoring thanos-store-0 -- \
#      thanos tools bucket ls \
#      --objstore.config-file=/etc/thanos/objstore.yml
#
# ============================================================================
# 문제 해결
# ============================================================================
#
# 1. "Access Denied" 에러:
#    - Access Key/Secret Key 확인
#    - 버킷 정책 확인
#    - IAM 권한 확인
#
# 2. "No such bucket" 에러:
#    - 버킷 이름 확인
#    - 버킷이 실제로 존재하는지 확인
#    - Region 설정 확인 (AWS)
#
# 3. "Connection refused" 에러:
#    - Endpoint URL 확인
#    - 네트워크 연결 확인
#    - 방화벽 규칙 확인
#
# 4. "TLS handshake failed" 에러:
#    - insecure_skip_verify: true 설정 (테스트)
#    - 올바른 CA 인증서 제공 (프로덕션)
#
# ============================================================================
