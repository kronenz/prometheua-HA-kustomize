# Prometheus Agent + Thanos Receiver 아키텍처

> **4개 클러스터 환경에서 Prometheus Agent와 Thanos Receiver를 활용한 멀티클러스터 통합 관측성 플랫폼**

[![Architecture](https://img.shields.io/badge/Architecture-Agent%2BReceiver-success.svg)]()
[![Clusters](https://img.shields.io/badge/Clusters-4-blue.svg)]()
[![Multi--Tenancy](https://img.shields.io/badge/Multi--Tenancy-Enabled-orange.svg)]()

---

## 📋 개요

이 아키텍처는 **Prometheus Agent Mode와 Thanos Receiver**를 활용하여 4개 클러스터에서 경량화된 메트릭 수집과 중앙 집중식 데이터 관리를 구현합니다.

### 핵심 특징

- ✅ **엣지 리소스 최소화**: Prometheus Agent (~200MB)
- ✅ **실시간 Remote Write**: 메트릭을 중앙 Thanos Receiver로 전송
- ✅ **멀티테넌시**: 가 클러스터의 노드 반반 분리
- ✅ **중앙 집중식 관리**: 하나의 Grafana에서 모든 클러스터 모니터링
- ✅ **무제한 저장소**: MinIO S3 활용
- ✅ **GitOps 배포**: ArgoCD 기반 자동화

---

## 🏗️ 클러스터 구성

| 클러스터 | IP | 역할 | 주요 컴포넌트 | 특징 |
|---------|-----|------|-------------|------|
| **중앙 (cluster-01)** | 192.168.101.194 | 모니터링 허브 | Thanos Receiver, Query, Store, Compactor, Ruler<br/>Prometheus HA, Grafana, OpenSearch | 모든 메트릭 수집 및 저장 |
| **가 (cluster-02)** | 192.168.101.196 | 엣지 + 멀티테넌시 | Prometheus Agent, Node Exporter, KSM | **노드 반반 테넌시 분리** |
| **나 (cluster-03)** | 192.168.101.197 | 엣지 | Prometheus Agent, Node Exporter, KSM | 경량 메트릭 수집 |
| **다 (cluster-04)** | 192.168.101.198 | 엣지 | Prometheus Agent, Node Exporter, KSM | 경량 메트릭 수집 |

---

## 🎯 아키텍처 다이어그램

```mermaid
graph TB
    subgraph "중앙 클러스터 (cluster-01 / 192.168.101.194)"
        RECEIVER[Thanos Receiver<br/>Remote Write 수신]
        PROM[Prometheus HA<br/>중앙 저장]
        TQ[Thanos Query<br/>통합 쿼리]
        TS[Thanos Store<br/>S3 히스토리]
        TC[Thanos Compactor<br/>데이터 압축]
        TR[Thanos Ruler<br/>글로벌 알림]
        GRAF[Grafana<br/>통합 대시보드]

        RECEIVER -->|저장| PROM
        PROM --> TQ
        TQ --> GRAF
        TQ --> TS
        TS --> S3[MinIO S3]
        PROM --> S3
        TC --> S3
    end

    subgraph "가 클러스터 (cluster-02 / 196) - 멀티테넌시"
        AGENT2A[Prometheus Agent A<br/>Tenant 1]
        AGENT2B[Prometheus Agent B<br/>Tenant 2]
        NE2[Node Exporter<br/>DaemonSet]
        KSM2[Kube-State-Metrics]

        NE2 --> AGENT2A
        NE2 --> AGENT2B
        KSM2 --> AGENT2A
        KSM2 --> AGENT2B
    end

    subgraph "나 클러스터 (cluster-03 / 197)"
        AGENT3[Prometheus Agent]
        NE3[Node Exporter]
        KSM3[Kube-State-Metrics]

        NE3 --> AGENT3
        KSM3 --> AGENT3
    end

    subgraph "다 클러스터 (cluster-04 / 198)"
        AGENT4[Prometheus Agent]
        NE4[Node Exporter]
        KSM4[Kube-State-Metrics]

        NE4 --> AGENT4
        KSM4 --> AGENT4
    end

    AGENT2A -->|Remote Write| RECEIVER
    AGENT2B -->|Remote Write| RECEIVER
    AGENT3 -->|Remote Write| RECEIVER
    AGENT4 -->|Remote Write| RECEIVER

    style RECEIVER fill:#4fc3f7
    style PROM fill:#e1bee7
    style TQ fill:#81c784
    style GRAF fill:#ffd54f
    style AGENT2A fill:#fff3e0
    style AGENT2B fill:#ffe0b2
```

---

## 📂 문서 구조

### [01-아키텍처](./01-아키텍처/)
**내용**: 시스템 전체 아키텍처 설계 및 설명
- 전체 시스템 아키텍처
- Prometheus Agent vs Full Prometheus 비교
- Thanos Receiver 패턴 설명
- 데이터 흐름 및 고가용성

**대상**: 아키텍트, 기술 리더

---

### [02-Kustomize-Helm-GitOps-배포](./02-Kustomize-Helm-GitOps-배포/)
**내용**: Kustomize + Helm + ArgoCD 기반 배포 가이드
- ArgoCD 설치 및 설정
- Kustomize + Helm 통합
- 클러스터별 배포 매니페스트
- Application-of-Applications 패턴
- 배포 검증 및 롤백

**대상**: DevOps 엔지니어, 배포 담당자

---

### [03-운영-가이드](./03-운영-가이드/)
**내용**: 일상 운영 작업 및 절차
- GitOps 워크플로우
- 설정 변경 프로세스
- 업데이트 및 패치 관리
- 백업 및 복구
- 스케일링
- 일반 트러블슈팅

**대상**: SRE, 운영 담당자

---

### [04-모니터링-가이드](./04-모니터링-가이드/)
**내용**: 모니터링 설정 및 알림 관리
- Grafana 대시보드 구성
- Prometheus Alert Rules
- Thanos Ruler 글로벌 알림
- Alertmanager 설정
- 로그 모니터링 (OpenSearch)
- 성능 튜닝

**대상**: 모니터링 엔지니어, SRE

---

### [05-멀티테넌시-구성](./05-멀티테넌시-구성/)
**내용**: 가 클러스터의 노드 멀티테넌시 설정 ⭐ **특별**
- 노드 레이블 및 Taints 설정
- Tenant별 Prometheus Agent 분리
- ResourceQuota 및 LimitRange
- NetworkPolicy 격리
- 모니터링 메트릭 분리
- 트러블슈팅

**대상**: 멀티테넌시 구성 담당자, 클러스터 관리자

---

### [06-네트워크-보안](./06-네트워크-보안/)
**내용**: 네트워크 구성 및 보안 설정
- Cilium CNI 구성
- LoadBalancer IP 관리
- Ingress 설정
- TLS/SSL 인증서
- RBAC 및 ServiceAccount
- NetworkPolicy
- Secret 관리

**대상**: 보안 담당자, 네트워크 엔지니어

---

### [07-확장-아키텍처](./07-확장-아키텍처/)
**내용**: 대규모 환경으로 확장
- 10개 이상 클러스터 확장
- 리전별 Thanos Receiver 배치
- 계층적 Thanos 구조
- 네트워크 최적화
- 비용 최적화

**대상**: 아키텍트, 확장 계획 담당자

---

### [08-참고자료](./08-참고자료/)
**내용**: 추가 기술 문서 및 레퍼런스
- Prometheus Agent 상세 가이드
- Thanos Receiver 설정 옵션
- MinIO S3 연동
- 성능 벤치마크
- 마이그레이션 가이드
- FAQ

**대상**: 모든 사용자

---

### [09-성능-최적화](./09-성능-최적화/) ⭐ **NEW**
**내용**: 쿼리 속도, 네트워크, 리소스 사용량 최적화
- 쿼리 성능 최적화 (Query Frontend 캐싱)
- Remote Write 최적화 (압축, 배치 튜닝)
- Receiver 성능 튜닝 (Hashring, TSDB)
- 메트릭 필터링 전략 (Drop/Keep 규칙)
- 스토리지 최적화 (Compactor, 다운샘플링)
- 리소스 Right-Sizing (HPA, 적정 할당)
- 네트워크 대역폭 관리
- 캐싱 전략 (Memcached, Redis)

**대상**: 성능 엔지니어, SRE, 비용 관리자

---

## 🚀 빠른 시작

### 1. 아키텍처 이해
```bash
cat 01-아키텍처/README.md
```

### 2. 배포 실행
```bash
cat 02-Kustomize-Helm-GitOps-배포/README.md
```

### 3. 운영 시작
```bash
cat 03-운영-가이드/README.md
```

### 4. 멀티테넌시 설정 (가 클러스터)
```bash
cat 05-멀티테넌시-구성/README.md
```

---

## 📊 리소스 요구사항

### 중앙 클러스터 (cluster-01)
| 컴포넌트 | CPU | Memory | Storage |
|---------|-----|--------|---------|
| Thanos Receiver | 1 core | 2Gi | - |
| Prometheus HA | 2 cores | 4Gi | 30Gi |
| Thanos Query | 500m | 1Gi | - |
| Thanos Store | 500m | 1Gi | - |
| Thanos Compactor | 500m | 1Gi | 20Gi |
| Grafana | 200m | 512Mi | 10Gi |

**총계**: ~5 cores, 10Gi Memory, 60Gi Storage

---

### 엣지 클러스터 (cluster-02, 03, 04)
| 컴포넌트 | CPU | Memory | 개수 |
|---------|-----|--------|------|
| Prometheus Agent | 100m | 200Mi | 1개 (또는 2개 for 멀티테넌시) |
| Node Exporter | 50m | 100Mi | DaemonSet |
| Kube-State-Metrics | 50m | 100Mi | 1개 |

**총계 (단일 테넌트)**: ~200-450MB
**총계 (멀티테넌시)**: ~400-700MB

---

## 🎯 주요 차별점

### vs Prometheus + Thanos Sidecar

| 특징 | Agent + Receiver | Sidecar |
|------|-----------------|---------|
| **엣지 리소스** | ~200MB | ~2GB |
| **데이터 전송** | 실시간 Remote Write | 2시간 블록 업로드 |
| **네트워크 의존** | 높음 | 낮음 |
| **로컬 쿼리** | ❌ 불가 | ✅ 가능 |
| **WAL 버퍼링** | ✅ 있음 | N/A |
| **적합 환경** | 리소스 제한 환경 | 독립 운영 환경 |

---

## 🔗 외부 리소스

- [Prometheus Agent Mode](https://prometheus.io/docs/prometheus/latest/feature_flags/#prometheus-agent)
- [Thanos Receiver](https://thanos.io/tip/components/receive.md/)
- [ArgoCD Documentation](https://argo-cd.readthedocs.io/)
- [Kubernetes Multi-Tenancy](https://kubernetes.io/docs/concepts/security/multi-tenancy/)

---

## 📞 지원

- **이슈 보고**: GitHub Issues
- **문서 기여**: Pull Request 환영
- **긴급 지원**: Infrastructure Team

---

**최종 업데이트**: 2025-10-20
**아키텍처 버전**: 3.0 (Agent + Receiver)
**작성자**: Infrastructure Team
