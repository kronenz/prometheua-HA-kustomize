# ============================================================================
# ArgoCD Application - kube-prometheus-stack (Cluster-02 Edge)
# ============================================================================
#
# 목적:
#   - 엣지 클러스터에 kube-prometheus-stack 배포
#   - Prometheus Agent Mode + Remote Write
#   - Grafana 및 Alertmanager 비활성화 (경량화)
#   - 중앙 클러스터로 메트릭 전송
#
# 배포 아키텍처:
#   Prometheus (Agent) → Remote Write → Thanos Receiver (중앙)
#   ServiceMonitor (자동 감지) → Prometheus Agent
#   중앙 Grafana에서 통합 시각화
#
# GitOps 워크플로우:
#   Git Push → ArgoCD Sync → Kustomize + Helm → Kubernetes
#
# ============================================================================

apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  # Application 이름
  # - ArgoCD UI에서 표시되는 이름
  # - 명명 규칙: <component>-<cluster>
  name: kube-prometheus-stack-cluster-02

  # ArgoCD가 설치된 네임스페이스
  # - 보통 'argocd' 네임스페이스
  namespace: argocd

  # Finalizer 설정
  # - Application 삭제 시 배포된 리소스도 함께 삭제
  finalizers:
    - resources-finalizer.argocd.argoproj.io

  # 레이블
  labels:
    cluster: cluster-02-edge
    component: monitoring
    environment: edge

  # 어노테이션
  annotations:
    # 알림 설정 (선택사항)
    notifications.argoproj.io/subscribe.on-sync-succeeded.slack: monitoring-alerts

spec:
  # ==========================================================================
  # 프로젝트 설정
  # ==========================================================================
  # ArgoCD Project
  # - 엣지 클러스터는 별도 프로젝트로 관리 권장
  # - 또는 'default' 사용
  project: default

  # ==========================================================================
  # Source 설정 (Git 저장소)
  # ==========================================================================
  source:
    # Git 저장소 URL
    # - ⚠️ 주의: 실제 Git 저장소 URL로 변경 필요
    repoURL: https://github.com/your-org/thanos-multi-cluster.git

    # 브랜치/태그/커밋
    targetRevision: HEAD

    # Kustomize 오버레이 경로
    # - 엣지 클러스터 전용 오버레이
    path: deploy/overlays/cluster-02-edge/kube-prometheus-stack-new

    # Kustomize 설정
    kustomize:
      # Helm 지원 활성화
      enableHelm: true

  # ==========================================================================
  # Destination 설정 (배포 대상 클러스터)
  # ==========================================================================
  destination:
    # 대상 클러스터
    # - 방법 1: ArgoCD에 등록된 클러스터 이름 사용 (권장)
    # name: cluster-02-edge

    # - 방법 2: 클러스터 API 서버 URL 직접 지정
    server: https://192.168.101.196:6443

    # 배포 네임스페이스
    namespace: monitoring

  # ==========================================================================
  # Sync 정책
  # ==========================================================================
  syncPolicy:
    # 자동 동기화 설정
    automated:
      # 자동 Sync 활성화
      # - 엣지 클러스터도 자동 배포 권장
      prune: true        # Git에서 삭제된 리소스 자동 제거
      selfHeal: true     # 클러스터에서 수동 변경 자동 복구
      allowEmpty: false

    # Sync 옵션
    syncOptions:
      - CreateNamespace=true
      - PrunePropagationPolicy=foreground
      - PruneLast=true
      - RespectIgnoreDifferences=true
      - ServerSideApply=true
      - Validate=true

    # 재시도 정책
    retry:
      limit: 5
      backoff:
        duration: 5s
        maxDuration: 3m
        factor: 2

  # ==========================================================================
  # 무시할 차이점 설정
  # ==========================================================================
  ignoreDifferences:
    # Prometheus Operator 자동 생성 필드
    - group: monitoring.coreos.com
      kind: Prometheus
      jsonPointers:
        - /status

    - group: monitoring.coreos.com
      kind: ServiceMonitor
      jsonPointers:
        - /status

    - group: monitoring.coreos.com
      kind: PodMonitor
      jsonPointers:
        - /status

  # ==========================================================================
  # Info (추가 정보)
  # ==========================================================================
  info:
    - name: Description
      value: |
        Prometheus Agent Mode + Remote Write
        엣지 클러스터 경량 모니터링

    - name: Cluster
      value: cluster-02-edge (192.168.101.196)

    - name: Components
      value: |
        - Prometheus Operator
        - Prometheus (Agent Mode)
        - node-exporter
        - kube-state-metrics

    - name: Remote Write Target
      value: http://thanos-receiver.k8s-cluster-01.miribit.lab/api/v1/receive

    - name: Central Grafana
      value: http://grafana.k8s-cluster-01.miribit.lab

# ============================================================================
# 엣지 클러스터 배포 가이드
# ============================================================================
#
# 1. ArgoCD에 엣지 클러스터 등록:
#
#    a) Kubeconfig 준비:
#       sshpass -p "123qwe" ssh -o StrictHostKeyChecking=no bsh@192.168.101.196 \
#         "echo '123qwe' | sudo -S cp /etc/kubernetes/admin.conf /tmp/admin.conf && \
#          echo '123qwe' | sudo -S chmod 644 /tmp/admin.conf"
#
#       sshpass -p "123qwe" scp -o StrictHostKeyChecking=no \
#         bsh@192.168.101.196:/tmp/admin.conf ~/.kube/cluster-02.conf
#
#    b) ArgoCD에 클러스터 등록:
#       argocd cluster add cluster-02 \
#         --kubeconfig ~/.kube/cluster-02.conf \
#         --name cluster-02-edge
#
#    c) 등록 확인:
#       argocd cluster list
#
# 2. Application 생성:
#    kubectl apply -f argocd/apps/cluster-02-edge/kube-prometheus-stack.yaml
#
# 3. 배포 확인:
#    argocd app get kube-prometheus-stack-cluster-02
#    argocd app sync kube-prometheus-stack-cluster-02
#
# 4. 원격 클러스터에서 확인:
#    export KUBECONFIG=~/.kube/cluster-02.conf
#    kubectl get pods -n monitoring
#    kubectl logs -n monitoring prometheus-kube-prometheus-stack-prometheus-0 \
#      | grep "remote_write"
#
# ============================================================================
# 운영 가이드
# ============================================================================
#
# 1. 메트릭 전송 확인:
#    # 엣지 클러스터에서
#    kubectl logs -n monitoring prometheus-kube-prometheus-stack-prometheus-0 \
#      | grep -E "remote_write|samples"
#
#    # 중앙 클러스터에서
#    kubectl logs -n monitoring thanos-receiver-0 \
#      | grep "cluster-02-edge"
#
# 2. Remote Write 상태 확인:
#    # Prometheus Agent UI (port-forward)
#    kubectl port-forward -n monitoring prometheus-kube-prometheus-stack-prometheus-0 9090:9090
#    # http://localhost:9090/api/v1/status/tsdb
#    # WAL 상태 확인
#
# 3. ServiceMonitor 자동 감지 확인:
#    # 새 서비스 배포
#    kubectl create -f my-service.yaml
#    kubectl create -f my-servicemonitor.yaml
#
#    # Prometheus가 자동으로 감지
#    kubectl logs -n monitoring prometheus-kube-prometheus-stack-prometheus-0 \
#      | grep "servicemonitor"
#
# 4. 트러블슈팅:
#    a) Remote Write 실패:
#       - Thanos Receiver URL 확인
#       - 네트워크 연결 확인: curl http://thanos-receiver.k8s-cluster-01.miribit.lab
#       - Queue 상태: kubectl get prometheus -n monitoring -o yaml
#
#    b) 메트릭 누락:
#       - ServiceMonitor 라벨 확인
#       - Prometheus Operator 로그 확인
#       - Target 목록 확인 (Prometheus UI)
#
#    c) 디스크 부족:
#       - WAL retention 확인 (기본 6h)
#       - PVC 크기 확인 (기본 5Gi)
#       - 필요 시 확장: kubectl edit pvc -n monitoring
#
# ============================================================================
# 성능 최적화
# ============================================================================
#
# 1. Remote Write 튜닝:
#    - queueConfig.capacity: 네트워크 불안정 시 증가 (10000 → 50000)
#    - queueConfig.maxShards: 대량 메트릭 시 증가 (10 → 20)
#    - batchSendDeadline: 지연 허용 시 증가 (5s → 10s)
#
# 2. 리소스 최적화:
#    - Prometheus Agent 메모리: 기본 512Mi
#    - 메트릭 많을 시 증가: 1Gi
#    - CPU: 기본 500m, 필요 시 1000m
#
# 3. WAL 관리:
#    - retention: 기본 6h
#    - 네트워크 불안정 시 증가: 12h
#    - 디스크 여유 있을 시만
#
# ============================================================================
# 보안 고려사항
# ============================================================================
#
# 1. Remote Write 인증 (권장):
#    # Thanos Receiver에 TLS + Basic Auth 추가
#    remoteWrite:
#      - url: https://thanos-receiver.k8s-cluster-01.miribit.lab/api/v1/receive
#        basicAuth:
#          username:
#            name: remote-write-auth
#            key: username
#          password:
#            name: remote-write-auth
#            key: password
#        tlsConfig:
#          insecureSkipVerify: false
#
# 2. 네트워크 정책:
#    - Prometheus Agent → Thanos Receiver만 허용
#    - 불필요한 인바운드 차단
#
# 3. RBAC:
#    - Prometheus Operator 권한 최소화
#    - ServiceMonitor 생성 권한 제한
#
# ============================================================================
